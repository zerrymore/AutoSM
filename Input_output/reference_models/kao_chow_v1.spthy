theory kc
begin

functions: id/1
builtins: symmetric-encryption
let A(Kas, idA, idB) =
  new Na;
  event Out_A_Na(Na);
  out(<'1', idA,idB,Na>);
  in(cypher);
  let <package1, message, Nb> = cypher in
  let <'2', =idA, =idB, =Na, Kab> = sdec(package1, Kas) in
  let <'4', =Na> = sdec(message, Kab) in
  event IN_A_1(cypher, Nb);
  event Secret(idA, idB, Kab);
  event Commit_A(idA, idB, <'A', 'B', Na, Kab>);
  event Running_A(idA, idB, <'A', 'B', Nb, Kab>);
  out(senc(<'5',Nb>, Kab)); 0

let B(Kbs, idA, idB) =
  in(cypher);
  let <package1, package2> = cypher in
  let <'3', =idA, =idB, Na, Kab> = sdec(package2, Kbs) in
  event Secret(idA, idB, Kab);
  new Nb;
  event IN_B_Na(cypher, Na);
  event OUT_B_1(<package1,senc(<'4', Na>, Kab),Nb>);
  event Running_B(idA, idB, <'A', 'B', Na, Kab>);
  out(<package1,senc(<'4', Na>, Kab),Nb>);
  in(cypher2);
  let <'5', =Nb> = sdec(cypher2, Kab) in 
  event Commit_B(idA, idB, <'A', 'B', Nb, Kab>)

let S(Kas, Kbs, idA, idB) =
  in(<'1', =idA,=idB,Na>);
  new Kab;
  let package1 = senc(<'2',idA,idB,Na,Kab>, Kas) in
  let package2 = senc(<'3',idA,idB,Na,Kab>, Kbs) in
  event OUT_S_1(<package1,package2>);
  out(<package1,package2>); 0



process:
!(    
  new Kas; out(id(Kas)); new Kbs; out(id(Kbs)); 
    (!A(Kas, id(Kas), id(Kbs))  | !B(Kbs, id(Kas), id(Kbs)) | !S(Kas, Kbs, id(Kas), id(Kbs)))  
)



lemma sources [sources]:
  all-traces
  "
   (All x m #i.
     (IN_A_1( m, x ) @ #i) ==>
     ((Ex #j. (!KU( x ) @ #j) ∧ (#j < #i)) |
      (Ex #j. (OUT_B_1( m ) @ #j) & (#j < #i))))
    &
    (All x m #i.
      (IN_B_Na( m, x ) @ #i) ==>
      ((Ex #j. (!KU( x ) @ #j) ∧ (#j < #i)) |
       (Ex #j. (OUT_S_1( m ) @ #j) & (#j < #i))))
    "

lemma secrecy:
  "All A B k #i. Secret(A,B,k)@i ==> not (Ex #j. K(k)@j ) "

// check the authenticity and freshness of the transaction from B's point of view
lemma injectiveagreement_B:
  "All A B t #i.
    Commit_B(A,B,t) @i
    ==> (Ex #j. Running_A(A,B,t) @j
        & j < i
        & not (Ex A2 B2 #i2. Commit_B(A2,B2,t) @i2
                           & not (#i2 = #i)))"

// check the authenticity of the transaction from B's point of view
lemma agreement_B:
 "All A B t #i.
   Commit_B(A,B,t) @i
   ==> (Ex #j. Running_A(A,B,t) @j  & j < i)"

// check the authenticity and freshness of the transaction from A's point of view
lemma injectiveagreement_A:
  "All A B t #i.
    Commit_A(A,B,t) @i
    ==> (Ex #j. Running_B(A,B,t) @j
        & j < i
        & not (Ex A2 B2 #i2. Commit_A(A2,B2,t) @i2
                           & not (#i2 = #i)))"

// check the authenticity of the transaction from A's point of view
lemma agreement_A:
 "All A B t #i.
   Commit_A(A,B,t) @i
   ==> (Ex #j. Running_B(A,B,t) @j  & j < i)"


end


// ==============================================================================
// summary of summaries:

// analyzed: temp.spthy

//   processing time: 6.83s
  
//   sources (all-traces): verified (19 steps)
//   secrecy (all-traces): verified (24 steps)
//   injectiveagreement_B (all-traces): verified (25 steps)
//   agreement_B (all-traces): verified (21 steps)
//   injectiveagreement_A (all-traces): verified (17 steps)
//   agreement_A (all-traces): verified (13 steps)

// ==============================================================================