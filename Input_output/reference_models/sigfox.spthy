theory sigfox_PKC begin
builtins: asymmetric-encryption,signing 

let Server(skS, pkS, pkD) =
  new Na;
  let msg = aenc(<pkS, Na>, pkD) in
  let sig = sign(msg, skS) in
  event Send(pkS, msg);
  event SecretA(Na);
  out(<msg, sig>)

let Device(skD, pkD, pkS) =
  in(<msg, sig>);
  let <=pkS, Na> = adec(msg, skD) in
  if verify(sig, msg, pkS)=true then
    event Recv(pkD, msg);
	  event SecretB(Na)

process:
    !(
      new skS; out(pk(skS)); event HonestA(pk(skS));
      !(
        new skD; out(pk(skD)); event HonestB(pk(skD));
        (!Server(skS, pk(skS), pk(skD))  | !Device(skD, pk(skD), pk(skS))   )
      )
    ) 

 

lemma executable: exists-trace 
"Ex A B m #i #j. Send(A,m)@i & Recv(B,m) @j"

lemma secret_A: all-traces 
	"All n #i. SecretA(n) @i  ==> (not (Ex #j. K(n)@j))"
	
lemma secret_B: all-traces 
	"All n #i. Secret(n) @i & Role('B') @i ==> (not (Ex #j. K(n)@j)) "
	
end


// ==============================================================================
// summary of summaries:

// analyzed: temp.spthy

//   processing time: 1.14s
  
//   WARNING: 2 wellformedness check failed!
//            The analysis results might be wrong!
  
//   executable (exists-trace): verified (6 steps)
//   secret_A (all-traces): verified (4 steps)
//   secret_B (all-traces): verified (2 steps)

// ==============================================================================