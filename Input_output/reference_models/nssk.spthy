theory nssk
begin

functions: id/1, dec/1, inc/1
equations: inc(dec(x)) = x
functions: senc/2, sdec/2[destructor]
equations: sdec(senc(m,k),k)=m

let A(Kas, idA, idB) =
  new Na;
  out(<'1', idA, idB, Na>);
  in(cypher);
  let <'2', =Na, =idB, Kab, message2> = sdec(cypher, Kas) in
  event AUTO_IN_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1(cypher, message2);
  out(message2);
  in(cypher2);
  let <'4', Nb> = sdec(cypher2, Kab) in
  event AUTO_IN_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1(cypher2, Nb);
  event Running_A(idA, idB, <'A', 'B', dec(Nb), Kab>);
  event Commit_A(idA, idB, <'A', 'B', Nb, Kab>);
  //out(senc(Nb_dec, Kab))
  // modified:
  out(senc(<'5', dec(Nb)>,Kab))

let B(Kbs, idA) =
  in(cypher3);
  let <'3', Kab, =idA> = sdec(cypher3, Kbs) in
  new Nb;
  event Running_B(idA, id(Kbs), <'A', 'B', Nb, Kab>);
  event Secret(idA, id(Kbs), Kab);
  event AUTO_OUT_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1(senc(<'4', Nb>, Kab));
  out(senc(<'4', Nb>, Kab));
  event B_OUT_4(senc(<'4', Nb>, Kab));
  in(cypher4);
  let Nb_dec = sdec(cypher4, Kab) in 
  // ADD:
  let <'5', dec(=Nb)> = Nb_dec in
  event Commit_B(idA, id(Kbs), <'A', 'B', dec(Nb), Kab>)

let S(Kas, Kbs, idA, idB) =
  new Kab;
  in(<'1', =idA, =idB, Na>);
  let message1 = <'2', Na, idB, Kab, senc(<'3', Kab, idA>, Kbs)> in
  let cypher = senc(message1, Kas) in
  event Secret(idA, idB, Kab);   // Added
  event AUTO_OUT_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1( cypher );
  out(cypher); 0



process:
!(    
  new Kas; new Kbs; out(id(Kas)); out(id(Kbs));   
    // 3. The Alice, Bob and server are running in parallel.
    (!A(Kas, id(Kas), id(Kbs))  | !B(Kbs, id(Kas)) | !S(Kas, Kbs, id(Kas), id(Kbs)))  
  )




lemma AUTO_typing [sources]:
  all-traces
  "(
    (All x m #i.
      (AUTO_IN_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1( m, x) @ #i) ==>
      ((Ex #j. (!KU( x ) @ #j) & (#j < #i)) |
       (Ex #j.
         (AUTO_OUT_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1( m ) @ #j) &
         (#j < #i))))) &
   (All x m #i.
     (AUTO_IN_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1( m, x ) @ #i) ==>
     ((Ex #j. (!KU( x ) @ #j) & (#j < #i)) |
      (Ex #j.
        (AUTO_OUT_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1( m ) @ #j) &
        (#j < #i))))"

lemma executability:
 exists-trace
 " Ex A B nb kab #i #j #k #m.
   Commit_B(A,B,<'A', 'B', dec(nb),kab>)@#i
  & Commit_A(A,B,<'A', 'B', nb,kab>)@#j & #j<#i
  & Running_A(A,B,<'A', 'B', dec(nb),kab>)@#m
  & Running_B(A,B,<'A', 'B', nb,kab>)@#k & #k<#j
 "

// check the secrecy of a secret x protected by the long-term key of A and B
lemma Secrecy:
 "not(
     Ex A B m #i .
       Secret(A, B, m)@ #i
       & (Ex #r. K(m) @ #r)
   )
 "

// check the authenticity and freshness of the transaction from B's point of view
lemma injectiveagreement_B:
  "All A B t #i.
    Commit_B(A,B,t) @i
    ==> (Ex #j. Running_A(A,B,t) @j
        & j < i
        & not (Ex A2 B2 #i2. Commit_B(A2,B2,t) @i2
                           & not (#i2 = #i)))"

// check the authenticity of the transaction from B's point of view
lemma agreement_B:
 "All A B t #i.
   Commit_B(A,B,t) @i
   ==> (Ex #j. Running_A(A,B,t) @j  & j < i)"

// check the authenticity and freshness of the transaction from A's point of view
lemma injectiveagreement_A:
  "All A B t #i.
    Commit_A(A,B,t) @i
    ==> (Ex #j. Running_B(A,B,t) @j
        & j < i
        & not (Ex A2 B2 #i2. Commit_A(A2,B2,t) @i2
                           & not (#i2 = #i)))"

// check the authenticity of the transaction from A's point of view
lemma agreement_A:
 "All A B t #i.
   Commit_A(A,B,t) @i
   ==> (Ex #j. Running_B(A,B,t) @j  & j < i)"

end


// ==============================================================================
// summary of summaries:

// analyzed: nssk_verified.spthy

//   processing time: 47.26s
  
//   AUTO_typing (all-traces): verified (71 steps)
//   executability (exists-trace): verified (14 steps)
//   Secrecy (all-traces): verified (14 steps)
//   injectiveagreement_B (all-traces): verified (59 steps)
//   agreement_B (all-traces): verified (43 steps)
//   injectiveagreement_A (all-traces): verified (25 steps)
//   agreement_A (all-traces): verified (13 steps)

// ==============================================================================