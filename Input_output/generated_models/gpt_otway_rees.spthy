theory otway_rees_raw_output
begin
builtins: diffie-hellman, symmetric-encryption, signing, xor, hashing, asymmetric-encryption
functions: id/1
let A(idA, kas, idB)=
new I;
new Na;
let message1 = <I, idA, idB, senc(<Na, I, idA, idB>, kas)> in 
out(message1);
in(message4);
let <=I, gamma_0> = message4 in
let gamma_1 = sdec(gamma_0, kas) in
let <=Na, kab> = gamma_1 in
0

let B(idA, idB, kbs)=
in(message1);
let <I, =idA, =idB, gamma_0> = message1 in
// let gamma_1 = sdec(gamma_0, kas) in
// let <Na, I, idA, idB> = gamma_1 in
new Nb;
let message2 = <message1, senc(<Nb, I, idA, idB>, kbs)> in 
out(message2);
in(message3);
let <=I, gamma_2, gamma_3> = message3 in
let gamma_4 = sdec(gamma_3, kbs) in
let <=Nb, kab> = gamma_4 in
// let gamma_5 = sdec(gamma_2, kas) in
// let <Na, kab> = gamma_5 in
let decryptedPart = sdec(senc(<Nb, kab>, kbs), kbs) in 
// let message4 = <I, senc(<Na, kab>, kas)> in 
// Can not construct message4 from {'kbs', 'gamma_3', 'gamma_2', 'gamma_4', 'idA', 'idB', 'I', 'kab', 'decryptedPart', 'message2', 'gamma_0', 'Nb', 'message3', 'message1'}
// out(message4);
0

let S(idA, kas, kbs, idB)=
in(message2);
let <message1, gamma_0> = message2 in
let <I, =idA, =idB, gamma_1> = message1 in
let gamma_2 = sdec(gamma_1, kas) in
let <Na, =I, =idA, =idB> = gamma_2 in
let gamma_3 = sdec(gamma_0, kbs) in
let <Nb, =I, =idA, =idB> = gamma_3 in
new kab;
let message3 = <I, senc(<Na, kab>, kas), senc(<Nb, kab>, kbs)> in 
out(message3);
0


process:
!(    
  new kas; new kbs;  
  let idA = id(kas) in out(idA);  
  let idB = id(kbs) in out(idB);  
  (!A(idA, kas, idB) | !B(idA, idB, kbs) | !S(idA, kas, kbs, idB))  
)
end
