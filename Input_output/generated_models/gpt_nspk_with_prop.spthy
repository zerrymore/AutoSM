theory nspk_with_properties
begin
builtins: diffie-hellman, symmetric-encryption, signing, xor, hashing, asymmetric-encryption


let Alice(idA, skA, pkA, pkB)=
  event Role_A();
  new Na;
  let message1 = aenc(<idA, Na>, pkB) in 
  event OUT_I_1(message1);
  out(message1);
  in(message2);
  let gamma_0 = adec(message2, skA) in
  let <=Na, Nb> = gamma_0 in
  let message3 = aenc(Nb, pkB) in 
  event IN_I_2_nr(Nb, message2);
  event OUT_I_2(message3);
  out(message3);
  event SessionBuiltA(pkA, Na, Nb);
  event SessionA(pkA, pkB, Na);
  0

let Bob(skB, pkA, pkB)=
  event Role_B();
  in(message1);
  let gamma_0 = adec(message1, skB) in
  let <idA, Na> = gamma_0 in
  event IN_R_1_ni(Na, message1);
  new Nb;
  let message2 = aenc(<Na, Nb>, pkA) in 
  event OUT_R_1(message2);
  out(message2);
  in(message3);
  let =Nb = adec(message3, skB) in
  event IN_R_2(Nb, message3);
  event SessionBuiltB(pkB, Na, Nb);
  event SessionB(pkA, pkB, Na);
  0


process:
!(   
  new skA; out(pk(skA)); event HonestA(pk(skA));
  let idA = pk(skA) in out(idA);
  !(   
    new skB; out(pk(skB)); event HonestB(pk(skB));
    let pkA = pk(skA) in out(pkA);
    let pkB = pk(skB) in out(pkB);
    (   !Alice(idA, skA, pkA, pkB) | !Bob(skB, pkA, pkB))
  )
)



lemma source [sources, reuse, output=[msr]]:
  " (All ni m1 #i.
       IN_R_1_ni( ni, m1) @ i
       ==>
       ( (Ex #j. KU(ni) @ j & j < i)
       | (Ex #j. OUT_I_1( m1 ) @ j)
       )
    )
  & (All nr m2 #i.
       IN_I_2_nr( nr, m2) @ i
       ==>
       ( (Ex #j. KU(nr) @ j & j < i)
       | (Ex #j. OUT_R_1( m2 ) @ j)
       )
    )
    & (All nr m3 #i.
      IN_R_2(nr, m3) @ i
      ==>
      ( (Ex #j. KU(nr) @ j & j < i)
      | (Ex #j. OUT_I_2( m3 ) @ j)
      )
   )
"



lemma Confident_aux[reuse]:
  " not ( Ex pka Na Nb #t1 #t2.
            SessionBuiltA(pka,Na,Nb)@t1 & KU(Na)@t2 )"


lemma SessionBuilt:
exists-trace
"Ex pka pkb Na Nb #t1 #t2.
  SessionBuiltA(pka,Na,Nb)@t1 & SessionBuiltB(pkb,Na,Nb)@t2"


lemma HonestImpl:
  "All pka Na Nb #i. SessionBuiltA(pka,Na,Nb)@i ==> (Ex #j.HonestA(pka)@j)"

// falsified
lemma Confidentiality:
"not(
    Ex pka pkb Na Nb #t1 #t2 #t3 #i1 #i2.
    /* If some roles claim have setup a shared secret of Na and Nb */
    SessionBuiltA(pka,Na,Nb)@t1
    & SessionBuiltB(pkb,Na,Nb)@t3
    /* but the adversary knows Na, */
    & KU(Na)@t2
    /* and both roles are honest without having performed key leak.*/
    & HonestA(pka) @ i1
    & HonestB(pkb) @ i2
 )"


// satisfied: 
//      If honest A communicates with an honest B (both roles
//      do not leak their private keys), then adversary can not
//      knows na.
 lemma sec_of_A[reuse]:
 "not(
     Ex pka pkb Na #t1 #t2 #i1 #i2.
     SessionA(pka,pkb,Na)@t1
     & KU(Na)@t2
     /* without having performed a long-term key reveal. */
     & HonestA(pka) @ i1
     & HonestB(pkb) @ i2
  )"


// falsified (Lowe man-in-th-middle attack): 
//      If honest  cBommunicates with an honest A (both roles
//      do not leak their private keys), then adversary can 
//      still knows na.
lemma sec_of_B:
 "not(
     Ex pka pkb Na #t1 #t2 #i1 #i2.
     SessionB(pka,pkb,Na)@t1
     & KU(Na)@t2
     /* without having performed a long-term key reveal. */
     & HonestA(pka) @ i1
     & HonestB(pkb) @ i2  
  )"


  lemma sec_of_B_test:
 "not (Ex pka pkb Na Nb #t1 #t2 #m1 #m2 #i1 #i2.
     SessionB(pka,pkb,Na)@t1
     & KU(Na)@t2
     /* without having performed a long-term key reveal. */
     & HonestA(pka) @ i1
     & HonestB(pkb) @ i2
     & SessionBuiltA(pka, Na, Nb) @ m1 & SessionBuiltB(pkb, Na, Nb) @ m2 ) "



lemma sanity1: //make sure that a valid protocol run exists
  exists-trace
  "Ex pka pkb k #t1 . SessionA(pka,pkb,k)@t1"

lemma sanity2:
  exists-trace
  "Ex pka pkb k #t1 . SessionB(pka,pkb,k)@t1"




  
end
