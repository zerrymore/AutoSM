theory denning_sacco_with_prop
begin
builtins: diffie-hellman, symmetric-encryption, signing, xor, hashing, asymmetric-encryption
functions: id/1

let Alice(Kas, idA, idB)=
    out(<idA, idB>);
    in(message1);
    let gamma_0 = sdec(message1, Kas) in
    let <=idB, Kab, T, gamma_1> = gamma_0 in
    event IN_A_1(message1, gamma_1);
    event CommitA(idA, idB, <Kab, T>);
    event RunningA(idA, idB, <Kab, T>);
    event Secret(idA, idB, Kab);
    out(gamma_1);
    0

let S(Kbs, Kas, idA, idB)=
    in(<=idA, =idB>);
    new T;
    new Kab;
    let message1 = senc(<idB, Kab, T, senc(<Kab, idA, T>, Kbs)>, Kas) in 
    event OUT_S_1(message1);
    out(message1);
    0

let Bob(Kbs, idA, idB)=
    in(message2);
    let gamma_0 = sdec(message2, Kbs) in
    let <Kab, =idA, T> = gamma_0 in
    event CommitB(idB, idA, <Kab,T>);
    event Secret(idB, idA, <Kab,T>);
    0


process:
!(   
  new Kas; out(id(Kas)); event HonestAlice(id(Kas));
  new Kbs; out(id(Kbs)); event HonestBob(id(Kbs));
  let idA = id(Kas) in  out(idA);   
  let idB = id(Kbs) in  out(idB); 
  (   !Alice(Kas, idA, idB) | !S(Kbs, Kas, idA, idB) | !Bob(Kbs, idA, idB))
)


lemma AUTO_typing [sources]:
  all-traces
  "
   (All x m #i.
     (IN_A_1( m, x ) @ #i) ==>
     ((Ex #j. (!KU( x ) @ #j) âˆ§ (#j < #i)) |
      (Ex #j. (OUT_S_1( m ) @ #j) & (#j < #i))))"



lemma executability:
 exists-trace
 " Ex A B t #i #j.
   CommitB(B,A,t)@#i
  & CommitA(A,B,t)@#j & #j<#i
 "

// check the secrecy of the newly generated session key
lemma secrecy:
  "All A B k #i. Secret(A,B,k)@i ==> not (Ex #j. K(k)@j ) "



// check the authenticity of the transaction from B's point of view
lemma noninjectiveagreement_B:
  "All A B t #i.
    CommitB(B, A, t) @i
    ==> ( Ex #j. RunningA(A,B,t) @j & j < i)"

// check the authenticity and freshness of the transaction from B's point of view
// status: false due to multiplicity attack
lemma injectiveagreement_B:
"All A B t #i. CommitB(B,A,t) @i
  ==>
    (Ex #j. RunningA(A,B,t) @j
      & j < i
      & not (Ex B2 A2 #i2. CommitB(B2,A2,t) @i2
      & not (#i2 = #i))
    )"


end
