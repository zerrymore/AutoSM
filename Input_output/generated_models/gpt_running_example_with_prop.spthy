theory running_example_with_prop
begin
builtins: diffie-hellman, symmetric-encryption, signing, xor, hashing, asymmetric-encryption
functions: pk/1, adec/2, hash/1, aenc/2

let Client(pkS)=
    new k;
    let cypher = aenc(k, pkS) in 
    out(cypher);
    in(H);
    let hash(=k) = H in
    event SessKeyC(pkS, k);
    0

let Server(skS)=
    in(cypher);
    let k = adec(cypher, skS) in
    let H = hash(k) in 
    event AnswerRequest(pk(skS), k);
    out(H);
    0


process:
!(   
  new skS; out(pk(skS)); event HonestS(pk(skS));
  let pkS = pk(skS) in out(pkS);
  new k; let H = hash(k) in out(H);
  (!Client(pkS) | !Server(skS))
)


/** lemma from Tamarin's tutorial  */
lemma Client_session_key_secrecy:
  " /* It cannot be that a  */
    not(
      Ex S k #i #j.
        /* client has set up a session key 'k' with a server'S' */
        SessKeyC(S, k) @ #i
        /* and the adversary knows 'k' */
      & K(k) @ #j
        /* without having performed a long-term key reveal on 'S'. */
    )
  "

lemma Client_auth:
  " /* For all session keys 'k' setup by clients with a server 'S' */
    ( All S k #i.  SessKeyC(S, k) @ #i
       ==>
         /* there is a server that answered the request */
       (Ex #a. AnswerRequest(S, k) @ a)
         /* or the adversary performed a long-term key reveal on 'S'
            before the key was setup. */
    )
  "


end