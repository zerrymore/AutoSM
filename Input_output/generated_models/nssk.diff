--- gpt_nssk.spthy	2024-08-23 22:34:08.341728600 +0800
+++ gpt_nssk_with_prop.spthy	2024-09-03 16:11:34.920056300 +0800
@@ -1,4 +1,4 @@
-theory nssk_raw_output
+theory nssk_with_prop
 begin
 builtins: diffie-hellman, symmetric-encryption, signing, xor, hashing, asymmetric-encryption
 functions: id/1, dec/1
@@ -17,6 +17,8 @@
 in(message4);
 let Nb = sdec(message4, Kab) in
 let message5 = senc(dec(Nb), Kab) in 
+event Running_A(idA, idB, <'A', 'B', dec(Nb), Kab>);
+event Commit_A(idA, idB, <'A', 'B', Nb, Kab>);
 out(message5);
 0
 
@@ -25,11 +27,14 @@
 in(message3);
 let gamma_0 = sdec(message3, Kbs) in
 let <Kab, =idA> = gamma_0 in
-let message4 = senc(Nb, Kab) in 
+let message4 = senc(Nb, Kab) in
+event Running_B(idA, idB, <'A', 'B', Nb, Kab>);
+event Secret(idA, idB, Kab);
 out(message4);
 in(message5);
 let gamma_1 = sdec(message5, Kab) in
 let dec(=Nb) = gamma_1 in
+event Commit_B(idA, idB, <'A', 'B', dec(Nb), Kab>);
 0
 
 let Server(Kbs, idA, Kas, idB)=
@@ -37,6 +42,7 @@
 in(message1);
 let <=idA, =idB, Na> = message1 in
 let message2 = senc(<Na, Kab, idB, senc(<Kab, idA>, Kbs)>, Kas) in 
+event Secret(idA, idB, Kab);   // Added
 out(message2);
 0
 
@@ -52,4 +58,55 @@
     Server(Kbs, idA, Kas, idB)
   )
 )
+
+
+
+lemma executability:
+ exists-trace
+ " Ex A B nb kab #i #j #k #m.
+   Commit_B(A,B,<'A', 'B', dec(nb),kab>)@#i
+  & Commit_A(A,B,<'A', 'B', nb,kab>)@#j & #j<#i
+  & Running_A(A,B,<'A', 'B', dec(nb),kab>)@#m
+  & Running_B(A,B,<'A', 'B', nb,kab>)@#k & #k<#j
+ "
+
+// check the secrecy of a secret x protected by the long-term key of A and B
+lemma Secrecy:
+ "not(
+     Ex A B m #i .
+       Secret(A, B, m)@ #i
+       & (Ex #r. K(m) @ #r)
+   )
+ "
+
+// check the authenticity and freshness of the transaction from B's point of view
+lemma injectiveagreement_B:
+  "All A B t #i.
+    Commit_B(A,B,t) @i
+    ==> (Ex #j. Running_A(A,B,t) @j
+        & j < i
+        & not (Ex A2 B2 #i2. Commit_B(A2,B2,t) @i2
+                           & not (#i2 = #i)))"
+
+// check the authenticity of the transaction from B's point of view
+lemma agreement_B:
+ "All A B t #i.
+   Commit_B(A,B,t) @i
+   ==> (Ex #j. Running_A(A,B,t) @j  & j < i)"
+
+// check the authenticity and freshness of the transaction from A's point of view
+lemma injectiveagreement_A:
+  "All A B t #i.
+    Commit_A(A,B,t) @i
+    ==> (Ex #j. Running_B(A,B,t) @j
+        & j < i
+        & not (Ex A2 B2 #i2. Commit_A(A2,B2,t) @i2
+                           & not (#i2 = #i)))"
+
+// check the authenticity of the transaction from A's point of view
+lemma agreement_A:
+ "All A B t #i.
+   Commit_A(A,B,t) @i
+   ==> (Ex #j. Running_B(A,B,t) @j  & j < i)"
+
 end
