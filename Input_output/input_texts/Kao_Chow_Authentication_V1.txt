1. Initiation by A: The process begins with Principal A (the initiator) sending a message \
to the Server (S). This message includes A's identity, B's identity (the intended \
communication partner), and a nonce (Na) generated by A. The nonce is a random number \
used to ensure freshness and prevent replay attacks.

2. Server's Response to B: Upon receiving the message from A, the Server constructs two encrypted packages:
(package 1) The first package contains A's identity, B's identity, the nonce Na, and \
the session key (Kab) intended for use between A and B. This package is encrypted with \
the server's key shared with A (Kas), ensuring that only A can decrypt it.
(package 2) The second package is similar but is encrypted with the server's key shared with B (Kbs), \
ensuring that only B can decrypt it. The Server sends this compound message to B, \
facilitating the secure distribution of the session key (Kab).

3. B's Response to A: B decrypts the received package using Kbs, extracts the session \
key (Kab), and sends a message to A. This message (<package1, package2, Nb>) includes:
(package 1) The encrypted package intended for A (using Kas), which A can decrypt \
using her shared key with the server to verify the session key.
(package 2) An encrypted version of the nonce Na using the session key (Kab), \
allowing A to verify that B has correctly received and decrypted the session key.
(package 3) B's nonce (Nb), introducing a challenge for A to ensure B's message's authenticity and freshness.

4. Final Acknowledgment by A: A decrypts B's message, verifies the nonce Na, \
and responds to B's challenge by encrypting B's nonce (Nb) with the session key (Kab) \
and sending it back to B. This step completes the mutual authentication process, \
confirming to B that A has successfully received and acknowledged the session key (Kab).\