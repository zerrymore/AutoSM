Here, Alice A initiates the communication to Bob B. 
S is a server trusted by both parties. In the communication:
1. A and B are identities of Alice and Bob repectively.
2. Kas is a symmetric key known only to  A and S
3. Kbs is a symmetric key known only to  B and S
4. Na and Nb are nonces generated by A and B repectively.
5. Kab is a symmetric, generated key, which will be the session key of the 
session between A and B.

Both A, B and S knows the identities of A and B.

The protocol can be specified as follows:
1. Alice sends a message <A, B, Na> (where A, B indicates the identities and Na a fresh nonce) 
and a fresh nonce Na to the server, telling the server she wants to 
communicates wit Bob.

2. The server generates Kab and sends back to Alice a copy encrypted under 
Kbs for Alice to forward to Bob and also a copy for Alice. 
Since Alice may be requesting keys for several different people, 
the nonce assures Alice that the message is fresh and that 
the server is replying to that particular message and the inclusion of Bob's name 
tells Alice who she is to share this key with.

3. Alice forwards the message senc(<Kab, A>, Kbs) to Bob who can decrypt it 
with the key he shares with the server Kbs, thus authenticating the data.

4. Bob sends Alice a nonce Nb encrypted under Kab to show that he has the key.

5. Alice performs a simple operation 'dec' on the nonce, re-encrypts it 
and sends it back verifying that she is still alive and that she holds the key.