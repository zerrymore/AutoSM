type skey.
free att:channel.
free sCLIENTHello:bitstring.
free sClientFinished:bitstring.
free sClientKem:bitstring.
free sSERVERHello:bitstring.
free sServerCert:bitstring.
free sServerFinished:bitstring.
free sTCPACK:bitstring.
free sTCPSYN:bitstring.
free scahstr:bitstring.
free scaptr:bitstring.
free scfinished:bitstring.
free schsts:bitstring.
free scompromise:bitstring.
free sderived:bitstring.
free sempty:bitstring.
free snull:bitstring.
free ssahstr:bitstring.
free ssaptr:bitstring.
free ssfinished:bitstring.
free sshsts:bitstring.
fun cert(bitstring):bitstring[private].
fun fst(bitstring):bitstring.
fun hkdfexp(bitstring,bitstring,bitstring):bitstring.
fun hkdfext(bitstring,bitstring):bitstring.
fun hmac(bitstring,bitstring):bitstring.
fun htrans(bitstring):bitstring.
fun kemenc(bitstring,bitstring):bitstring.
fun kempk(skey):bitstring.
fun pair(bitstring,bitstring):bitstring.
fun sdec(bitstring,bitstring):bitstring.
fun senc(bitstring,bitstring):bitstring.
fun snd(bitstring):bitstring.
event eAcceptP().
event eAcceptS().
event eClientKey(bitstring).
event eCompromise().
event eServerKey(bitstring).
event eTest().
equation forall x_1:bitstring, x_2:bitstring;   fst((x_1, x_2)) = x_1.
equation forall x_1:bitstring, x_2:bitstring;   sdec(senc(x_1, x_2), x_2) = x_1.
equation forall x_1:bitstring, x_2:bitstring;   snd((x_1, x_2)) = x_2.
reduc forall m:bitstring, sk:skey;   kemdec(kemenc(m, kempk(sk)), sk) = m.
reduc forall m:bitstring;   getcert(cert(m)) = m.
(*exec*)
query t:time; event(eAcceptP( ))@t .
(*execbis*)
query t:time; event(eAcceptS( ))@t .
(*false_secserv*)
query sk:bitstring, t1:time, t2:time;
 (event(eServerKey( sk ))@t1) && (attacker( sk )@t2)
.
(*auth*)
query s:time, s2:time, t:time;
 (event(eAcceptP( ))@t) ==>
 (((event(eAcceptS( ))@s) && (s < t)) || (event(eCompromise( ))@s2))
.
(*PFS_client*)
query sk:bitstring, t1:time, t2:time, t3:time;
 ((event(eClientKey( sk ))@t1) && (attacker( sk )@t2)) ==>
 ((event(eCompromise( ))@t3) && (t3 < t1))
.
let P(var_1:bitstring)=
    out(att,sTCPSYN);
    in(att,=sTCPACK);
    new ske_1:skey;
    let pke_1:bitstring=kempk(ske_1) in
    new rc_1:bitstring;
    let ES_1:bitstring=hkdfext(sempty, sempty) in
    let dES_1:bitstring=hkdfexp(ES_1, sderived, snull) in
    out(att,(sCLIENTHello, (pke_1, rc_1)));
    in(att,(=sSERVERHello, (cte_1:bitstring, rs_1:bitstring)));
    event eTest( );
    let CHSH_1:bitstring=htrans((pke_1, (rc_1, (cte_1, rs_1)))) in
    let sse_1:bitstring=kemdec(cte_1, ske_1) in
    let HS_1:bitstring=hkdfext(dES_1, sse_1) in
    let CHTS_1:bitstring=hkdfexp(HS_1, schsts, CHSH_1) in
    let SHTS_1:bitstring=hkdfexp(HS_1, sshsts, CHSH_1) in
    let dHS_1:bitstring=hkdfexp(HS_1, sderived, snull) in
    in(att,servercert_1:bitstring);
    let decservercert_1:bitstring=sdec(servercert_1, SHTS_1) in
    let (=sServerCert, certpk_1:bitstring)=decservercert_1 in
    let pks_1:bitstring=getcert(certpk_1) in
    new sss_1:bitstring;
    let cts_1:bitstring=kemenc(sss_1, pks_1) in
    out(att,senc((sClientKem, cts_1), CHTS_1));
    let AHS_1:bitstring=hkdfext(dES_1, sss_1) in
    let CHCKC_1:bitstring=htrans((pke_1, (rc_1, (cte_1, (rs_1, (pks_1, cts_1)))))) in
    let CAHTS_1:bitstring=hkdfexp(AHS_1, scahstr, CHCKC_1) in
    let SAHTS_1:bitstring=hkdfexp(AHS_1, ssahstr, CHCKC_1) in
    let dAHS_1:bitstring=hkdfexp(AHS_1, sderived, CHCKC_1) in
    let MS_1:bitstring=hkdfext(dAHS_1, sempty) in
    let fkc_1:bitstring=hkdfexp(MS_1, scfinished, snull) in
    let fks_1:bitstring=hkdfexp(MS_1, ssfinished, snull) in
    let CF_1:bitstring=hmac(fkc_1, CHCKC_1) in
    out(att,senc((sClientFinished, CF_1), CAHTS_1));
    let CHCF_1:bitstring=htrans((pke_1, (rc_1, (cte_1, (rs_1, (pks_1, (cts_1, CF_1))))))) in
    let CATS_1:bitstring=hkdfexp(AHS_1, scaptr, CHCF_1) in
    let SATS_1:bitstring=hkdfexp(AHS_1, ssaptr, CHCF_1) in
    in(att,serverfin_1:bitstring);
    let decserverfin_1:bitstring=sdec(serverfin_1, SAHTS_1) in
    let (=sServerFinished, SF_1:bitstring)=decserverfin_1 in
    let (=SF_1)=hmac(fks_1, CHCKC_1) in 
        (event eClientKey( CATS_1 );
         event eAcceptP( )).
let S(skS_1:skey)=
    let pkS_1:bitstring=kempk(skS_1) in
    !
    (in(att,=sTCPSYN);
     out(att,sTCPACK);
     in(att,(=sCLIENTHello, (pke_1:bitstring, rc_1:bitstring)));
     let ES_1:bitstring=hkdfext(sempty, sempty) in
     let dES_1:bitstring=hkdfexp(ES_1, sderived, snull) in
     new sse_1:bitstring;
     new rs_1:bitstring;
     let cte_1:bitstring=kemenc(sse_1, pke_1) in
     out(att,(sSERVERHello, (cte_1, rs_1)));
     let CHSH_1:bitstring=htrans((pke_1, (rc_1, (cte_1, rs_1)))) in
     let HS_1:bitstring=hkdfext(dES_1, sse_1) in
     let CHTS_1:bitstring=hkdfexp(HS_1, schsts, CHSH_1) in
     let SHTS_1:bitstring=hkdfexp(HS_1, sshsts, CHSH_1) in
     let dHS_1:bitstring=hkdfexp(HS_1, sderived, snull) in
     out(att,senc((sServerCert, cert(pkS_1)), SHTS_1));
     in(att,clientkem_1:bitstring);
     let decclientkem_1:bitstring=sdec(clientkem_1, CHTS_1) in
     let (=sClientKem, cts_1:bitstring)=decclientkem_1 in
     let sss_1:bitstring=kemdec(cts_1, skS_1) in
     let AHS_1:bitstring=hkdfext(dES_1, sss_1) in
     let CHCKC_1:bitstring=htrans((pke_1, (rc_1, (cte_1, (rs_1, (pkS_1, cts_1)))))) in
     let CAHTS_1:bitstring=hkdfexp(AHS_1, scahstr, CHCKC_1) in
     let SAHTS_1:bitstring=hkdfexp(AHS_1, ssahstr, CHCKC_1) in
     event eServerKey( SAHTS_1 );
     let dAHS_1:bitstring=hkdfexp(AHS_1, sderived, CHCKC_1) in
     let MS_1:bitstring=hkdfext(dAHS_1, sempty) in
     let fkc_1:bitstring=hkdfexp(MS_1, scfinished, snull) in
     let fks_1:bitstring=hkdfexp(MS_1, ssfinished, snull) in
     in(att,clientfin_1:bitstring);
     let decclientfin_1:bitstring=sdec(clientfin_1, CAHTS_1) in
     let (=sClientFinished, CF_1:bitstring)=decclientfin_1 in
     let (=CF_1)=hmac(fkc_1, CHCKC_1) in 
         (event eAcceptS( );
          let SF_1:bitstring=hmac(fks_1, CHCKC_1) in
          let CHCF_1:bitstring=htrans((pke_1, (rc_1, (cte_1, (rs_1, (pkS_1, (cts_1, CF_1))))))) in
          let CATS_1:bitstring=hkdfexp(AHS_1, scaptr, CHCF_1) in
          let SATS_1:bitstring=hkdfexp(AHS_1, ssaptr, CHCF_1) in
          out(att,senc((sServerFinished, SF_1), SAHTS_1)))).


process
    !
    (((P(snull))
    | (!
       (new skS_1:skey;
        !
        (((S(skS_1))
        | (in(att,=scompromise);
           event eCompromise( );
           out(att,skS_1))))))))

