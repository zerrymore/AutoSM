theory LAK06 begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



heuristic: p











lemma executable:
  exists-trace
  "(∃ #i. FinTag( ) @ #i) ∧
   (∀ x #i1 #i2.
     ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2))"
/*
guarded formula characterizing all satisfying traces:
"(∃ #i. (FinTag( ) @ #i)) ∧
 (∀ x #i1 #i2. (OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2) ⇒ #i1 = #i2)"
*/
by sorry

lemma helpingSecrecy [reuse]:
  all-traces "∀ k #i. (Create( k ) @ #i) ⇒ (¬(∃ #j. K( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ k #i. (Create( k ) @ #i) ∧ ∃ #j. (K( k ) @ #j)"
*/
by sorry

lemma noninjectiveagreementTAG [use_induction]:
  all-traces
  "∀ t #i.
    (Commit( <'T', 'R', t> ) @ #i) ⇒ (∃ #j. Running( <'T', 'R', t> ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ t #i.
  (Commit( <'T', 'R', t> ) @ #i)
 ∧
  ∀ #j. (Running( <'T', 'R', t> ) @ #j) ⇒ ⊥"
*/
by sorry

lemma noninjectiveagreementREADER [use_induction]:
  all-traces
  "∀ t #i.
    (Commit( <'R', 'T', t> ) @ #i) ⇒ (∃ #j. Running( <'R', 'T', t> ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ t #i.
  (Commit( <'R', 'T', t> ) @ #i)
 ∧
  ∀ #j. (Running( <'R', 'T', t> ) @ #j) ⇒ ⊥"
*/
by sorry

rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ), Fr( k.1 ) ]
  --[ OnlyOnce( 'setup' ) ]->
   [ State_111( k.1 ) ]

rule (modulo E) p_1_111111[color=#408057, process="!"]:
   [ !Semistate_1111111( k.1 ), In( r0.1 ), Fr( r1.1 ) ]
  --[ Running( <'R', 'T', k.1, r0.1, r1.1> ) ]->
   [ State_11111111111( k.1, r0.1, r1.1 ), Out( <r1.1, h((k.1⊕r0.1⊕r1.1))> )
   ]

rule (modulo E) inhkrhkrr_0_11111111111[color=#408057,
                                        process="in(h((=k.1⊕=r0.1⊕h((=k.1⊕=r0.1⊕=r1.1)))));"]:
   [
   State_11111111111( k.1, r0.1, r1.1 ),
   In( h((k.1⊕r0.1⊕h((k.1⊕r0.1⊕r1.1)))) )
   ]
  --[ Commit( <'T', 'R', k.1, r0.1, r1.1> ) ]->
   [ State_1111111111111( k.1, r0.1, r1.1 ) ]

rule (modulo E) eventFinTag_0_1111111111111[color=#408057,
                                            process="event FinTag( );"]:
   [ State_1111111111111( k.1, r0.1, r1.1 ) ] --[ FinTag( ) ]-> [ ]

rule (modulo E) eventCreatek_0_111[color=#ffffff,
                                   process="event Create( k.1 );"]:
   [ State_111( k.1 ) ]
  --[ Create( k.1 ) ]->
   [ !Semistate_1111211( k.1 ), !Semistate_1111111( k.1 ) ]

rule (modulo E) p_1_111121[color=#40805f, process="!"]:
   [ !Semistate_1111211( k.1 ), Fr( r0.2 ) ]
  --[ OnlyOnce( 'init_reader' ) ]->
   [ State_1111211111( k.1, r0.2 ), Out( r0.2 ) ]

rule (modulo E) inmessage_0_1111211111[color=#40805f,
                                       process="in(message0.1);"]:
   [ State_1111211111( k.1, r0.2 ), In( message0.1 ) ]
  -->
   [ Let_111121111111( message0.1, k.1, message0.1, r0.2 ) ]

rule (modulo E) letrhkrrmessage_1_11112111111[color=#ffffff,
                                              process="let <r1.2, h((=k.1⊕=r0.2⊕r1.2))>=message0.1"]:
   [ Let_111121111111( <r1.2, h((k.1⊕r0.2⊕r1.2))>, k.1, message0.1, r0.2 ) ]
  -->
   [ State_111121111111( k.1, message0.1, r0.2, r1.2 ) ]

rule (modulo E) eventCommitRTkrr_0_111121111111[color=#40805f,
                                                process="event Commit( <'R', 'T', k.1, r0.2, r1.2> );"]:
   [ State_111121111111( k.1, message0.1, r0.2, r1.2 ) ]
  --[ Commit( <'R', 'T', k.1, r0.2, r1.2> ) ]->
   [ State_1111211111111( k.1, message0.1, r0.2, r1.2 ) ]

rule (modulo E) eventRunningTRkrr_0_1111211111111[color=#40805f,
                                                  process="event Running( <'T', 'R', k.1, r0.2, r1.2> );"]:
   [ State_1111211111111( k.1, message0.1, r0.2, r1.2 ) ]
  --[ Running( <'T', 'R', k.1, r0.2, r1.2> ) ]->
   [ Out( h((k.1⊕r0.2⊕h((k.1⊕r0.2⊕r1.2)))) ) ]

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula









end

