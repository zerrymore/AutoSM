theory nsl begin

// Function signature and definition of the equational theory E

functions: adec/2[destructor], aenc/2, fst/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(m, pk(sk)), sk) = m,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2



heuristic: p







lemma source [sources, reuse, output=[msr]]:
  all-traces
  "((∀ ni m1 #i.
      (IN_R_1_ni( ni, m1 ) @ #i) ⇒
      ((∃ #j. (!KU( ni ) @ #j) ∧ (#j < #i)) ∨ (∃ #j. OUT_I_1( m1 ) @ #j))) ∧
    (∀ nr m2 #i.
      (IN_I_2_nr( nr, m2 ) @ #i) ⇒
      ((∃ #j. (!KU( nr ) @ #j) ∧ (#j < #i)) ∨ (∃ #j. OUT_R_1( m2 ) @ #j)))) ∧
   (∀ nr m3 #i.
     (IN_R_2( nr, m3 ) @ #i) ⇒
     ((∃ #j. (!KU( nr ) @ #j) ∧ (#j < #i)) ∨ (∃ #j. OUT_I_2( m3 ) @ #j)))"
/*
guarded formula characterizing all counter-examples:
"((∃ ni m1 #i.
    (IN_R_1_ni( ni, m1 ) @ #i)
   ∧
    (∀ #j. (!KU( ni ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (OUT_I_1( m1 ) @ #j) ⇒ ⊥)) ∨
  (∃ nr m2 #i.
    (IN_I_2_nr( nr, m2 ) @ #i)
   ∧
    (∀ #j. (!KU( nr ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (OUT_R_1( m2 ) @ #j) ⇒ ⊥)) ∨
  (∃ nr m3 #i.
    (IN_R_2( nr, m3 ) @ #i)
   ∧
    (∀ #j. (!KU( nr ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (OUT_I_2( m3 ) @ #j) ⇒ ⊥)))"
*/
by sorry

lemma Confident_aux [reuse]:
  all-traces
  "¬(∃ pka Na Nb #t1 #t2.
      (SessionBuiltA( pka, Na, Nb ) @ #t1) ∧ (!KU( Na ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ pka Na Nb #t1 #t2.
  (SessionBuiltA( pka, Na, Nb ) @ #t1) ∧ (!KU( Na ) @ #t2)"
*/
by sorry

lemma SessionBuilt:
  exists-trace
  "∃ pka pkb Na Nb #t1 #t2.
    (SessionBuiltA( pka, Na, Nb ) @ #t1) ∧
    (SessionBuiltB( pkb, Na, Nb ) @ #t2)"
/*
guarded formula characterizing all satisfying traces:
"∃ pka pkb Na Nb #t1 #t2.
  (SessionBuiltA( pka, Na, Nb ) @ #t1) ∧
  (SessionBuiltB( pkb, Na, Nb ) @ #t2)"
*/
by sorry

lemma HonestImpl:
  all-traces
  "∀ pka Na Nb #i.
    (SessionBuiltA( pka, Na, Nb ) @ #i) ⇒ (∃ #j. HonestA( pka ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ pka Na Nb #i.
  (SessionBuiltA( pka, Na, Nb ) @ #i) ∧ ∀ #j. (HonestA( pka ) @ #j) ⇒ ⊥"
*/
by sorry

lemma Confidentiality:
  all-traces
  "¬(∃ pka pkb Na Nb #t1 #t2 #t3 #i1 #i2.
      ((((SessionBuiltA( pka, Na, Nb ) @ #t1) ∧
         (SessionBuiltB( pkb, Na, Nb ) @ #t3)) ∧
        (!KU( Na ) @ #t2)) ∧
       (HonestA( pka ) @ #i1)) ∧
      (HonestB( pkb ) @ #i2))"
/*
guarded formula characterizing all counter-examples:
"∃ pka pkb Na Nb #t1 #t2 #t3 #i1 #i2.
  (SessionBuiltA( pka, Na, Nb ) @ #t1) ∧
  (SessionBuiltB( pkb, Na, Nb ) @ #t3) ∧
  (!KU( Na ) @ #t2) ∧
  (HonestA( pka ) @ #i1) ∧
  (HonestB( pkb ) @ #i2)"
*/
by sorry

lemma sec_of_A [reuse]:
  all-traces
  "¬(∃ pka pkb Na #t1 #t2 #i1 #i2.
      (((SessionA( pka, pkb, Na ) @ #t1) ∧ (!KU( Na ) @ #t2)) ∧
       (HonestA( pka ) @ #i1)) ∧
      (HonestB( pkb ) @ #i2))"
/*
guarded formula characterizing all counter-examples:
"∃ pka pkb Na #t1 #t2 #i1 #i2.
  (SessionA( pka, pkb, Na ) @ #t1) ∧
  (!KU( Na ) @ #t2) ∧
  (HonestA( pka ) @ #i1) ∧
  (HonestB( pkb ) @ #i2)"
*/
by sorry

lemma sec_of_B:
  all-traces
  "¬(∃ pka pkb Na #t1 #t2 #i1 #i2.
      (((SessionB( pka, pkb, Na ) @ #t1) ∧ (!KU( Na ) @ #t2)) ∧
       (HonestA( pka ) @ #i1)) ∧
      (HonestB( pkb ) @ #i2))"
/*
guarded formula characterizing all counter-examples:
"∃ pka pkb Na #t1 #t2 #i1 #i2.
  (SessionB( pka, pkb, Na ) @ #t1) ∧
  (!KU( Na ) @ #t2) ∧
  (HonestA( pka ) @ #i1) ∧
  (HonestB( pkb ) @ #i2)"
*/
by sorry

lemma sec_of_B_test:
  all-traces
  "¬(∃ pka pkb Na Nb #t1 #t2 #m1 #m2 #i1 #i2.
      (((((SessionB( pka, pkb, Na ) @ #t1) ∧ (!KU( Na ) @ #t2)) ∧
         (HonestA( pka ) @ #i1)) ∧
        (HonestB( pkb ) @ #i2)) ∧
       (SessionBuiltA( pka, Na, Nb ) @ #m1)) ∧
      (SessionBuiltB( pkb, Na, Nb ) @ #m2))"
/*
guarded formula characterizing all counter-examples:
"∃ pka pkb Na Nb #t1 #t2 #m1 #m2 #i1 #i2.
  (SessionB( pka, pkb, Na ) @ #t1) ∧
  (!KU( Na ) @ #t2) ∧
  (HonestA( pka ) @ #i1) ∧
  (HonestB( pkb ) @ #i2) ∧
  (SessionBuiltA( pka, Na, Nb ) @ #m1) ∧
  (SessionBuiltB( pkb, Na, Nb ) @ #m2)"
*/
by sorry

lemma sanity1:
  exists-trace "∃ pka pkb k #t1. SessionA( pka, pkb, k ) @ #t1"
/*
guarded formula characterizing all satisfying traces:
"∃ pka pkb k #t1. (SessionA( pka, pkb, k ) @ #t1)"
*/
by sorry

lemma sanity2:
  exists-trace "∃ pka pkb k #t1. SessionB( pka, pkb, k ) @ #t1"
/*
guarded formula characterizing all satisfying traces:
"∃ pka pkb k #t1. (SessionB( pka, pkb, k ) @ #t1)"
*/
by sorry

rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ), Fr( skA.1 ) ]
  -->
   [ State_111( skA.1 ), Out( pk(skA.1) ) ]

rule (modulo E) eventHonestApkskA_0_111[color=#ffffff,
                                        process="event HonestA( pk(skA.1) );"]:
   [ State_111( skA.1 ) ]
  --[ HonestA( pk(skA.1) ) ]->
   [ !Semistate_11111( skA.1 ) ]

rule (modulo E) p_1_1111[color=#ffffff, process="!"]:
   [ !Semistate_11111( skA.1 ), Fr( skB.1 ) ]
  -->
   [ State_1111111( skA.1, skB.1 ), Out( pk(skB.1) ) ]

rule (modulo E) eventHonestBpkskB_0_1111111[color=#ffffff,
                                            process="event HonestB( pk(skB.1) );"]:
   [ State_1111111( skA.1, skB.1 ) ]
  --[ HonestB( pk(skB.1) ) ]->
   [ !Semistate_111111111( skA.1, skB.1 ) ]

rule (modulo E) eventRoleA_0_11111111111[color=#408051,
                                         process="event Role_A( );"]:
   [ State_11111111111( skA.1, skB.1 ), Fr( Na.1 ) ]
  --[ Role_A( ) ]->
   [ State_1111111111111( Na.1, skA.1, skB.1 ) ]

rule (modulo E) eventOUTIaencNapkskApkskB_0_1111111111111[color=#408051,
                                                          process="event OUT_I_1( aenc(<Na.1, pk(skA.1)>, pk(skB.1)) );"]:
   [ State_1111111111111( Na.1, skA.1, skB.1 ) ]
  --[ OUT_I_1( aenc(<Na.1, pk(skA.1)>, pk(skB.1)) ) ]->
   [
   State_111111111111111( Na.1, skA.1, skB.1 ),
   Out( aenc(<Na.1, pk(skA.1)>, pk(skB.1)) )
   ]

rule (modulo E) incypher_0_111111111111111[color=#408051,
                                           process="in(cypher.1);"]:
   [ State_111111111111111( Na.1, skA.1, skB.1 ), In( cypher.1 ) ]
  -->
   [
   Let_11111111111111111( <cypher.1, skA.1>, Na.1, cypher.1, skA.1, skB.1 )
   ]

rule (modulo E) letmessadeccypherskA_1_1111111111111111[color=#ffffff,
                                                        process="let mess.1=adec(cypher.1, skA.1)"]:
   [
   Let_11111111111111111( <aenc(mess.1, pk(sk)), sk>, Na.1, cypher.1, skA.1,
                          skB.1
   )
   ]
  -->
   [ State_11111111111111111( Na.1, cypher.1, mess.1, skA.1, skB.1 ) ]

rule (modulo E) letNaNbmess_0_11111111111111111[color=#ffffff,
                                                process="let <=Na.1, Nb.1>=mess.1"]:
   [ State_11111111111111111( Na.1, cypher.1, mess.1, skA.1, skB.1 ) ]
  -->
   [ Let_111111111111111111( mess.1, Na.1, cypher.1, mess.1, skA.1, skB.1 )
   ]

rule (modulo E) letNaNbmess_1_11111111111111111[color=#ffffff,
                                                process="let <=Na.1, Nb.1>=mess.1"]:
   [
   Let_111111111111111111( <Na.1, Nb.1>, Na.1, cypher.1, mess.1, skA.1,
                           skB.1
   )
   ]
  -->
   [ State_111111111111111111( Na.1, Nb.1, cypher.1, mess.1, skA.1, skB.1 )
   ]

rule (modulo E) eventINInrNbaencNaNbpkskA_0_111111111111111111[color=#408051,
                                                               process="event IN_I_2_nr( Nb.1, aenc(<Na.1, Nb.1>, pk(skA.1)) );"]:
   [ State_111111111111111111( Na.1, Nb.1, cypher.1, mess.1, skA.1, skB.1 )
   ]
  --[ IN_I_2_nr( Nb.1, aenc(<Na.1, Nb.1>, pk(skA.1)) ) ]->
   [ State_1111111111111111111( Na.1, Nb.1, cypher.1, mess.1, skA.1, skB.1 )
   ]

rule (modulo E) eventOUTIaencNbpkskB_0_1111111111111111111[color=#408051,
                                                           process="event OUT_I_2( aenc(Nb.1, pk(skB.1)) );"]:
   [ State_1111111111111111111( Na.1, Nb.1, cypher.1, mess.1, skA.1, skB.1 )
   ]
  --[ OUT_I_2( aenc(Nb.1, pk(skB.1)) ) ]->
   [
   State_111111111111111111111( Na.1, Nb.1, cypher.1, mess.1, skA.1, skB.1
   ),
   Out( aenc(Nb.1, pk(skB.1)) )
   ]

rule (modulo E) eventSessionBuiltApkskANaNb_0_111111111111111111111[color=#408051,
                                                                    process="event SessionBuiltA( pk(skA.1), Na.1, Nb.1 );"]:
   [
   State_111111111111111111111( Na.1, Nb.1, cypher.1, mess.1, skA.1, skB.1 )
   ]
  --[ SessionBuiltA( pk(skA.1), Na.1, Nb.1 ) ]->
   [
   State_1111111111111111111111( Na.1, Nb.1, cypher.1, mess.1, skA.1, skB.1
   )
   ]

rule (modulo E) eventSessionApkskApkskBNa_0_1111111111111111111111[color=#408051,
                                                                   process="event SessionA( pk(skA.1), pk(skB.1), Na.1 );"]:
   [
   State_1111111111111111111111( Na.1, Nb.1, cypher.1, mess.1, skA.1, skB.1
   )
   ]
  --[ SessionA( pk(skA.1), pk(skB.1), Na.1 ) ]->
   [ ]

rule (modulo E) p_1_11111111[color=#ffffff, process="!"]:
   [ !Semistate_111111111( skA.1, skB.1 ) ]
  -->
   [
   !Semistate_11111111121( skA.1, skB.1 ), State_11111111111( skA.1, skB.1 )
   ]

rule (modulo E) p_1_1111111112[color=#ffffff, process="!"]:
   [ !Semistate_11111111121( skA.1, skB.1 ), In( cypher1.1 ) ]
  --[ Role_B( ) ]->
   [ Let_111111111211111( <cypher1.1, skB.1>, cypher1.1, skA.1, skB.1 ) ]

rule (modulo E) letmessadeccypherskB_1_11111111121111[color=#ffffff,
                                                      process="let mess1.1=adec(cypher1.1, skB.1)"]:
   [
   Let_111111111211111( <aenc(mess1.1, pk(sk)), sk>, cypher1.1, skA.1, skB.1
   )
   ]
  -->
   [ State_111111111211111( cypher1.1, mess1.1, skA.1, skB.1 ) ]

rule (modulo E) letNapkskAmess_0_111111111211111[color=#ffffff,
                                                 process="let <Na.2, pk(=skA.1)>=mess1.1"]:
   [ State_111111111211111( cypher1.1, mess1.1, skA.1, skB.1 ) ]
  -->
   [ Let_1111111112111111( mess1.1, cypher1.1, mess1.1, skA.1, skB.1 ) ]

rule (modulo E) letNapkskAmess_1_111111111211111[color=#ffffff,
                                                 process="let <Na.2, pk(=skA.1)>=mess1.1"]:
   [
   Let_1111111112111111( <Na.2, pk(skA.1)>, cypher1.1, mess1.1, skA.1, skB.1
   )
   ]
  -->
   [ State_1111111112111111( cypher1.1, mess1.1, skA.1, skB.1, Na.2 ) ]

rule (modulo E) eventINRniNaaencNapkskApkskB_0_1111111112111111[color=#408065,
                                                                process="event IN_R_1_ni( Na.2, aenc(<Na.2, pk(skA.1)>, pk(skB.1)) );"]:
   [
   State_1111111112111111( cypher1.1, mess1.1, skA.1, skB.1, Na.2 ),
   Fr( Nb.2 )
   ]
  --[ IN_R_1_ni( Na.2, aenc(<Na.2, pk(skA.1)>, pk(skB.1)) ) ]->
   [
   State_111111111211111111( cypher1.1, mess1.1, skA.1, skB.1, Na.2, Nb.2 )
   ]

rule (modulo E) eventOUTRaencNaNbpkskA_0_111111111211111111[color=#408065,
                                                            process="event OUT_R_1( aenc(<Na.2, Nb.2>, pk(skA.1)) );"]:
   [
   State_111111111211111111( cypher1.1, mess1.1, skA.1, skB.1, Na.2, Nb.2 )
   ]
  --[ OUT_R_1( aenc(<Na.2, Nb.2>, pk(skA.1)) ) ]->
   [
   State_11111111121111111111( cypher1.1, mess1.1, skA.1, skB.1, Na.2, Nb.2
   ),
   Out( aenc(<Na.2, Nb.2>, pk(skA.1)) )
   ]

rule (modulo E) incypher_0_11111111121111111111[color=#408065,
                                                process="in(cypher2.1);"]:
   [
   State_11111111121111111111( cypher1.1, mess1.1, skA.1, skB.1, Na.2, Nb.2
   ),
   In( cypher2.1 )
   ]
  -->
   [
   Let_1111111112111111111111( <cypher2.1, skB.1>, cypher1.1, cypher2.1,
                               mess1.1, skA.1, skB.1, Na.2, Nb.2
   )
   ]

rule (modulo E) letmessadeccypherskB_1_111111111211111111111[color=#ffffff,
                                                             process="let mess2.1=adec(cypher2.1, skB.1)"]:
   [
   Let_1111111112111111111111( <aenc(mess2.1, pk(sk)), sk>, cypher1.1,
                               cypher2.1, mess1.1, skA.1, skB.1, Na.2, Nb.2
   )
   ]
  -->
   [
   State_1111111112111111111111( cypher1.1, cypher2.1, mess1.1, mess2.1,
                                 skA.1, skB.1, Na.2, Nb.2
   )
   ]

rule (modulo E) letNbmess_0_1111111112111111111111[color=#ffffff,
                                                   process="let =Nb.2=mess2.1"]:
   [
   State_1111111112111111111111( cypher1.1, cypher2.1, mess1.1, mess2.1,
                                 skA.1, skB.1, Na.2, Nb.2
   )
   ]
  -->
   [
   Let_11111111121111111111111( mess2.1, cypher1.1, cypher2.1, mess1.1,
                                mess2.1, skA.1, skB.1, Na.2, Nb.2
   )
   ]

rule (modulo E) letNbmess_1_1111111112111111111111[color=#ffffff,
                                                   process="let =Nb.2=mess2.1"]:
   [
   Let_11111111121111111111111( Nb.2, cypher1.1, cypher2.1, mess1.1,
                                mess2.1, skA.1, skB.1, Na.2, Nb.2
   )
   ]
  -->
   [
   State_11111111121111111111111( cypher1.1, cypher2.1, mess1.1, mess2.1,
                                  skA.1, skB.1, Na.2, Nb.2
   )
   ]

rule (modulo E) eventINRNbaencNbpkskB_0_11111111121111111111111[color=#408065,
                                                                process="event IN_R_2( Nb.2, aenc(Nb.2, pk(skB.1)) );"]:
   [
   State_11111111121111111111111( cypher1.1, cypher2.1, mess1.1, mess2.1,
                                  skA.1, skB.1, Na.2, Nb.2
   )
   ]
  --[ IN_R_2( Nb.2, aenc(Nb.2, pk(skB.1)) ) ]->
   [
   State_111111111211111111111111( cypher1.1, cypher2.1, mess1.1, mess2.1,
                                   skA.1, skB.1, Na.2, Nb.2
   )
   ]

rule (modulo E) eventSessionBuiltBpkskBNaNb_0_111111111211111111111111[color=#408065,
                                                                       process="event SessionBuiltB( pk(skB.1), Na.2, Nb.2 );"]:
   [
   State_111111111211111111111111( cypher1.1, cypher2.1, mess1.1, mess2.1,
                                   skA.1, skB.1, Na.2, Nb.2
   )
   ]
  --[ SessionBuiltB( pk(skB.1), Na.2, Nb.2 ) ]->
   [
   State_1111111112111111111111111( cypher1.1, cypher2.1, mess1.1, mess2.1,
                                    skA.1, skB.1, Na.2, Nb.2
   )
   ]

rule (modulo E) eventSessionBpkskApkskBNa_0_1111111112111111111111111[color=#408065,
                                                                      process="event SessionB( pk(skA.1), pk(skB.1), Na.2 );"]:
   [
   State_1111111112111111111111111( cypher1.1, cypher2.1, mess1.1, mess2.1,
                                    skA.1, skB.1, Na.2, Nb.2
   )
   ]
  --[ SessionB( pk(skA.1), pk(skB.1), Na.2 ) ]->
   [ ]

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula













end

