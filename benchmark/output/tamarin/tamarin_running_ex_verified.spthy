theory running_ex begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, fst/1, h/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2



heuristic: p











lemma Client_session_key_secrecy:
  all-traces "¬(∃ S k #i #j. (SessKeyC( S, k ) @ #i) ∧ (K( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ S k #i #j. (SessKeyC( S, k ) @ #i) ∧ (K( k ) @ #j)"
*/
by sorry

lemma Client_auth:
  all-traces
  "∀ S k #i. (SessKeyC( S, k ) @ #i) ⇒ (∃ #a. AnswerRequest( S, k ) @ #a)"
/*
guarded formula characterizing all counter-examples:
"∃ S k #i.
  (SessKeyC( S, k ) @ #i) ∧ ∀ #a. (AnswerRequest( S, k ) @ #a) ⇒ ⊥"
*/
by sorry

rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ), Fr( sks.1 ) ]
  -->
   [ !Semistate_1111( sks.1 ), Out( pk(sks.1) ) ]

rule (modulo E) p_1_111[color=#ffffff, process="!"]:
   [ !Semistate_1111( sks.1 ), Fr( skc.1 ) ]
  -->
   [ !Semistate_1111111( skc.1, sks.1 ), Out( pk(skc.1) ) ]

rule (modulo E) newk_0_111111111[color=#408041, process="new k.1;"]:
   [ State_111111111( skc.1, sks.1 ), Fr( k.1 ) ]
  -->
   [ State_11111111111( k.1, skc.1, sks.1 ), Out( aenc(k.1, pk(sks.1)) ) ]

rule (modulo E) incipher_0_11111111111[color=#408041,
                                       process="in(cipher.1);"]:
   [ State_11111111111( k.1, skc.1, sks.1 ), In( cipher.1 ) ]
  -->
   [ Let_1111111111111( cipher.1, cipher.1, k.1, skc.1, sks.1 ) ]

rule (modulo E) lethkcipher_1_111111111111[color=#ffffff,
                                           process="let h(=k.1)=cipher.1"]:
   [ Let_1111111111111( h(k.1), cipher.1, k.1, skc.1, sks.1 ) ]
  -->
   [ State_1111111111111( cipher.1, k.1, skc.1, sks.1 ) ]

rule (modulo E) eventSessKeyCpksksk_0_1111111111111[color=#408041,
                                                    process="event SessKeyC( pk(sks.1), k.1 );"]:
   [ State_1111111111111( cipher.1, k.1, skc.1, sks.1 ) ]
  --[ SessKeyC( pk(sks.1), k.1 ) ]->
   [ ]

rule (modulo E) p_1_111111[color=#ffffff, process="!"]:
   [ !Semistate_1111111( skc.1, sks.1 ) ]
  -->
   [ !Semistate_111111121( skc.1, sks.1 ), State_111111111( skc.1, sks.1 ) ]

rule (modulo E) p_1_11111112[color=#ffffff, process="!"]:
   [ !Semistate_111111121( skc.1, sks.1 ), In( request.1 ) ]
  --[ AnswerRequest( pk(sks.1), adec(request.1, sks.1) ) ]->
   [ Out( h(adec(request.1, sks.1)) ) ]

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula















end

