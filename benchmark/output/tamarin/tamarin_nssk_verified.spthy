theory nssk begin

// Function signature and definition of the equational theory E

functions: dec/1, fst/1, id/1, inc/1, pair/2, sdec/2[destructor], senc/2,
           snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    inc(dec(x)) = x,
    sdec(senc(m, k), k) = m,
    snd(<x.1, x.2>) = x.2



heuristic: p









lemma AUTO_typing [sources]:
  all-traces
  "(∀ x m #i.
     (AUTO_IN_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1( m,
                                                                                            x
      ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j.
        (AUTO_OUT_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1( m
         ) @ #j) ∧
        (#j < #i)))) ∧
   (∀ x m #i.
     (AUTO_IN_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1( m,
                                                                           x
      ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j.
        (AUTO_OUT_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1( m
         ) @ #j) ∧
        (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ x m #i.
    (AUTO_IN_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1( m,
                                                                                           x
     ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j.
      (AUTO_OUT_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1( m
       ) @ #j)
     ⇒
      ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1( m,
                                                                          x
     ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j.
      (AUTO_OUT_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1( m
       ) @ #j)
     ⇒
      ¬(#j < #i))))"
*/
by sorry

lemma executability:
  exists-trace
  "∃ A B nb kab #i #j #k #m.
    (((((Commit_B( A, B, <'A', 'B', dec(nb), kab> ) @ #i) ∧
        (Commit_A( A, B, <'A', 'B', nb, kab> ) @ #j)) ∧
       (#j < #i)) ∧
      (Running_A( A, B, <'A', 'B', dec(nb), kab> ) @ #m)) ∧
     (Running_B( A, B, <'A', 'B', nb, kab> ) @ #k)) ∧
    (#k < #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ A B nb kab #i #j #k #m.
  (Commit_B( A, B, <'A', 'B', dec(nb), kab> ) @ #i) ∧
  (Commit_A( A, B, <'A', 'B', nb, kab> ) @ #j) ∧
  (Running_A( A, B, <'A', 'B', dec(nb), kab> ) @ #m) ∧
  (Running_B( A, B, <'A', 'B', nb, kab> ) @ #k)
 ∧
  (#j < #i) ∧ (#k < #j)"
*/
by sorry

lemma Secrecy:
  all-traces
  "¬(∃ A B m #i. (Secret( A, B, m ) @ #i) ∧ (∃ #r. K( m ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i. (Secret( A, B, m ) @ #i) ∧ ∃ #r. (K( m ) @ #r)"
*/
by sorry

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (∃ #j.
      ((Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i)))))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  ∀ #j.
   (Running_A( A, B, t ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    (∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))"
*/
by sorry

lemma agreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (∃ #j. (Running_A( A, B, t ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  ∀ #j. (Running_A( A, B, t ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma injectiveagreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    (∃ #j.
      ((Running_B( A, B, t ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i)))))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  ∀ #j.
   (Running_B( A, B, t ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    (∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))"
*/
by sorry

lemma agreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    (∃ #j. (Running_B( A, B, t ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  ∀ #j. (Running_B( A, B, t ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ), Fr( Kas.1 ), Fr( Kbs.1 ) ]
  -->
   [ State_1111( Kas.1, Kbs.1 ), Out( id(Kas.1) ) ]

rule (modulo E) outidKbs_0_1111[color=#ffffff,
                                process="out(id(Kbs.1));"]:
   [ State_1111( Kas.1, Kbs.1 ) ]
  -->
   [ !Semistate_111111( Kas.1, Kbs.1 ), Out( id(Kbs.1) ) ]

rule (modulo E) newNa_0_11111111[color=#40804a, process="new Na.1;"]:
   [ State_11111111( Kas.1, Kbs.1 ), Fr( Na.1 ) ]
  -->
   [
   State_1111111111( Kas.1, Kbs.1, Na.1 ),
   Out( <'1', id(Kas.1), id(Kbs.1), Na.1> )
   ]

rule (modulo E) incypher_0_1111111111[color=#40804a,
                                      process="in(cypher.1);"]:
   [ State_1111111111( Kas.1, Kbs.1, Na.1 ), In( cypher.1 ) ]
  -->
   [ Let_111111111111( sdec(cypher.1, Kas.1), Kas.1, Kbs.1, Na.1, cypher.1 )
   ]

rule (modulo E) letNaidKbsKabmessagesdeccypherKas_1_11111111111[color=#ffffff,
                                                                process="let <'2', =Na.1, id(=Kbs.1), Kab.1, message2.1>=sdec(cypher.1, Kas.1)"]:
   [
   Let_111111111111( <'2', Na.1, id(Kbs.1), Kab.1, message2.1>, Kas.1,
                     Kbs.1, Na.1, cypher.1
   )
   ]
  -->
   [ State_111111111111( Kab.1, Kas.1, Kbs.1, Na.1, cypher.1, message2.1 ) ]

rule (modulo E) eventAUTOINTERMletsencnapkkbskabmbkasmsgVARIANTcyphermessage_0_111111111111[color=#40804a,
                                                                                            process="event AUTO_IN_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1( cypher.1,
                                                                                      message2.1
);"]:
   [ State_111111111111( Kab.1, Kas.1, Kbs.1, Na.1, cypher.1, message2.1 ) ]
  --[
  AUTO_IN_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1( cypher.1,
                                                                                        message2.1
  )
  ]->
   [
   State_11111111111111( Kab.1, Kas.1, Kbs.1, Na.1, cypher.1, message2.1 ),
   Out( message2.1 )
   ]

rule (modulo E) incypher_0_11111111111111[color=#40804a,
                                          process="in(cypher2.1);"]:
   [
   State_11111111111111( Kab.1, Kas.1, Kbs.1, Na.1, cypher.1, message2.1 ),
   In( cypher2.1 )
   ]
  -->
   [
   Let_1111111111111111( sdec(cypher2.1, Kab.1), Kab.1, Kas.1, Kbs.1, Na.1,
                         cypher.1, cypher2.1, message2.1
   )
   ]

rule (modulo E) letNbsdeccypherKab_1_111111111111111[color=#ffffff,
                                                     process="let <'4', Nb.1>=sdec(cypher2.1, Kab.1)"]:
   [
   Let_1111111111111111( <'4', Nb.1>, Kab.1, Kas.1, Kbs.1, Na.1, cypher.1,
                         cypher2.1, message2.1
   )
   ]
  -->
   [
   State_1111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, Nb.1, cypher.1,
                           cypher2.1, message2.1
   )
   ]

rule (modulo E) eventAUTOINTERMinsencnbkabVARIANTcypherNb_0_1111111111111111[color=#40804a,
                                                                             process="event AUTO_IN_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1( cypher2.1,
                                                                     Nb.1
);"]:
   [
   State_1111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, Nb.1, cypher.1,
                           cypher2.1, message2.1
   )
   ]
  --[
  AUTO_IN_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1( cypher2.1,
                                                                       Nb.1
  )
  ]->
   [
   State_11111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, Nb.1, cypher.1,
                            cypher2.1, message2.1
   )
   ]

rule (modulo E) eventRunningAidKasidKbsABdecNbKab_0_11111111111111111[color=#40804a,
                                                                      process="event Running_A( id(Kas.1), id(Kbs.1), <'A', 'B', dec(Nb.1), Kab.1> );"]:
   [
   State_11111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, Nb.1, cypher.1,
                            cypher2.1, message2.1
   )
   ]
  --[ Running_A( id(Kas.1), id(Kbs.1), <'A', 'B', dec(Nb.1), Kab.1> ) ]->
   [
   State_111111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, Nb.1, cypher.1,
                             cypher2.1, message2.1
   )
   ]

rule (modulo E) eventCommitAidKasidKbsABNbKab_0_111111111111111111[color=#40804a,
                                                                   process="event Commit_A( id(Kas.1), id(Kbs.1), <'A', 'B', Nb.1, Kab.1> );"]:
   [
   State_111111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, Nb.1, cypher.1,
                             cypher2.1, message2.1
   )
   ]
  --[ Commit_A( id(Kas.1), id(Kbs.1), <'A', 'B', Nb.1, Kab.1> ) ]->
   [ Out( senc(<'5', dec(Nb.1)>, Kab.1) ) ]

rule (modulo E) p_1_11111[color=#ffffff, process="!"]:
   [ !Semistate_111111( Kas.1, Kbs.1 ) ]
  -->
   [ !Semistate_11111121( Kas.1, Kbs.1 ), State_11111111( Kas.1, Kbs.1 ) ]

rule (modulo E) incypher_0_1111112111[color=#40804a,
                                      process="in(cypher3.1);"]:
   [ State_1111112111( Kas.1, Kbs.1 ), In( cypher3.1 ) ]
  -->
   [ Let_111111211111( sdec(cypher3.1, Kbs.1), Kas.1, Kbs.1, cypher3.1 ) ]

rule (modulo E) letKabidKassdeccypherKbs_1_11111121111[color=#ffffff,
                                                       process="let <'3', Kab.2, id(=Kas.1)>=sdec(cypher3.1, Kbs.1)"]:
   [ Let_111111211111( <'3', Kab.2, id(Kas.1)>, Kas.1, Kbs.1, cypher3.1 ) ]
  -->
   [ State_111111211111( Kas.1, Kbs.1, cypher3.1, Kab.2 ) ]

rule (modulo E) newNb_0_111111211111[color=#40804a, process="new Nb.2;"]:
   [ State_111111211111( Kas.1, Kbs.1, cypher3.1, Kab.2 ), Fr( Nb.2 ) ]
  --[ Running_B( id(Kas.1), id(Kbs.1), <'A', 'B', Nb.2, Kab.2> ) ]->
   [ State_11111121111111( Kas.1, Kbs.1, cypher3.1, Kab.2, Nb.2 ) ]

rule (modulo E) eventSecretidKasidKbsKab_0_11111121111111[color=#40804a,
                                                          process="event Secret( id(Kas.1), id(Kbs.1), Kab.2 );"]:
   [ State_11111121111111( Kas.1, Kbs.1, cypher3.1, Kab.2, Nb.2 ) ]
  --[ Secret( id(Kas.1), id(Kbs.1), Kab.2 ) ]->
   [ State_111111211111111( Kas.1, Kbs.1, cypher3.1, Kab.2, Nb.2 ) ]

rule (modulo E) eventAUTOOUTTERMinsencnbkabVARIANTsencNbKab_0_111111211111111[color=#40804a,
                                                                              process="event AUTO_OUT_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1( senc(<
                                                                            '4', Nb.2>,
                                                                           Kab.2)
);"]:
   [ State_111111211111111( Kas.1, Kbs.1, cypher3.1, Kab.2, Nb.2 ) ]
  --[
  AUTO_OUT_TERM_1_0_0_1__insencnbkab_0_1111111111111111111___VARIANT_1( senc(<
                                                                              '4', Nb.2>,
                                                                             Kab.2)
  )
  ]->
   [
   State_11111121111111111( Kas.1, Kbs.1, cypher3.1, Kab.2, Nb.2 ),
   Out( senc(<'4', Nb.2>, Kab.2) )
   ]

rule (modulo E) eventBOUTsencNbKab_0_11111121111111111[color=#40804a,
                                                       process="event B_OUT_4( senc(<'4', Nb.2>, Kab.2) );"]:
   [
   State_11111121111111111( Kas.1, Kbs.1, cypher3.1, Kab.2, Nb.2 ),
   In( cypher4.1 )
   ]
  --[ B_OUT_4( senc(<'4', Nb.2>, Kab.2) ) ]->
   [
   Let_11111121111111111111( <cypher4.1, Kab.2>, Kas.1, Kbs.1, cypher3.1,
                             cypher4.1, Kab.2, Nb.2
   )
   ]

rule (modulo E) letNbdecsdeccypherKab_1_1111112111111111111[color=#ffffff,
                                                            process="let Nb_dec.1=sdec(cypher4.1, Kab.2)"]:
   [
   Let_11111121111111111111( <senc(Nb_dec.1, k), k>, Kas.1, Kbs.1,
                             cypher3.1, cypher4.1, Kab.2, Nb.2
   )
   ]
  -->
   [
   State_11111121111111111111( Kas.1, Kbs.1, Nb_dec.1, cypher3.1, cypher4.1,
                               Kab.2, Nb.2
   )
   ]

rule (modulo E) letdecNbNbdec_0_11111121111111111111[color=#ffffff,
                                                     process="let <'5', dec(=Nb.2)>=Nb_dec.1"]:
   [
   State_11111121111111111111( Kas.1, Kbs.1, Nb_dec.1, cypher3.1, cypher4.1,
                               Kab.2, Nb.2
   )
   ]
  -->
   [
   Let_111111211111111111111( Nb_dec.1, Kas.1, Kbs.1, Nb_dec.1, cypher3.1,
                              cypher4.1, Kab.2, Nb.2
   )
   ]

rule (modulo E) letdecNbNbdec_1_11111121111111111111[color=#ffffff,
                                                     process="let <'5', dec(=Nb.2)>=Nb_dec.1"]:
   [
   Let_111111211111111111111( <'5', dec(Nb.2)>, Kas.1, Kbs.1, Nb_dec.1,
                              cypher3.1, cypher4.1, Kab.2, Nb.2
   )
   ]
  -->
   [
   State_111111211111111111111( Kas.1, Kbs.1, Nb_dec.1, cypher3.1,
                                cypher4.1, Kab.2, Nb.2
   )
   ]

rule (modulo E) eventCommitBidKasidKbsABdecNbKab_0_111111211111111111111[color=#40804a,
                                                                         process="event Commit_B( id(Kas.1), id(Kbs.1), <'A', 'B', dec(Nb.2), Kab.2> );"]:
   [
   State_111111211111111111111( Kas.1, Kbs.1, Nb_dec.1, cypher3.1,
                                cypher4.1, Kab.2, Nb.2
   )
   ]
  --[ Commit_B( id(Kas.1), id(Kbs.1), <'A', 'B', dec(Nb.2), Kab.2> ) ]->
   [ ]

rule (modulo E) p_1_1111112[color=#ffffff, process="!"]:
   [ !Semistate_11111121( Kas.1, Kbs.1 ) ]
  -->
   [ !Semistate_1111112121( Kas.1, Kbs.1 ), State_1111112111( Kas.1, Kbs.1 )
   ]

rule (modulo E) p_1_111111212[color=#ffffff, process="!"]:
   [
   !Semistate_1111112121( Kas.1, Kbs.1 ), Fr( Kab.3 ),
   In( <'1', id(Kas.1), id(Kbs.1), Na.2> )
   ]
  --[ Secret( id(Kas.1), id(Kbs.1), Kab.3 ) ]->
   [ State_11111121211111( Kas.1, Kbs.1, Na.2, Kab.3 ) ]

rule (modulo E) eventAUTOOUTTERMletsencnapkkbskabmbkasmsgVARIANTsencNaidKbsKabsencKabidKasKbsKas_0_11111121211111[color=#408051,
                                                                                                                  process="event AUTO_OUT_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1( senc(<
                                                                                             '2', 
                                                                                             Na.2, 
                                                                                             id(Kbs.1), 
                                                                                             Kab.3, 
                                                                                             senc(<
                                                                                                   '3', 
                                                                                                   Kab.3, 
                                                                                                   id(Kas.1)
                                                                                                  >,
                                                                                                  Kbs.1)
                                                                                            >,
                                                                                            Kas.1)
);"]:
   [ State_11111121211111( Kas.1, Kbs.1, Na.2, Kab.3 ) ]
  --[
  AUTO_OUT_TERM_0_0_0_1_1_1_1__letsencnapkkbskabmbkasmsg_1_1111111111111111___VARIANT_1( senc(<
                                                                                               '2', Na.2, 
                                                                                               id(Kbs.1), 
                                                                                               Kab.3, 
                                                                                               senc(<'3', 
                                                                                                     Kab.3, 
                                                                                                     id(Kas.1)
                                                                                                    >,
                                                                                                    Kbs.1)
                                                                                              >,
                                                                                              Kas.1)
  )
  ]->
   [
   Out( senc(<'2', Na.2, id(Kbs.1), Kab.3, 
              senc(<'3', Kab.3, id(Kas.1)>, Kbs.1)>,
             Kas.1)
   )
   ]

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

















end

