theory Otway_Rees begin

// Function signature and definition of the equational theory E

functions: fst/1, id/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



heuristic: p











lemma Secrecy:
  all-traces
  "¬(∃ A B m #i. (Secret( A, B, m ) @ #i) ∧ (∃ #r. K( m ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i. (Secret( A, B, m ) @ #i) ∧ ∃ #r. (K( m ) @ #r)"
*/
by sorry

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (∃ #j.
      ((Running_S( A, B, t ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i)))))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  ∀ #j.
   (Running_S( A, B, t ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    (∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))"
*/
by sorry

lemma agreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (∃ #j. (Running_S( A, B, t ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  ∀ #j. (Running_S( A, B, t ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma injectiveagreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    (∃ #j.
      ((Running_S( A, B, t ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i)))))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  ∀ #j.
   (Running_S( A, B, t ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    (∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))"
*/
by sorry

lemma agreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    (∃ #j. (Running_S( A, B, t ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  ∀ #j. (Running_S( A, B, t ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma injectiveagreement_S:
  all-traces
  "(∀ A B t #i.
     (Commit_S_A( A, B, t ) @ #i) ⇒
     (∃ #j.
       ((Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ A2 B2 #i2. (Commit_S_A( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i)))))) ∧
   (∀ A B t #i.
     (Commit_S_B( A, B, t ) @ #i) ⇒
     (∃ #j.
       ((Running_B( A, B, t ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ A2 B2 #i2. (Commit_S_B( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))))"
/*
guarded formula characterizing all counter-examples:
"((∃ A B t #i.
    (Commit_S_A( A, B, t ) @ #i)
   ∧
    ∀ #j.
     (Running_A( A, B, t ) @ #j)
    ⇒
     ((¬(#j < #i)) ∨
      (∃ A2 B2 #i2. (Commit_S_A( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∨
  (∃ A B t #i.
    (Commit_S_B( A, B, t ) @ #i)
   ∧
    ∀ #j.
     (Running_B( A, B, t ) @ #j)
    ⇒
     ((¬(#j < #i)) ∨
      (∃ A2 B2 #i2. (Commit_S_B( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))))"
*/
by sorry

lemma agreement_S:
  all-traces
  "(∀ A B t #i.
     (Commit_S_A( A, B, t ) @ #i) ⇒
     (∃ #j. (Running_A( A, B, t ) @ #j) ∧ (#j < #i))) ∧
   (∀ A B t #i.
     (Commit_S_B( A, B, t ) @ #i) ⇒
     (∃ #j. (Running_B( A, B, t ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"((∃ A B t #i.
    (Commit_S_A( A, B, t ) @ #i)
   ∧
    ∀ #j. (Running_A( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∨
  (∃ A B t #i.
    (Commit_S_B( A, B, t ) @ #i)
   ∧
    ∀ #j. (Running_B( A, B, t ) @ #j) ⇒ ¬(#j < #i)))"
*/
by sorry

lemma executability:
  exists-trace
  "(((((∀ A A2 B B2 t t2 #i #j.
         ((Running_A( A, B, t ) @ #i) ∧ (Running_A( A2, B2, t2 ) @ #j)) ⇒
         (#i = #j)) ∧
       (∀ A A2 B B2 t t2 #i #j.
         ((Running_B( A, B, t ) @ #i) ∧ (Running_B( A2, B2, t2 ) @ #j)) ⇒
         (#i = #j))) ∧
      (∀ A A2 B B2 t t2 #i #j.
        ((Running_S( A, B, t ) @ #i) ∧ (Running_S( A2, B2, t2 ) @ #j)) ⇒
        (#i = #j))) ∧
     (∀ A A2 B B2 t t2 #i #j.
       ((Commit_A( A, B, t ) @ #i) ∧ (Commit_A( A2, B2, t2 ) @ #j)) ⇒
       (#i = #j))) ∧
    (∀ A A2 B B2 t t2 #i #j.
      ((Commit_B( A, B, t ) @ #i) ∧ (Commit_B( A2, B2, t2 ) @ #j)) ⇒
      (#i = #j))) ∧
   (∃ A B t t2 t3 #i #j #k #l #m.
     ((((((((Running_A( A, B, t ) @ #i) ∧ (Running_B( A, B, t2 ) @ #j)) ∧
           (#i < #j)) ∧
          (Running_S( A, B, t3 ) @ #k)) ∧
         (#j < #k)) ∧
        (Commit_B( A, B, t3 ) @ #l)) ∧
       (#k < #l)) ∧
      (Commit_A( A, B, t3 ) @ #m)) ∧
     (#l < #m))"
/*
guarded formula characterizing all satisfying traces:
"(∀ A A2 B B2 t t2 #i #j.
   (Running_A( A, B, t ) @ #i) ∧ (Running_A( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∀ A A2 B B2 t t2 #i #j.
   (Running_B( A, B, t ) @ #i) ∧ (Running_B( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∀ A A2 B B2 t t2 #i #j.
   (Running_S( A, B, t ) @ #i) ∧ (Running_S( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∀ A A2 B B2 t t2 #i #j.
   (Commit_A( A, B, t ) @ #i) ∧ (Commit_A( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∀ A A2 B B2 t t2 #i #j.
   (Commit_B( A, B, t ) @ #i) ∧ (Commit_B( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∃ A B t t2 t3 #i #j #k #l #m.
   (Running_A( A, B, t ) @ #i) ∧
   (Running_B( A, B, t2 ) @ #j) ∧
   (Running_S( A, B, t3 ) @ #k) ∧
   (Commit_B( A, B, t3 ) @ #l) ∧
   (Commit_A( A, B, t3 ) @ #m)
  ∧
   (#i < #j) ∧ (#j < #k) ∧ (#k < #l) ∧ (#l < #m))"
*/
by sorry

rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ), Fr( Kas.1 ), Fr( Kbs.1 ) ]
  --[ HonestA( id(Kas.1) ) ]->
   [ State_1111( Kas.1, Kbs.1 ) ]

rule (modulo E) eventHonestBidKbs_0_1111[color=#ffffff,
                                         process="event HonestB( id(Kbs.1) );"]:
   [ State_1111( Kas.1, Kbs.1 ) ]
  --[ HonestB( id(Kbs.1) ) ]->
   [ State_111111( Kas.1, Kbs.1 ), Out( id(Kas.1) ) ]

rule (modulo E) outidKbs_0_111111[color=#ffffff,
                                  process="out(id(Kbs.1));"]:
   [ State_111111( Kas.1, Kbs.1 ) ]
  -->
   [ !Semistate_11111111( Kas.1, Kbs.1 ), Out( id(Kbs.1) ) ]

rule (modulo E) newm_0_1111111111[color=#40804a, process="new m.1;"]:
   [ State_1111111111( Kas.1, Kbs.1 ), Fr( m.1 ), Fr( Na.1 ) ]
  --[ Running_A( id(Kas.1), id(Kbs.1), <m.1, Na.1> ) ]->
   [
   State_11111111111111( Kas.1, Kbs.1, Na.1, m.1 ),
   Out( <m.1, id(Kas.1), id(Kbs.1), 
         senc(<'1', Na.1, m.1, id(Kas.1), id(Kbs.1)>, Kas.1)>
   )
   ]

rule (modulo E) inmsg_0_11111111111111[color=#40804a,
                                       process="in(msg2.1);"]:
   [ State_11111111111111( Kas.1, Kbs.1, Na.1, m.1 ), In( msg2.1 ) ]
  -->
   [ Let_1111111111111111( msg2.1, Kas.1, Kbs.1, Na.1, m.1, msg2.1 ) ]

rule (modulo E) letmsencNaKabKasmsg_1_111111111111111[color=#ffffff,
                                                      process="let <=m.1, senc(<'3', =Na.1, Kab.1>, =Kas.1)>=msg2.1"]:
   [
   Let_1111111111111111( <m.1, senc(<'3', Na.1, Kab.1>, Kas.1)>, Kas.1,
                         Kbs.1, Na.1, m.1, msg2.1
   )
   ]
  -->
   [ State_1111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, m.1, msg2.1 ) ]

rule (modulo E) eventCommitAidKasidKbsmKab_0_1111111111111111[color=#40804a,
                                                              process="event Commit_A( id(Kas.1), id(Kbs.1), <m.1, Kab.1> );"]:
   [ State_1111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, m.1, msg2.1 ) ]
  --[ Commit_A( id(Kas.1), id(Kbs.1), <m.1, Kab.1> ) ]->
   [ State_11111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, m.1, msg2.1 ) ]

rule (modulo E) eventSecretidKasidKbsKab_0_11111111111111111[color=#40804a,
                                                             process="event Secret( id(Kas.1), id(Kbs.1), Kab.1 );"]:
   [ State_11111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, m.1, msg2.1 ) ]
  --[ Secret( id(Kas.1), id(Kbs.1), Kab.1 ) ]->
   [ State_111111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, m.1, msg2.1 ) ]

rule (modulo E) eventSessionAidKasidKbsKab_0_111111111111111111[color=#40804a,
                                                                process="event SessionA( id(Kas.1), id(Kbs.1), Kab.1 );"]:
   [ State_111111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, m.1, msg2.1 ) ]
  --[ SessionA( id(Kas.1), id(Kbs.1), Kab.1 ) ]->
   [ State_1111111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, m.1, msg2.1 ) ]

rule (modulo E) eventSecretidKasidKbsKab_0_1111111111111111111[color=#40804a,
                                                               process="event Secret( id(Kas.1), id(Kbs.1), Kab.1 );"]:
   [ State_1111111111111111111( Kab.1, Kas.1, Kbs.1, Na.1, m.1, msg2.1 ) ]
  --[ Secret( id(Kas.1), id(Kbs.1), Kab.1 ) ]->
   [ ]

rule (modulo E) p_1_1111111[color=#ffffff, process="!"]:
   [ !Semistate_11111111( Kas.1, Kbs.1 ) ]
  -->
   [ !Semistate_1111111121( Kas.1, Kbs.1 ), State_1111111111( Kas.1, Kbs.1 )
   ]

rule (modulo E) inmsg_0_111111112111[color=#40804a,
                                     process="in(msg.1);"]:
   [ State_111111112111( Kas.1, Kbs.1 ), In( msg.1 ) ]
  -->
   [ Let_11111111211111( msg.1, Kas.1, Kbs.1, msg.1 ) ]

rule (modulo E) letmidKasidKbscmsg_1_1111111121111[color=#ffffff,
                                                   process="let <m.2, id(=Kas.1), id(=Kbs.1), c.1>=msg.1"]:
   [
   Let_11111111211111( <m.2, id(Kas.1), id(Kbs.1), c.1>, Kas.1, Kbs.1, msg.1
   )
   ]
  -->
   [ State_11111111211111( Kas.1, Kbs.1, c.1, msg.1, m.2 ) ]

rule (modulo E) newNb_0_11111111211111[color=#40804a,
                                       process="new Nb.1;"]:
   [ State_11111111211111( Kas.1, Kbs.1, c.1, msg.1, m.2 ), Fr( Nb.1 ) ]
  --[ Running_B( id(Kas.1), id(Kbs.1), <m.2, Nb.1> ) ]->
   [
   State_11111111211111111( Kas.1, Kbs.1, Nb.1, c.1, msg.1, m.2 ),
   Out( <m.2, id(Kas.1), id(Kbs.1), c.1, 
         senc(<'2', Nb.1, m.2, id(Kas.1), id(Kbs.1)>, Kbs.1)>
   )
   ]

rule (modulo E) inmsg_0_11111111211111111[color=#40804a,
                                          process="in(msg3.1);"]:
   [
   State_11111111211111111( Kas.1, Kbs.1, Nb.1, c.1, msg.1, m.2 ),
   In( msg3.1 )
   ]
  -->
   [
   Let_1111111121111111111( msg3.1, Kas.1, Kbs.1, Nb.1, c.1, msg.1, msg3.1,
                            m.2
   )
   ]

rule (modulo E) letmpackagesencNbKabKbsmsg_1_111111112111111111[color=#ffffff,
                                                                process="let <=m.2, package1.1, senc(<'4', =Nb.1, Kab.2>, =Kbs.1)>=msg3.1"]:
   [
   Let_1111111121111111111( <m.2, package1.1, 
                             senc(<'4', Nb.1, Kab.2>, Kbs.1)>,
                            Kas.1, Kbs.1, Nb.1, c.1, msg.1, msg3.1, m.2
   )
   ]
  -->
   [
   State_1111111121111111111( Kas.1, Kbs.1, Nb.1, c.1, msg.1, msg3.1,
                              package1.1, Kab.2, m.2
   )
   ]

rule (modulo E) eventSecretidKasidKbsKab_0_1111111121111111111[color=#40804a,
                                                               process="event Secret( id(Kas.1), id(Kbs.1), Kab.2 );"]:
   [
   State_1111111121111111111( Kas.1, Kbs.1, Nb.1, c.1, msg.1, msg3.1,
                              package1.1, Kab.2, m.2
   )
   ]
  --[ Secret( id(Kas.1), id(Kbs.1), Kab.2 ) ]->
   [
   State_11111111211111111111( Kas.1, Kbs.1, Nb.1, c.1, msg.1, msg3.1,
                               package1.1, Kab.2, m.2
   )
   ]

rule (modulo E) eventSessionBidKasidKbsKab_0_11111111211111111111[color=#40804a,
                                                                  process="event SessionB( id(Kas.1), id(Kbs.1), Kab.2 );"]:
   [
   State_11111111211111111111( Kas.1, Kbs.1, Nb.1, c.1, msg.1, msg3.1,
                               package1.1, Kab.2, m.2
   )
   ]
  --[ SessionB( id(Kas.1), id(Kbs.1), Kab.2 ) ]->
   [
   State_111111112111111111111( Kas.1, Kbs.1, Nb.1, c.1, msg.1, msg3.1,
                                package1.1, Kab.2, m.2
   )
   ]

rule (modulo E) eventCommitBidKasidKbsmKab_0_111111112111111111111[color=#40804a,
                                                                   process="event Commit_B( id(Kas.1), id(Kbs.1), <m.2, Kab.2> );"]:
   [
   State_111111112111111111111( Kas.1, Kbs.1, Nb.1, c.1, msg.1, msg3.1,
                                package1.1, Kab.2, m.2
   )
   ]
  --[ Commit_B( id(Kas.1), id(Kbs.1), <m.2, Kab.2> ) ]->
   [ Out( <m.2, package1.1> ) ]

rule (modulo E) p_1_111111112[color=#ffffff, process="!"]:
   [ !Semistate_1111111121( Kas.1, Kbs.1 ) ]
  -->
   [
   !Semistate_111111112121( Kas.1, Kbs.1 ),
   State_111111112111( Kas.1, Kbs.1 )
   ]

rule (modulo E) p_1_11111111212[color=#ffffff, process="!"]:
   [ !Semistate_111111112121( Kas.1, Kbs.1 ), In( msg.2 ) ]
  -->
   [ Let_111111112121111( msg.2, Kas.1, Kbs.1, msg.2 ) ]

rule (modulo E) letmidKasidKbssencNamidKasidKbsKassencNbmidKasidKbsKbsmsg_1_11111111212111[color=#ffffff,
                                                                                           process="let <m.3, id(=Kas.1), id(=Kbs.1), 
 senc(<'1', Na.2, m.3, id(=Kas.1), id(=Kbs.1)>, =Kas.1), 
 senc(<'2', Nb.2, m.3, id(=Kas.1), id(=Kbs.1)>, =Kbs.1)>=msg.2"]:
   [
   Let_111111112121111( <m.3, id(Kas.1), id(Kbs.1), 
                         senc(<'1', Na.2, m.3, id(Kas.1), id(Kbs.1)>, Kas.1), 
                         senc(<'2', Nb.2, m.3, id(Kas.1), id(Kbs.1)>, Kbs.1)>,
                        Kas.1, Kbs.1, msg.2
   )
   ]
  -->
   [ State_111111112121111( Kas.1, Kbs.1, Na.2, Nb.2, msg.2, m.3 ) ]

rule (modulo E) newKab_0_111111112121111[color=#408051,
                                         process="new Kab.3;"]:
   [
   State_111111112121111( Kas.1, Kbs.1, Na.2, Nb.2, msg.2, m.3 ),
   Fr( Kab.3 )
   ]
  --[ Secret( id(Kas.1), id(Kbs.1), Kab.3 ) ]->
   [ State_11111111212111111( Kas.1, Kbs.1, Na.2, Nb.2, msg.2, Kab.3, m.3 )
   ]

rule (modulo E) eventRunningSidKasidKbsmKab_0_11111111212111111[color=#408051,
                                                                process="event Running_S( id(Kas.1), id(Kbs.1), <m.3, Kab.3> );"]:
   [ State_11111111212111111( Kas.1, Kbs.1, Na.2, Nb.2, msg.2, Kab.3, m.3 )
   ]
  --[ Running_S( id(Kas.1), id(Kbs.1), <m.3, Kab.3> ) ]->
   [ State_111111112121111111( Kas.1, Kbs.1, Na.2, Nb.2, msg.2, Kab.3, m.3 )
   ]

rule (modulo E) eventCommitSAidKasidKbsmNa_0_111111112121111111[color=#408051,
                                                                process="event Commit_S_A( id(Kas.1), id(Kbs.1), <m.3, Na.2> );"]:
   [ State_111111112121111111( Kas.1, Kbs.1, Na.2, Nb.2, msg.2, Kab.3, m.3 )
   ]
  --[ Commit_S_A( id(Kas.1), id(Kbs.1), <m.3, Na.2> ) ]->
   [
   State_1111111121211111111( Kas.1, Kbs.1, Na.2, Nb.2, msg.2, Kab.3, m.3 )
   ]

rule (modulo E) eventCommitSBidKasidKbsmNb_0_1111111121211111111[color=#408051,
                                                                 process="event Commit_S_B( id(Kas.1), id(Kbs.1), <m.3, Nb.2> );"]:
   [
   State_1111111121211111111( Kas.1, Kbs.1, Na.2, Nb.2, msg.2, Kab.3, m.3 )
   ]
  --[ Commit_S_B( id(Kas.1), id(Kbs.1), <m.3, Nb.2> ) ]->
   [
   Out( <m.3, senc(<'3', Na.2, Kab.3>, Kas.1), 
         senc(<'4', Nb.2, Kab.3>, Kbs.1)>
   )
   ]

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula













end

