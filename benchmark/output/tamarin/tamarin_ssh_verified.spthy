theory SSH begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, hash/1, kdfPtoS/1, kdfStoP/1, pair/2, pk/1, sdec/2,
           senc/2, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



heuristic: p













lemma secretP [reuse]:
  all-traces "¬(∃ k #i #j. (KeyP( k ) @ #i) ∧ (!KU( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ k #i #j. (KeyP( k ) @ #i) ∧ (!KU( k ) @ #j)"
*/
by sorry

lemma injPS [reuse]:
  all-traces
  "∀ a b skS skP #i.
    (AcceptP( a, b, skS, skP ) @ #i) ⇒
    (∃ skP2 #j. (#j < #i) ∧ (AcceptS( a, b, skS, skP2 ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b skS skP #i.
  (AcceptP( a, b, skS, skP ) @ #i)
 ∧
  ∀ skP2 #j. (AcceptS( a, b, skS, skP2 ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma injSP [reuse, use_induction]:
  all-traces
  "∀ a b skS skP #i.
    (AcceptS2( a, b, skS, skP ) @ #i) ⇒
    (∃ #j. (#j < #i) ∧ (AcceptP2( a, b, skS, skP ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b skS skP #i.
  (AcceptS2( a, b, skS, skP ) @ #i)
 ∧
  ∀ #j. (AcceptP2( a, b, skS, skP ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma secretS [reuse]:
  all-traces "¬(∃ k #i #j. (KeyS2( k ) @ #i) ∧ (!KU( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ k #i #j. (KeyS2( k ) @ #i) ∧ (!KU( k ) @ #j)"
*/
by sorry

lemma executableS2:
  all-traces "¬(∃ skS skP k h #i. AcceptS2( k, h, skS, skP ) @ #i)"
/*
guarded formula characterizing all counter-examples:
"∃ skS skP k h #i. (AcceptS2( k, h, skS, skP ) @ #i)"
*/
by sorry

rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ), Fr( skS.1 ) ]
  -->
   [ !Semistate_1111( skS.1 ), Out( pk(skS.1) ) ]

rule (modulo E) p_1_111[color=#ffffff, process="!"]:
   [ !Semistate_1111( skS.1 ), Fr( skP.1 ) ]
  -->
   [ !Semistate_1111111( skP.1, skS.1 ), Out( pk(skP.1) ) ]

rule (modulo E) newa_0_111111111[color=#408051, process="new a.1;"]:
   [ State_111111111( skP.1, skS.1 ), Fr( a.1 ) ]
  -->
   [ State_11111111111( a.1, skP.1, skS.1 ), Out( 'g'^a.1 ) ]

rule (modulo E) insigopksB_0_11111111111[color=#408051,
                                         process="in(<sig.1, opks.1, B.1>);"]:
   [ State_11111111111( a.1, skP.1, skS.1 ), In( <sig.1, opks.1, B.1> ) ]
  -->
   [ State_111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ) ]

rule (modulo E) ifpkskSopks_0_111111111111[color=#408051,
                                           process="if pk(skS.1)=opks.1"]:
   [ State_111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ) ]
  --[ Pred_Eq( pk(skS.1), opks.1 ) ]->
   [ State_1111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ) ]

rule (modulo E) ifverifysigserversignhashpkskSgaBpkskStrue_0_1111111111111[color=#408051,
                                                                           process="if verify(sig.1, <'server_sign', hash(<pk(skS.1), 'g'^a.1, B.1>)>,
       pk(skS.1))=true"]:
   [ State_1111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ) ]
  --[
  Pred_Eq( verify(sig.1, <'server_sign', hash(<pk(skS.1), 'g'^a.1, B.1>)>,
                  pk(skS.1)),
           true
  )
  ]->
   [ State_11111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ) ]

rule (modulo E) eventAcceptPgaBpkskSpkskP_0_11111111111111[color=#408051,
                                                           process="event AcceptP( 'g'^a.1, B.1, pk(skS.1), pk(skP.1) );"]:
   [ State_11111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ) ]
  --[ AcceptP( 'g'^a.1, B.1, pk(skS.1), pk(skP.1) ) ]->
   [ State_111111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ) ]

rule (modulo E) eventKeyPBa_0_111111111111111[color=#408051,
                                              process="event KeyP( B.1^a.1 );"]:
   [ State_111111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ) ]
  --[ KeyP( B.1^a.1 ) ]->
   [
   State_11111111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ),
   Out( senc(<'user_auth', pk(skP.1)>,
             kdfPtoS(<B.1^a.1, hash(<pk(skS.1), 'g'^a.1, B.1>)>))
   )
   ]

rule (modulo E) inuserauthanswer_0_11111111111111111[color=#408051,
                                                     process="in(userauth_answer.1);"]:
   [
   State_11111111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ),
   In( userauth_answer.1 )
   ]
  -->
   [
   State_111111111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1,
                             userauth_answer.1
   )
   ]

rule (modulo E) ifsdecuserauthanswerkdfStoPBahashpkskSgaBuserauthpkok_0_111111111111111111[color=#408051,
                                                                                           process="if sdec(userauth_answer.1,
     kdfStoP(<B.1^a.1, hash(<pk(skS.1), 'g'^a.1, B.1>)>))='userauth_pk_ok'"]:
   [
   State_111111111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1,
                             userauth_answer.1
   )
   ]
  --[
  Pred_Eq( sdec(userauth_answer.1,
                kdfStoP(<B.1^a.1, hash(<pk(skS.1), 'g'^a.1, B.1>)>)),
           'userauth_pk_ok'
  )
  ]->
   [
   State_1111111111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1,
                              userauth_answer.1
   )
   ]

rule (modulo E) eventAcceptPgaBpkskSpkskP_0_1111111111111111111[color=#408051,
                                                                process="event AcceptP2( 'g'^a.1, B.1, pk(skS.1), pk(skP.1) );"]:
   [
   State_1111111111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1,
                              userauth_answer.1
   )
   ]
  --[ AcceptP2( 'g'^a.1, B.1, pk(skS.1), pk(skP.1) ) ]->
   [
   Out( senc(<'user_answer', hash(<pk(skS.1), 'g'^a.1, B.1>), 
              sign(hash(<pk(skS.1), 'g'^a.1, B.1>), skP.1)>,
             kdfPtoS(<B.1^a.1, hash(<pk(skS.1), 'g'^a.1, B.1>)>))
   )
   ]

rule (modulo E) ifsdecuserauthanswerkdfStoPBahashpkskSgaBuserauthpkok_1_111111111111111111[color=#408051,
                                                                                           process="if sdec(userauth_answer.1,
     kdfStoP(<B.1^a.1, hash(<pk(skS.1), 'g'^a.1, B.1>)>))='userauth_pk_ok'"]:
   [
   State_111111111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1,
                             userauth_answer.1
   )
   ]
  --[
  Pred_Not_Eq( sdec(userauth_answer.1,
                    kdfStoP(<B.1^a.1, hash(<pk(skS.1), 'g'^a.1, B.1>)>)),
               'userauth_pk_ok'
  )
  ]->
   [ ]

rule (modulo E) ifverifysigserversignhashpkskSgaBpkskStrue_1_1111111111111[color=#408051,
                                                                           process="if verify(sig.1, <'server_sign', hash(<pk(skS.1), 'g'^a.1, B.1>)>,
       pk(skS.1))=true"]:
   [ State_1111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ) ]
  --[
  Pred_Not_Eq( verify(sig.1,
                      <'server_sign', hash(<pk(skS.1), 'g'^a.1, B.1>)>, pk(skS.1)),
               true
  )
  ]->
   [ ]

rule (modulo E) ifpkskSopks_1_111111111111[color=#408051,
                                           process="if pk(skS.1)=opks.1"]:
   [ State_111111111111( B.1, a.1, opks.1, sig.1, skP.1, skS.1 ) ]
  --[ Pred_Not_Eq( pk(skS.1), opks.1 ) ]->
   [ ]

rule (modulo E) p_1_111111[color=#ffffff, process="!"]:
   [ !Semistate_1111111( skP.1, skS.1 ) ]
  -->
   [ State_111111121( skP.1, skS.1 ), State_111111111( skP.1, skS.1 ) ]

rule (modulo E) ingA_0_111111121[color=#408051, process="in(gA.2);"]:
   [ State_111111121( skP.1, skS.1 ), In( gA.2 ), Fr( b.1 ) ]
  --[ AcceptS( gA.2, 'g'^b.1, pk(skS.1), pk(skP.1) ) ]->
   [
   State_1111111211111( b.1, skP.1, skS.1, gA.2 ),
   Out( <sign(<'server_sign', hash(<pk(skS.1), gA.2, 'g'^b.1>)>, skS.1), 
         pk(skS.1), 'g'^b.1>
   )
   ]

rule (modulo E) inuserauth_0_1111111211111[color=#408051,
                                           process="in(userauth.1);"]:
   [ State_1111111211111( b.1, skP.1, skS.1, gA.2 ), In( userauth.1 ) ]
  -->
   [
   Let_111111121111111( sdec(userauth.1,
                             kdfPtoS(<gA.2^b.1, hash(<pk(skS.1), gA.2, 'g'^b.1>)>)),
                        b.1, skP.1, skS.1, userauth.1, gA.2
   )
   ]

rule (modulo E) letuserauthpkskPsdecuserauthkdfPtoSgAbhashpkskSgAgb_1_11111112111111[color=#ffffff,
                                                                                     process="let <'user_auth', pk(=skP.1)>=sdec(userauth.1,
     kdfPtoS(<gA.2^b.1, hash(<pk(skS.1), gA.2, 'g'^b.1>)>))"]:
   [
   Let_111111121111111( <'user_auth', pk(skP.1)>, b.1, skP.1, skS.1,
                        userauth.1, gA.2
   )
   ]
  -->
   [ State_111111121111111( b.1, skP.1, skS.1, userauth.1, gA.2 ) ]

rule (modulo E) outsencuserauthpkokkdfStoPgAbhashpkskSgAgb_0_111111121111111[color=#408051,
                                                                             process="out(senc('userauth_pk_ok',
     kdfStoP(<gA.2^b.1, hash(<pk(skS.1), gA.2, 'g'^b.1>)>)));"]:
   [ State_111111121111111( b.1, skP.1, skS.1, userauth.1, gA.2 ) ]
  -->
   [
   State_1111111211111111( b.1, skP.1, skS.1, userauth.1, gA.2 ),
   Out( senc('userauth_pk_ok',
             kdfStoP(<gA.2^b.1, hash(<pk(skS.1), gA.2, 'g'^b.1>)>))
   )
   ]

rule (modulo E) insignans_0_1111111211111111[color=#408051,
                                             process="in(signans.1);"]:
   [
   State_1111111211111111( b.1, skP.1, skS.1, userauth.1, gA.2 ),
   In( signans.1 )
   ]
  -->
   [
   Let_111111121111111111( sdec(signans.1,
                                kdfPtoS(<gA.2^b.1, hash(<pk(skS.1), gA.2, 'g'^b.1>)>)),
                           b.1, signans.1, skP.1, skS.1, userauth.1, gA.2
   )
   ]

rule (modulo E) letuseranswerhashpkskSgAgbsigsdecsignanskdfPtoSgAbhashpkskSgAgb_1_11111112111111111[color=#ffffff,
                                                                                                    process="let <'user_answer', hash(<pk(=skS.1), =gA.2, 'g'^=b.1>), sig2.1>=sdec(signans.1,
     kdfPtoS(<gA.2^b.1, hash(<pk(skS.1), gA.2, 'g'^b.1>)>))"]:
   [
   Let_111111121111111111( <'user_answer', 
                            hash(<pk(skS.1), gA.2, 'g'^b.1>), sig2.1>,
                           b.1, signans.1, skP.1, skS.1, userauth.1, gA.2
   )
   ]
  -->
   [
   State_111111121111111111( b.1, sig2.1, signans.1, skP.1, skS.1,
                             userauth.1, gA.2
   )
   ]

rule (modulo E) ifverifysighashpkskSgAgbpkskPtrue_0_111111121111111111[color=#408051,
                                                                       process="if verify(sig2.1, hash(<pk(skS.1), gA.2, 'g'^b.1>), pk(skP.1))=true"]:
   [
   State_111111121111111111( b.1, sig2.1, signans.1, skP.1, skS.1,
                             userauth.1, gA.2
   )
   ]
  --[
  Pred_Eq( verify(sig2.1, hash(<pk(skS.1), gA.2, 'g'^b.1>), pk(skP.1)),
           true
  )
  ]->
   [
   State_1111111211111111111( b.1, sig2.1, signans.1, skP.1, skS.1,
                              userauth.1, gA.2
   )
   ]

rule (modulo E) eventAcceptSgAgbpkskSpkskP_0_1111111211111111111[color=#408051,
                                                                 process="event AcceptS2( gA.2, 'g'^b.1, pk(skS.1), pk(skP.1) );"]:
   [
   State_1111111211111111111( b.1, sig2.1, signans.1, skP.1, skS.1,
                              userauth.1, gA.2
   )
   ]
  --[ AcceptS2( gA.2, 'g'^b.1, pk(skS.1), pk(skP.1) ) ]->
   [
   State_11111112111111111111( b.1, sig2.1, signans.1, skP.1, skS.1,
                               userauth.1, gA.2
   )
   ]

rule (modulo E) eventKeySgAb_0_11111112111111111111[color=#408051,
                                                    process="event KeyS2( gA.2^b.1 );"]:
   [
   State_11111112111111111111( b.1, sig2.1, signans.1, skP.1, skS.1,
                               userauth.1, gA.2
   )
   ]
  --[ KeyS2( gA.2^b.1 ) ]->
   [ ]

rule (modulo E) ifverifysighashpkskSgAgbpkskPtrue_1_111111121111111111[color=#408051,
                                                                       process="if verify(sig2.1, hash(<pk(skS.1), gA.2, 'g'^b.1>), pk(skP.1))=true"]:
   [
   State_111111121111111111( b.1, sig2.1, signans.1, skP.1, skS.1,
                             userauth.1, gA.2
   )
   ]
  --[
  Pred_Not_Eq( verify(sig2.1, hash(<pk(skS.1), gA.2, 'g'^b.1>), pk(skP.1)),
               true
  )
  ]->
   [ ]

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

























end

