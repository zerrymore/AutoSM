theory Woo_Lam_Pi_f begin

// Function signature and definition of the equational theory E

functions: fst/1, id/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



heuristic: p











lemma AUTO_typing [sources]:
  all-traces
  "(∀ x m #i.
     (AUTO_IN_TERM_0_0_0_1_1_1_0__S_to_B( m, x ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( m ) @ #j) ∧ (#j < #i)))) ∧
   (∀ x m #i.
     (AUTO_IN_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( m, x ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j.
        (AUTO_OUT_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( m ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ x m #i.
    (AUTO_IN_TERM_0_0_0_1_1_1_0__S_to_B( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( m ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j.
      (AUTO_OUT_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( m ) @ #j) ⇒ ¬(#j < #i))))"
*/
by sorry

lemma executability:
  exists-trace
  "∃ A B t #i #j #k.
    ((((Commit_B( A, B, t ) @ #i) ∧ (Running_A( A, B, t ) @ #j)) ∧
      (#j < #i)) ∧
     (Running_B( A, B, t ) @ #k)) ∧
    (#k < #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ A B t #i #j #k.
  (Commit_B( A, B, t ) @ #i) ∧
  (Running_A( A, B, t ) @ #j) ∧
  (Running_B( A, B, t ) @ #k)
 ∧
  (#j < #i) ∧ (#k < #j)"
*/
by sorry

lemma Secrecy:
  all-traces
  "¬(∃ A B m #i. (Secret( A, B, m ) @ #i) ∧ (∃ #r. K( m ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i. (Secret( A, B, m ) @ #i) ∧ ∃ #r. (K( m ) @ #r)"
*/
by sorry

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (∃ #j.
      ((Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i)))))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  ∀ #j.
   (Running_A( A, B, t ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    (∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))"
*/
by sorry

lemma agreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (∃ #j. (Running_A( A, B, t ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  ∀ #j. (Running_A( A, B, t ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ), Fr( Kas.1 ) ]
  -->
   [ State_111( Kas.1 ), Out( id(Kas.1) ) ]

rule (modulo E) eventHonestAidKas_0_111[color=#ffffff,
                                        process="event HonestA( id(Kas.1) );"]:
   [ State_111( Kas.1 ), Fr( Kbs.1 ) ]
  --[ HonestA( id(Kas.1) ) ]->
   [ State_111111( Kas.1, Kbs.1 ), Out( id(Kbs.1) ) ]

rule (modulo E) eventHonestBidKbs_0_111111[color=#ffffff,
                                           process="event HonestB( id(Kbs.1) );"]:
   [ State_111111( Kas.1, Kbs.1 ) ]
  --[ HonestB( id(Kbs.1) ) ]->
   [ !Semistate_11111111( Kas.1, Kbs.1 ) ]

rule (modulo E) p_1_1111111[color=#ffffff, process="!"]:
   [ !Semistate_11111111( Kas.1, Kbs.1 ) ]
  -->
   [ !Semistate_111111111( Kas.1, Kbs.1 ) ]

rule (modulo E) inNb_0_11111111111[color=#40804a, process="in(Nb.1);"]:
   [ State_11111111111( Kas.1, Kbs.1 ), In( Nb.1 ) ]
  --[
  AUTO_OUT_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( senc(<'1', id(Kas.1), 
                                                     id(Kbs.1), Nb.1>,
                                                    Kas.1)
  )
  ]->
   [ State_1111111111111( Kas.1, Kbs.1, Nb.1 ) ]

rule (modulo E) eventRunningAidKasidKbsABNb_0_1111111111111[color=#40804a,
                                                            process="event Running_A( id(Kas.1), id(Kbs.1), <'A', 'B', Nb.1> );"]:
   [ State_1111111111111( Kas.1, Kbs.1, Nb.1 ) ]
  --[ Running_A( id(Kas.1), id(Kbs.1), <'A', 'B', Nb.1> ) ]->
   [ State_11111111111111( Kas.1, Kbs.1, Nb.1 ) ]

rule (modulo E) eventSecretidKasidKbsKas_0_11111111111111[color=#40804a,
                                                          process="event Secret( id(Kas.1), id(Kbs.1), Kas.1 );"]:
   [ State_11111111111111( Kas.1, Kbs.1, Nb.1 ) ]
  --[ Secret( id(Kas.1), id(Kbs.1), Kas.1 ) ]->
   [ Out( senc(<'1', id(Kas.1), id(Kbs.1), Nb.1>, Kas.1) ) ]

rule (modulo E) p_1_11111111[color=#ffffff, process="!"]:
   [ !Semistate_111111111( Kas.1, Kbs.1 ) ]
  -->
   [
   !Semistate_11111111121( Kas.1, Kbs.1 ), State_11111111111( Kas.1, Kbs.1 )
   ]

rule (modulo E) newNb_0_1111111112111[color=#40804a,
                                      process="new Nb.2;"]:
   [ State_1111111112111( Kas.1, Kbs.1 ), Fr( Nb.2 ) ]
  --[ Running_B( id(Kas.1), id(Kbs.1), <'A', 'B', Nb.2> ) ]->
   [ State_1111111112111111( Kas.1, Kbs.1, Nb.2 ), Out( Nb.2 ) ]

rule (modulo E) incypher_0_1111111112111111[color=#40804a,
                                            process="in(cypher2.1);"]:
   [ State_1111111112111111( Kas.1, Kbs.1, Nb.2 ), In( cypher2.1 ) ]
  --[
  AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( senc(<'2', id(Kas.1), id(Kbs.1), 
                                             Nb.2, cypher2.1>,
                                            Kbs.1)
  )
  ]->
   [ State_111111111211111111( Kas.1, Kbs.1, cypher2.1, Nb.2 ) ]

rule (modulo E) eventSecretidKasidKbsKbs_0_111111111211111111[color=#40804a,
                                                              process="event Secret( id(Kas.1), id(Kbs.1), Kbs.1 );"]:
   [ State_111111111211111111( Kas.1, Kbs.1, cypher2.1, Nb.2 ) ]
  --[ Secret( id(Kas.1), id(Kbs.1), Kbs.1 ) ]->
   [
   State_11111111121111111111( Kas.1, Kbs.1, cypher2.1, Nb.2 ),
   Out( senc(<'2', id(Kas.1), id(Kbs.1), Nb.2, cypher2.1>, Kbs.1) )
   ]

rule (modulo E) incypher_0_11111111121111111111[color=#40804a,
                                                process="in(cypher3.1);"]:
   [
   State_11111111121111111111( Kas.1, Kbs.1, cypher2.1, Nb.2 ),
   In( cypher3.1 )
   ]
  -->
   [
   Let_1111111112111111111111( sdec(cypher3.1, Kbs.1), Kas.1, Kbs.1,
                               cypher2.1, cypher3.1, Nb.2
   )
   ]

rule (modulo E) letidKasidKbsNbsdeccypherKbs_1_111111111211111111111[color=#ffffff,
                                                                     process="let <'3', id(=Kas.1), id(=Kbs.1), =Nb.2>=sdec(cypher3.1, Kbs.1)"]:
   [
   Let_1111111112111111111111( <'3', id(Kas.1), id(Kbs.1), Nb.2>, Kas.1,
                               Kbs.1, cypher2.1, cypher3.1, Nb.2
   )
   ]
  -->
   [
   State_1111111112111111111111( Kas.1, Kbs.1, cypher2.1, cypher3.1, Nb.2 )
   ]

rule (modulo E) eventCommitBidKasidKbsABNb_0_1111111112111111111111[color=#40804a,
                                                                    process="event Commit_B( id(Kas.1), id(Kbs.1), <'A', 'B', Nb.2> );"]:
   [
   State_1111111112111111111111( Kas.1, Kbs.1, cypher2.1, cypher3.1, Nb.2 )
   ]
  --[ Commit_B( id(Kas.1), id(Kbs.1), <'A', 'B', Nb.2> ) ]->
   [ ]

rule (modulo E) p_1_1111111112[color=#ffffff, process="!"]:
   [ !Semistate_11111111121( Kas.1, Kbs.1 ) ]
  -->
   [
   !Semistate_1111111112121( Kas.1, Kbs.1 ),
   State_1111111112111( Kas.1, Kbs.1 )
   ]

rule (modulo E) p_1_111111111212[color=#ffffff, process="!"]:
   [ !Semistate_1111111112121( Kas.1, Kbs.1 ), In( cypher4.1 ) ]
  -->
   [ Let_1111111112121111( sdec(cypher4.1, Kbs.1), Kas.1, Kbs.1, cypher4.1 )
   ]

rule (modulo E) letidKasidKbsNbcyphersdeccypherKbs_1_111111111212111[color=#ffffff,
                                                                     process="let <'2', id(=Kas.1), id(=Kbs.1), Nb.3, cypher5.1>=sdec(cypher4.1, Kbs.1)"]:
   [
   Let_1111111112121111( <'2', id(Kas.1), id(Kbs.1), Nb.3, cypher5.1>,
                         Kas.1, Kbs.1, cypher4.1
   )
   ]
  -->
   [ State_1111111112121111( Kas.1, Kbs.1, cypher4.1, cypher5.1, Nb.3 ) ]

rule (modulo E) letidKasidKbsNbsdeccypherKas_0_1111111112121111[color=#ffffff,
                                                                process="let <'1', id(=Kas.1), id(=Kbs.1), =Nb.3>=sdec(cypher5.1, Kas.1)"]:
   [ State_1111111112121111( Kas.1, Kbs.1, cypher4.1, cypher5.1, Nb.3 ) ]
  -->
   [
   Let_11111111121211111( sdec(cypher5.1, Kas.1), Kas.1, Kbs.1, cypher4.1,
                          cypher5.1, Nb.3
   )
   ]

rule (modulo E) letidKasidKbsNbsdeccypherKas_1_1111111112121111[color=#ffffff,
                                                                process="let <'1', id(=Kas.1), id(=Kbs.1), =Nb.3>=sdec(cypher5.1, Kas.1)"]:
   [
   Let_11111111121211111( <'1', id(Kas.1), id(Kbs.1), Nb.3>, Kas.1, Kbs.1,
                          cypher4.1, cypher5.1, Nb.3
   )
   ]
  -->
   [ State_11111111121211111( Kas.1, Kbs.1, cypher4.1, cypher5.1, Nb.3 ) ]

rule (modulo E) eventAUTOINTERMStoBcypherNb_0_11111111121211111[color=#408051,
                                                                process="event AUTO_IN_TERM_0_0_0_1_1_1_0__S_to_B( cypher5.1, Nb.3 );"]:
   [ State_11111111121211111( Kas.1, Kbs.1, cypher4.1, cypher5.1, Nb.3 ) ]
  --[ AUTO_IN_TERM_0_0_0_1_1_1_0__S_to_B( cypher5.1, Nb.3 ) ]->
   [ State_111111111212111111( Kas.1, Kbs.1, cypher4.1, cypher5.1, Nb.3 ) ]

rule (modulo E) eventAUTOINTERMStoBcypherNb_0_111111111212111111[color=#408051,
                                                                 process="event AUTO_IN_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( cypher5.1, Nb.3 );"]:
   [ State_111111111212111111( Kas.1, Kbs.1, cypher4.1, cypher5.1, Nb.3 ) ]
  --[ AUTO_IN_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( cypher5.1, Nb.3 ) ]->
   [ Out( senc(<'3', id(Kas.1), id(Kbs.1), Nb.3>, Kbs.1) ) ]

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula













end

