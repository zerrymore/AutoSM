theory Denning_Sacco begin

// Function signature and definition of the equational theory E

functions: fst/1, id/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



heuristic: p











lemma AUTO_typing [sources]:
  all-traces
  "∀ x m #i.
    (AUTO_IN_TERM_2_0_0_1_1_1_1__A_2( m, x ) @ #i) ⇒
    ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( m ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x m #i.
  (AUTO_IN_TERM_2_0_0_1_1_1_1__A_2( m, x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( m ) @ #j) ⇒ ¬(#j < #i))"
*/
by sorry

lemma executability:
  exists-trace
  "∃ A B t #i #j.
    ((CommitB( B, A, t ) @ #i) ∧ (CommitA( A, B, t ) @ #j)) ∧ (#j < #i)"
/*
guarded formula characterizing all satisfying traces:
"∃ A B t #i #j.
  (CommitB( B, A, t ) @ #i) ∧ (CommitA( A, B, t ) @ #j) ∧ #j < #i"
*/
by sorry

lemma secrecy:
  all-traces
  "∀ A B k #i. (Secret( A, B, k ) @ #i) ⇒ (¬(∃ #j. K( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ A B k #i. (Secret( A, B, k ) @ #i) ∧ ∃ #j. (K( k ) @ #j)"
*/
by sorry

lemma noninjectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (CommitB( B, A, t ) @ #i) ⇒
    (∃ #j. (RunningA( A, B, t ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (CommitB( B, A, t ) @ #i)
 ∧
  ∀ #j. (RunningA( A, B, t ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (CommitB( B, A, t ) @ #i) ⇒
    (∃ #j.
      ((RunningA( A, B, t ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ B2 A2 #i2. (CommitB( B2, A2, t ) @ #i2) ∧ (¬(#i2 = #i)))))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (CommitB( B, A, t ) @ #i)
 ∧
  ∀ #j.
   (RunningA( A, B, t ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    (∃ B2 A2 #i2. (CommitB( B2, A2, t ) @ #i2) ∧ ¬(#i2 = #i)))"
*/
by sorry

rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ), Fr( Kas.1 ) ]
  -->
   [ State_111( Kas.1 ), Out( id(Kas.1) ) ]

rule (modulo E) newKbs_0_111[color=#ffffff, process="new Kbs.1;"]:
   [ State_111( Kas.1 ), Fr( Kbs.1 ) ]
  -->
   [ !Semistate_111111( Kas.1, Kbs.1 ), Out( id(Kbs.1) ) ]

rule (modulo E) incypher_0_111111111[color=#40804a,
                                     process="in(cypher1.1);"]:
   [ State_111111111( Kas.1, Kbs.1 ), In( cypher1.1 ) ]
  -->
   [ Let_11111111111( sdec(cypher1.1, Kas.1), Kas.1, Kbs.1, cypher1.1 ) ]

rule (modulo E) letidKbsKabTcyphersdeccypherKas_1_1111111111[color=#ffffff,
                                                             process="let <id(=Kbs.1), Kab.1, T.1, cypher2.1>=sdec(cypher1.1, Kas.1)"]:
   [
   Let_11111111111( <id(Kbs.1), Kab.1, T.1, cypher2.1>, Kas.1, Kbs.1,
                    cypher1.1
   )
   ]
  -->
   [ State_11111111111( Kab.1, Kas.1, Kbs.1, T.1, cypher1.1, cypher2.1 ) ]

rule (modulo E) eventAUTOINTERMAcyphercypher_0_11111111111[color=#40804a,
                                                           process="event AUTO_IN_TERM_2_0_0_1_1_1_1__A_2( cypher1.1, cypher2.1 );"]:
   [ State_11111111111( Kab.1, Kas.1, Kbs.1, T.1, cypher1.1, cypher2.1 ) ]
  --[ AUTO_IN_TERM_2_0_0_1_1_1_1__A_2( cypher1.1, cypher2.1 ) ]->
   [ State_111111111111( Kab.1, Kas.1, Kbs.1, T.1, cypher1.1, cypher2.1 ) ]

rule (modulo E) eventCommitAidKasidKbsKabT_0_111111111111[color=#40804a,
                                                          process="event CommitA( id(Kas.1), id(Kbs.1), <Kab.1, T.1> );"]:
   [ State_111111111111( Kab.1, Kas.1, Kbs.1, T.1, cypher1.1, cypher2.1 ) ]
  --[ CommitA( id(Kas.1), id(Kbs.1), <Kab.1, T.1> ) ]->
   [ State_1111111111111( Kab.1, Kas.1, Kbs.1, T.1, cypher1.1, cypher2.1 ) ]

rule (modulo E) eventRunningAidKasidKbsKabT_0_1111111111111[color=#40804a,
                                                            process="event RunningA( id(Kas.1), id(Kbs.1), <Kab.1, T.1> );"]:
   [ State_1111111111111( Kab.1, Kas.1, Kbs.1, T.1, cypher1.1, cypher2.1 ) ]
  --[ RunningA( id(Kas.1), id(Kbs.1), <Kab.1, T.1> ) ]->
   [ State_11111111111111( Kab.1, Kas.1, Kbs.1, T.1, cypher1.1, cypher2.1 )
   ]

rule (modulo E) eventSecretidKasidKbsKab_0_11111111111111[color=#40804a,
                                                          process="event Secret( id(Kas.1), id(Kbs.1), Kab.1 );"]:
   [ State_11111111111111( Kab.1, Kas.1, Kbs.1, T.1, cypher1.1, cypher2.1 )
   ]
  --[ Secret( id(Kas.1), id(Kbs.1), Kab.1 ) ]->
   [ Out( cypher2.1 ) ]

rule (modulo E) p_1_11111[color=#ffffff, process="!"]:
   [ !Semistate_111111( Kas.1, Kbs.1 ) ]
  -->
   [
   !Semistate_11111121( Kas.1, Kbs.1 ), State_111111111( Kas.1, Kbs.1 ),
   Out( <id(Kas.1), id(Kbs.1)> )
   ]

rule (modulo E) incypher_0_1111112111[color=#40804a,
                                      process="in(cypher2.2);"]:
   [ State_1111112111( Kas.1, Kbs.1 ), In( cypher2.2 ) ]
  -->
   [ Let_111111211111( sdec(cypher2.2, Kbs.1), Kas.1, Kbs.1, cypher2.2 ) ]

rule (modulo E) letKabidKasTsdeccypherKbs_1_11111121111[color=#ffffff,
                                                        process="let <Kab.2, id(=Kas.1), T.2>=sdec(cypher2.2, Kbs.1)"]:
   [ Let_111111211111( <Kab.2, id(Kas.1), T.2>, Kas.1, Kbs.1, cypher2.2 ) ]
  -->
   [ State_111111211111( Kas.1, Kbs.1, Kab.2, T.2, cypher2.2 ) ]

rule (modulo E) eventCommitBidKbsidKasKabT_0_111111211111[color=#40804a,
                                                          process="event CommitB( id(Kbs.1), id(Kas.1), <Kab.2, T.2> );"]:
   [ State_111111211111( Kas.1, Kbs.1, Kab.2, T.2, cypher2.2 ) ]
  --[ CommitB( id(Kbs.1), id(Kas.1), <Kab.2, T.2> ) ]->
   [ State_1111112111111( Kas.1, Kbs.1, Kab.2, T.2, cypher2.2 ) ]

rule (modulo E) eventSecretidKbsidKasKabT_0_1111112111111[color=#40804a,
                                                          process="event Secret( id(Kbs.1), id(Kas.1), <Kab.2, T.2> );"]:
   [ State_1111112111111( Kas.1, Kbs.1, Kab.2, T.2, cypher2.2 ) ]
  --[ Secret( id(Kbs.1), id(Kas.1), <Kab.2, T.2> ) ]->
   [ ]

rule (modulo E) p_1_1111112[color=#ffffff, process="!"]:
   [ !Semistate_11111121( Kas.1, Kbs.1 ) ]
  -->
   [ !Semistate_1111112121( Kas.1, Kbs.1 ), State_1111112111( Kas.1, Kbs.1 )
   ]

rule (modulo E) p_1_111111212[color=#ffffff, process="!"]:
   [
   !Semistate_1111112121( Kas.1, Kbs.1 ), In( <id(Kas.1), id(Kbs.1)> ),
   Fr( Kab.3 ), Fr( T.3 )
   ]
  --[
  AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( senc(<id(Kbs.1), Kab.3, T.3, 
                                          senc(<Kab.3, id(Kas.1), T.3>, Kbs.1)>,
                                         Kas.1)
  )
  ]->
   [
   Out( senc(<id(Kbs.1), Kab.3, T.3, senc(<Kab.3, id(Kas.1), T.3>, Kbs.1)>,
             Kas.1)
   )
   ]

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula













end

