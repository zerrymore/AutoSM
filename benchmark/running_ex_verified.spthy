theory running_ex
begin

builtins: hashing, asymmetric-encryption
let Client(skC, pkS) = 
  new k;
  let message = aenc(k, pkS) in
  out(message);
  in(cipher);
  let h(=k) = cipher in
  event SessKeyC(pkS, k)


let Server(skS, pkC, pkS) =
  in(request);
  let key = adec(request, skS) in
  event AnswerRequest(pkS, key);
  let H = h(key) in
  out(H)

process:
!(
  new sks; out(pk(sks));
  !(
    new skc; out(pk(skc));
     !Client(skc, pk(sks))  |  !Server(sks, pk(skc), pk(sks)) 
  )
)


/** lemma from Tamarin's tutorial  */
lemma Client_session_key_secrecy:
  " /* It cannot be that a  */
    not(
      Ex S k #i #j.
        /* client has set up a session key 'k' with a server'S' */
        SessKeyC(S, k) @ #i
        /* and the adversary knows 'k' */
      & K(k) @ #j
        /* without having performed a long-term key reveal on 'S'. */
    )
  "

lemma Client_auth:
  " /* For all session keys 'k' setup by clients with a server 'S' */
    ( All S k #i.  SessKeyC(S, k) @ #i
       ==>
         /* there is a server that answered the request */
       (Ex #a. AnswerRequest(S, k) @ a)
         /* or the adversary performed a long-term key reveal on 'S'
            before the key was setup. */
    )
  "

end



// ==============================================================================
// summary of summaries:

// analyzed: running_ex_verfied.spthy

//   processing time: 0.56s
  
//   Client_session_key_secrecy (all-traces): verified (9 steps)
//   Client_auth (all-traces): verified (9 steps)

// ==============================================================================