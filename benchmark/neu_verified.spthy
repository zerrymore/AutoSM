theory Neu_Stu
begin

functions: id/1
builtins: diffie-hellman, symmetric-encryption, signing, xor, hashing, asymmetric-encryption
let A(Kas, idA, idB) =
  new Na;
  out(<idA,Na>);
  in(cypher);
  let <msg1, msg2, Nb> = cypher in
  let <=idB,=Na,Kab,Tb> = sdec(msg1, Kas) in
  out(<msg2, senc(Nb, Kab)>);
  new Ma;
  out(<Ma, msg2>);
  in(cypher2);
  let <Mb, msg3> = cypher2 in
  let =Ma = sdec(msg3, Kab) in
  out(senc(Mb, Kab)); 0

let B(Kbs, idA, idB) =
  in(cypher3);
  let <=idA, Na> = cypher3 in
  new Tb;
  new Nb;
  out(<idB, senc(<idA,Na,Tb>, Kbs), Nb>);
  in(cypher4);
  let <msg4, msg5> = cypher4 in
  let <=idA,Kab,=Tb> = sdec(msg4, Kbs) in
  let =Nb = sdec(msg5, Kab) in
  in(cypher5);
  let <Ma, msg6> = cypher5 in
  let <=idA,=Kab,=Tb> = sdec(msg6, Kbs) in
  new Mb;
  out(<Mb, senc(Ma, Kab)>);
  in(cypher7);
  let =Mb = sdec(cypher7, Kab) in 0

let S(Kas, Kbs, idA, idB) =
  in(cypher8);
  let <=idB, msg7, Nb> = cypher8 in
  let <=idA,Na,Tb> = sdec(msg7, Kbs) in
  new Kab;
  out(<senc(<idB,Na,Kab,Tb>, Kas), senc(<idA,Kab,Tb>, Kbs), Nb>); 0



process:
!(   
  new Kas; new Kbs; out(id(Kas)); out(id(Kbs)); event HonestA(id(Kas)); event HonestB(id(Kbs));
  !(   
    new idA; new idB; out(id(idA)); out(id(idB)); event HonestIdA(id(idA)); event HonestIdB(id(idB));
    (   !A(Kas, id(idA), id(idB)) | !B(Kbs, id(idA), id(idB)) | !S(Kas, Kbs, id(idA), id(idB))  )
  )
)
end