
/*
 * Protocol: SSH

   Proverif : everything in a second.

   Tamarin : everything in 1 minute
*/



theory temp

begin

builtins: diffie-hellman, symmetric-encryption, signing

functions: hash/1, kdfPtoS/1, kdfStoP/1

// Client
let P(pkS,skP,pkP) =
    new a;                              // C generates a random number x (1 < x < q)
    let gA='g'^a in					 // and computes e = g^x mod p.
    out(gA);                             // C sends e to S
    in(<sig,opks,B>);                    // * C receives (K_S || f || s) from S
    if pkS=opks then                     // C verifies that K_S really is the host key for S
        (
	let h=hash(<pkS,gA,B>) in                       //  2. and H = hash(V_C || V_S || I_C || I_S || K_S || e || f || K)
	let k=B^a in                                   //  1. C then computes K = f^x mod p,  
	if verify(sig,<'server_sign',h>,pkS)=true then  //  3. and verifies the signature s on H
	   (
	   event AcceptP(gA,B,pkS,pkP);
	   event KeyP(k);
	   let kPS=kdfPtoS(<k,h>) in
	   let kSP=kdfStoP(<k,h>) in
	   out(senc(<'user_auth',pkP>,kPS));
	   in(userauth_answer);
	   if sdec(userauth_answer,kSP)='userauth_pk_ok' then
	        (
	   	event AcceptP2(gA,B,pkS,pkP);
		out(senc(<'user_answer',h,sign(h,skP)>,kPS))
		    )
	    )
	 )

let S(skS,pkS,pkP) =
    in(gA);                              // S receives e 
    new b;                              // S generates a random number y (0 < y < q)
    let gB='g'^b in                     // and computes f = g^y mod p.
    let h=hash(<pkS,gA,gB>) in           // H = hash(V_C || V_S || I_C || I_S || K_S || e || f || K)
										 /* V_S is S’s identification string; V_C is C’s identification string; 
										 	K_S is S’s public host key; I_C is C’s SSH_MSG_KEXINIT message and I_S is S’s
											SSH_MSG_KEXINIT message that have been exchanged before this part begins. */
    let k=gA^b in                       // It computes K = e^y mod p,
    event AcceptS(gA,gB,pkS,pkP);
    let sig=sign(<'server_sign',h>,skS) in    // and signature s on H with its private host key
    out(<sig,pkS,gB>);                   // S sends (K_S || f || s) to C
    let kPS=kdfPtoS(<k,h>) in
    let kSP=kdfStoP(<k,h>) in
    in(userauth);
    let mess=sdec(userauth,kPS) in
    let <'user_auth',=pkP> = mess in
	  out(senc('userauth_pk_ok',kSP));
	  in(signans);
	  let mess2=sdec(signans,kPS) in
	  let <'user_answer',=h,sig2> = mess2 in
	  if verify(sig2,h,pkP)=true then
	      (
	      event AcceptS2(gA,gB,pkS,pkP);
	      event KeyS2(k)
	      )

process:
 !(new skS; out(pk(skS));
       !(new skP; out(pk(skP));
           !(
	    P(pk(skS),skP,pk(skP))  | S(skS,pk(skS),pk(skP))
	    )
	)
  )


lemma secretP[reuse]: //secrecy of the key
  "(not (Ex k #i #j. (KeyP(k)@i & KU(k)@j)))"


lemma injPS[reuse]: // if P accepts, some S also accepted in the first step (but no authentication of P at this stage)
 "All a b skS skP #i. AcceptP(a,b,skS,skP)@i ==>
    (Ex skP2 #j. #j<#i & AcceptS(a,b,skS,skP2)@j)"

lemma injSP[reuse,use_induction]: // injectivity of final acceptance
 "All a b skS skP #i. AcceptS2(a,b,skS,skP)@i ==>
    (Ex #j. j<i & (AcceptP2(a,b,skS,skP)@j))
"
lemma secretS[reuse]: //secrecy of the key
  "(not (Ex k #i #j. (KeyS2(k)@i & KU(k)@j)))"


lemma executableS2: // sanity check
 "not(Ex skS skP k h #i. AcceptS2(k,h,skS,skP)@i)"

end




// ==============================================================================
// summary of summaries:

// analyzed: tmp.spthy

//   processing time: 33.72s
  
//   secretP (all-traces): verified (9 steps)
//   injPS (all-traces): verified (6 steps)
//   injSP (all-traces): verified (16 steps)
//   secretS (all-traces): verified (4 steps)
//   executableS2 (all-traces): falsified - found trace (12 steps)

// ==============================================================================