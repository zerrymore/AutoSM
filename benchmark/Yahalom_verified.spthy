theory Yahalom
begin

functions: id/1
functions: senc/2, sdec/2[destructor]
equations: sdec(senc(m,k),k)=m
let Alice(Kas, idA, idB) =
  new Na;
  out(<idA,Na>);
  in(<cypher1, cypher2>);
  let mess1 = sdec(cypher1, Kas) in
  let <'2', =idB, Kab, =Na, Nb> = mess1 in
  event AUTO_IN_TERM_2_0_0_0_1_1_1_1__A_2( cypher1, Nb);
  event CommitA(idA,idB,<Na,Nb>);
  event RunningA(idA,idB,<Kab,Na,Nb>);
  event Secret(idA,idB, Kab);
  event OUT_A(senc(<'4', Nb>, Kab));
  out(<cypher2, senc(<'4', Nb>, Kab)>); 0

let Bob(Kas, Kbs, idA, idB) =
  in(<=idA,Na>);
  new Nb;
  event RunningB(idB, idA, <Na,Nb>);
  event AUTO_OUT_TERM_1_0_1_0_1_1_1__S_1( senc(<'1', idA,Na,Nb>, Kbs) );
  out(senc(<'1', idA,Na,Nb>, Kbs));
  in(<cypher3, cypher4>);
  let mess2 = sdec(cypher3, Kbs) in
  let <'3', =idA, Kab> = mess2 in
  let <'4',=Nb> = sdec(cypher4, Kab) in 
  event IN_B(cypher4, Nb);
  event CommitB(idB,idA,<Kab,Na,Nb>);
  event Secret(idB,idA,Kab)

let Server(Kas, Kbs, idA, idB) =
  in(cypher5);
  let mess3 = sdec(cypher5, Kbs) in
  let <'1', =idA, Na, Nb> = mess3 in
  event AUTO_IN_TERM_1_0_1_0_1_1_1__S_1( cypher5, <Na, Nb>);
  new Kab;
  event Server(idA,idB,<Kab,Na,Nb>);
  event AUTO_OUT_TERM_2_0_0_0_1_1_1_1__A_2(senc(<'2', idB,Kab,Na,Nb>, Kas));
  out(<senc(<'2', idB,Kab,Na,Nb>, Kas),senc(<'3', idA,Kab>, Kbs)>); 0

process:
!(    // 1. There can be unbounded number of servers.
  new Kas; new Kbs; out(id(Kas)); out(id(Kbs));   // the identities are known publicly, which are sent out
    // 3. The client, server and Bob are running in parallel.
    (!Alice(Kas, id(Kas), id(Kbs))  | !Bob(Kas, Kbs, id(Kas), id(Kbs))  | !Server(Kas, Kbs, id(Kas), id(Kbs))  )  
)

lemma AUTO_typing[sources, reuse]:
  all-traces
  "
    (All x m #i.
      (AUTO_IN_TERM_1_0_1_0_1_1_1__S_1( m, x ) @ #i) ==>
      ((Ex #j. (!KU( x ) @ #j) & (#j < #i)) |
       (Ex #j. (AUTO_OUT_TERM_1_0_1_0_1_1_1__S_1( m ) @ #j) & (#j < #i)))) &
   (All x m #i.
     (AUTO_IN_TERM_2_0_0_0_1_1_1_1__A_2( m, x ) @ #i) ==>
     ((Ex #j. (!KU( x ) @ #j) & (#j < #i)) |
      (Ex #j. (AUTO_OUT_TERM_2_0_0_0_1_1_1_1__A_2( m ) @ #j) & (#j < #i))))"
      

lemma executability:
exists-trace
"Ex A B kab na nb #i #j #k.
  CommitB(B,A,<kab,na,nb>)@i 
  & CommitA(A,B,<na,nb>)@j & #j<#i
  & Server(A,B,<kab,na,nb>)@k & #k < #j"


// check the secrecy of the newly generated session key
lemma secrecy:
  "All A B k #i. Secret(A,B,k)@i ==> not (Ex #j. K(k)@j )  "


  lemma test[reuse]:
  "All A B t #i.
    CommitB(B, A, t) @i
    ==> Ex #j. RunningA(A,B, t) @j"


// check the authenticity of the transaction from B's point of view
lemma noninjectiveagreement_B:
  "All A B t #i.
    CommitB(B, A, t) @i
    ==> (Ex #j. RunningA(A,B, t) @j
        & j < i)"


// check the authenticity of the transaction from A's point of view
lemma noninjectiveagreement_A:
  "All A B t #i.
    CommitA(A, B, t) @i
    ==> ((Ex #j. RunningB(B,A,t) @j
        & j < i)
        )"




// check the authenticity and freshness of the transaction from B's point of view
lemma injectiveagreement_B:
"All A B t #i. CommitB(B,A,t) @i
  ==> ((Ex #j. RunningA(A,B,t) @j
      & j < i
      & not (Ex A2 B2 #i2. CommitB(B2,A2,t) @i2
                         & not (#i2 = #i)))
    )"



// check the authenticity and freshness of the transaction from A's point of view
lemma injectiveagreement_A:
"All A B t #i. CommitA(A,B,t)@i
  ==> ((Ex #j. RunningB(B,A,t) @j
      & j < i
      & not (Ex A2 B2 #i2. CommitA(A2,B2,t) @i2
                         & not (#i2 = #i))))"

end




// ==============================================================================
// summary of summaries:

// analyzed: o.spthy

//   processing time: 2143.80s
  
//   AUTO_typing (all-traces): verified (124 steps)
//   executability (exists-trace): verified (23 steps)
//   secrecy (all-traces): verified (7685 steps)
//   noninjectiveagreement_B (all-traces): verified (2605 steps)
//   noninjectiveagreement_A (all-traces): verified (18 steps)
//   injectiveagreement_B (all-traces): verified (2877 steps)
//   injectiveagreement_A (all-traces): verified (34 steps)

// ==============================================================================
