theory EDHOC
begin

functions: hash/1,hkdfextract/2, hkdfexpand/2
builtins: diffie-hellman, signing, symmetric-encryption
let I2(skI) =
	new a;
	let gA = 'g'^a in
	out(<'m2', gA, 'C_I', 'AD'>);
	in(<'C_I', gB, rC_R, cypher_2>);
	let TH_2 = hash(<'m2', gA, 'C_I', 'AD', 'C_I', gB, rC_R>) in
	let PRK_2e = hkdfextract('null', gB^a) in
	let K_2e = hkdfexpand(PRK_2e, <TH_2, 'TagK_2e'>) in
	let PRK_3e2m = PRK_2e in
	let K_2m = hkdfexpand(PRK_3e2m, <TH_2, 'TagK_2m'>) in
	let plaintext_2 = sdec(cypher_2, K_2e) in
	let <pkR, signed, rAD_2> = plaintext_2 in
	let MAC_2 = senc(<TH_2, pkR, rAD_2>, K_2m) in
	if verify(signed, <pkR, TH_2, rAD_2, MAC_2>, pkR) = true then
	    let TH_3 = hash(<TH_2, cypher_2, rC_R>) in
	    let PRK_4x3m = PRK_3e2m in
	    event AcceptI(pk(skI), pkR, PRK_3e2m, PRK_4x3m);
	    let K_3m = hkdfexpand(PRK_4x3m, <TH_3, 'TagK_3m'>) in
	    let MAC_3 = senc(<TH_3, pk(skI), 'AD_3'>, K_3m) in
	    let Signed3 = sign(<pk(skI), TH_3, 'AD_3', MAC_3>, skI) in
	    let K_3ae = hkdfexpand(PRK_3e2m, <TH_3, 'TagK_3ae'>) in
	    out(<rC_R, senc(<pk(skI), Signed3, 'AD_3'>, K_3ae), 'AD_3'>); 0

let R(skR) =
	in(<mcorr, gA, rC_I, rAD>);
	new b;
	let gB = 'g'^b in
	let TH_2 = hash(<mcorr, gA, rC_I, rAD, rC_I, gB, 'C_R'>) in
	let PRK_2e = hkdfextract('null', gA^b) in
	let K_2e = hkdfexpand(PRK_2e, <TH_2, 'TagK_2e'>) in
	if mcorr = 'm3' then
	    let PRK_3e2m = PRK_2e in
	    let K_2m = hkdfexpand(PRK_3e2m, <TH_2, 'TagK_2m'>) in
	    let MAC_2 = senc(<TH_2, pk(skR), 'AD_2'>, K_2m) in
	    let Signed2 = sign(<pk(skR), TH_2, 'AD_2', MAC_2>, skR) in
	    let cypher_2 = senc(<pk(skR), Signed2, 'AD_2'>, K_2e) in
	    event DerivedR(pk(skR), PRK_3e2m);
	    out(<rC_I, gB, 'C_R', cypher_2>);
	    in(<'C_R', cypher_3, rAD_3>);
	    let TH_3 = hash(<TH_2, cypher_2, 'C_R'>) in
	    let PRK_4x3m = PRK_3e2m in
	    let K_3ae = hkdfexpand(PRK_3e2m, <TH_3, 'TagK_3ae'>) in
	    let plaintext_3 = sdec(cypher_3, K_3ae) in
	    let <pkI, Signed3, rAD_3> = plaintext_3 in
	    let K_3m = hkdfexpand(PRK_4x3m, <TH_3, 'TagK_3m'>) in
	    let MAC_3 = senc(<TH_3, pkI, rAD_3>, K_3m) in
	    if verify(Signed3, <pkI, TH_3, rAD_3, MAC_3>, pkI) = true then
	        event AcceptR(pkI, pk(skR), PRK_4x3m); 0


process:
    !(
        new skR; new skI; out(<pk(skR),pk(skI)>);
        event Honnest(pk(skR), 'Resp');
        event Honnest(pk(skI), 'Init');
        !(
            I2(skI) | R(skR)
        )
    )
end
