theory Needham_Schroeder_Key_Exchange_protocol
begin

functions: pk/1, aenc/2, adec/2
equations: adec(aenc(m,pk(sk)),sk)=m

let P(skA, pkB, pkS) =
  new Na;
  event OUT_I_1(aenc(<A, Na>, pkB));
  out(aenc(<A, Na>, pkB));
  in(cypher1);
  let mess1 = adec(cypher1, skB) in
  let <B, Nb> = mess1 in
  let message1 = aenc(<A, Kab, Na, Nb>, pkS) in
  event OUT_I_2(message1);
  out(message1);
  let message2 = aenc(<A, Kab>, pkB) in
  event OUT_I_3(message2);
  out(message2);
  event SessionBuiltA(A, B, Kab, Na, Nb);

let Q(skB, pkA, pkS) =
  in(cypher2);
  let mess2 = adec(cypher2, skS) in
  let <B, Kab, Na, Nb> = mess2 in
  let message3 = aenc(<A, Kab>, pkB) in
  event IN_R_1(message3);
  event SessionBuiltB(B, A, Kab, Na, Nb);
  let message4 = aenc(<Nb>, Kab) in
  event OUT_R_1(message4);
  out(message4);

process:
!(
  new skA; out(pk(skA)); event HonestA(pk(skA));
  !(
    new skB; out(pk(skB)); event HonestB(pk(skB));
    !(
      new skS; out(pk(skS)); event HonestS(pk(skS));
      (!P(skA, pkB, pkS) | !Q(skB, pkA, pkS))
    )
  )
)
end