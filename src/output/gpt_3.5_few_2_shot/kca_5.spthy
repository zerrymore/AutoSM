theory Needham_Schroeder_Public_Key_protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2
equations: adec(aenc(m,pk(sk)),sk)=m

let Initiation_A(A, B, Na, Kas, Kbs) =
  event OUT_Initiation_A(aenc(<A, B, Na, Kab>, pk(Kas)));
  out(aenc(<A, B, Na, Kab>, pk(Kas)));
  in(compound_message);
  let <enc_package1, enc_package2> = compound_message in
  let package1 = adec(enc_package1, sk(Kas)) in
  let package2 = adec(enc_package2, sk(Kbs)) in
  let <A, B, Na, Kab> = package1 in
  event IN_Server_Response_B(package1, package2);
  event SessionBuilt(A, B, Kab, Na);
  event Session(A, B, Kab, Na);
  out(aenc(<enc_package1, aenc(Na, Kab), Nb>, pk(Kab)));

let Server_Response_B(A, B, Na, Kab, Kas, Kbs) =
  event OUT_Server_Response_B(aenc(<A, B, Na, Kab>, pk(Kbs)));
  out(aenc(<A, B, Na, Kab>, pk(Kbs)));

let Response_B(A, B, Na, Kab, Nb) =
  in(enc_package1);
  let package1 = adec(enc_package1, sk(Kas)) in
  let <A, B, Na, Kab> = package1 in
  event IN_Response_B(package1);
  event SessionBuilt(A, B, Kab, Na);
  event Session(A, B, Kab, Na);
  out(aenc(<enc_package1, aenc(Na, Kab), Nb>, pk(Kab)));

let Acknowledgment_A(A, B, Na, Kab, Nb) =
  in(enc_package1);
  let package1 = adec(enc_package1, sk(Kbs)) in
  let <A, B, Na, Kab> = package1 in
  event IN_Acknowledgment_A(package1);
  event SessionBuilt(A, B, Kab, Na);
  event Session(A, B, Kab, Na);
  out(aenc(Nb, Kab));

process:
!(
  new A, B, Na, Kab, Kas, Kbs;
  event Honest(A);
  event Honest(B);
  !(
    !Initiation_A(A, B, Na, Kas, Kbs) |
    !Server_Response_B(A, B, Na, Kab, Kas, Kbs) |
    !Response_B(A, B, Na, Kab, Nb) |
    !Acknowledgment_A(A, B, Na, Kab, Nb)
  )
)
end