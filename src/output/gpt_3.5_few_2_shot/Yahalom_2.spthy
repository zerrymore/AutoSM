theory Needham_Schroeder_Key_Exchange_protocol
begin

functions: pk/1, aenc/2, adec/2
equations: adec(aenc(m,pk(sk)),sk)=m

let A_B(skA, pkB) =      
  new Na;
  event OUT_A_1(aenc(<A, Na>,pkB));
  out(aenc( <A,Na> ,pkB));  
  in(cypher);
  let mess = adec(cypher,skA) in
  let <=A,Na,Nb> = mess in
  event IN_A_2(A,Na,Nb,aenc(<A,Na,Nb>,pk(skA)));
  event OUT_A_2(aenc(<B,Kab,Na,Nb>,pk(Kbs)));
  out(aenc(<B,Kab,Na,Nb>,pk(Kbs)));
  event SessionBuiltA(pk(skA), Kab, Na, Nb);
  event SessionA(pk(skA), pkB, Na) 
  
let B_S(skB, pkS) =  
  in(cypher1);
  let mess1 = adec(cypher1,skB) in
  let <A,Na, =pkS> = mess1 in
  event IN_B_1(A,Na,aenc(<A,Na>,pk(skB)));
  new Nb;
  event OUT_B_1(aenc(<A,Kab,Na,Nb>,pkS));
  out(aenc(<A,Kab,Na,Nb>,pkS));
  in(cypher2);
  let mess2 = adec(cypher2,skB) in
  let =<B,Kab,Na,Nb> = mess2 in
  event IN_B_2(B,Kab,Na,Nb,aenc(<B,Kab,Na,Nb>,pk(Kbs)));
  event SessionBuiltB(pk(skB),A,Kab,Na,Nb);
  event SessionB(pkS,pk(skB),A)

let S_A(pkS, pkA) =  
  in(cypher1);
  let mess1 = adec(cypher1,pkS) in
  let <=B,Kab,Na,Nb> = mess1 in
  event IN_S_1(B,Kab,Na,Nb,aenc(<B,Kab,Na,Nb>,pkS));
  event OUT_S_1(aenc(<B,Kab,Na,Nb>,pkA));
  out(aenc(<B,Kab,Na,Nb>,pkA));
  event IN_S_2(A,Kab,aenc(<A,Kab>,pk(Kbs)));
  event OUT_S_2(aenc(<Nb>,Kab));
  out(aenc(<Nb>,Kab));
  event SessionBuiltS(pkS,pkA,pk(Kbs),B,Kab,Na,Nb);
  event SessionS(pkS,pkA,B)

let A_B_2(pkA, pk(Kbs)) =
  in(cypher1);
  let mess1 = adec(cypher1,pk(Kbs)) in
  let <=A,Kab> = mess1 in
  event IN_A_3(A,Kab,aenc(<A,Kab>,pk(Kbs)));
  in(cypher2);
  let mess2 = adec(cypher2,Kab) in
  let <=Nb> = mess2 in
  event IN_A_4(Nb,aenc(Nb,Kab));
  event SessionBuiltA_2(pkA,pk(Kbs),A,Kab,Nb);
  event SessionA_2(pkA,B,Kab)

process:
!(
  new skA; out(pk(skA)); event HonestA(pk(skA));
  !(
    new skB; out(pk(skB)); event HonestB(pk(skB));
    !(
      new pkS; out(pk(pkS)); event HonestS(pk(pkS));
      (!A_B(skA, pk(skB)) | !B_S(skB, pk(pkS)) | !S_A(pk(pkS), pk(skA)) | !A_B_2(pk(skA), pk(Kbs)))
    )
  )
)   
end