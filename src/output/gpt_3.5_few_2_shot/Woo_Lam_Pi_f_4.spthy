theory Woo_Lam_Pi_f_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let Alice(A, B, Kas, S) =
  event OUT_A_1(A);
  new Nb;
  event OUT_A_2(Nb);
  let msg = <A, B, Nb> in
  let enc_msg = senc(msg, Kas) in
  event OUT_A_3(enc_msg);
  out(enc_msg);
  in(enc_msg_bob);
  event IN_A_4(enc_msg_bob);
  out(enc_msg_bob)

let Bob(A, B, Kbs, S) =
  in(enc_msg);
  event IN_B_1(enc_msg);
  let msg = sdec(enc_msg, Kbs) in
  let <A_msg, B_msg, Nb_msg> = msg in
  event IN_B_2(A_msg, B_msg, Nb_msg);
  let new_msg = <A_msg, B_msg, Nb_msg, B, Nb> in
  let enc_new_msg = senc(new_msg, Kbs) in
  event OUT_B_3(enc_new_msg);
  out(enc_new_msg);
  in(enc_msg_server);
  event IN_B_4(enc_msg_server);
  out(enc_msg_server)

let Server(A, B, Kas, Kbs, S) =
  in(enc_msg);
  event IN_S_1(enc_msg);
  let msg = sdec(enc_msg, Kas) in
  let <A_msg, B_msg, Nb_msg> = msg in
  event IN_S_2(A_msg, B_msg, Nb_msg);
  let new_msg = <A_msg, B_msg, Nb_msg> in
  let enc_new_msg = senc(new_msg, Kbs) in
  event OUT_S_3(enc_new_msg);
  out(enc_new_msg)

process:
!(
  new A; out(A);
  new B; out(B);
  new Kas; out(Kas);
  new Kbs; out(Kbs);
  new S; out(S);
  (!Alice(A, B, Kas, S) | !Bob(A, B, Kbs, S) | !Server(A, B, Kas, Kbs, S))
)
end