theory CCITT_X509_V1_protocol
begin

functions: pk/1, sk/1, h/1, aenc/2, adec/2
equations: adec(aenc(m,pk(sk)),sk)=m

let Alice(SK_A, PK_B)=
  new Ta, Na, Xa, Ya;
  let msg = <A, Ta, Na, B, Xa, aenc(Ya, pk(PK_B)), aenc(h(<A, Ta, Na, B, Xa, aenc(Ya, pk(PK_B))>), sk(SK_A))> in
  event OUT_A(msg);
  out(msg);

let Bob(SK_B, PK_A)=
  in(msg);
  let <A, Ta, Na, B, Xa, enc_Ya, enc_hash> = msg in
  let Ya = adec(enc_Ya, sk(SK_B)) in
  let hash = adec(enc_hash, sk(SK_A)) in
  let expected_hash = h(<A, Ta, Na, B, Xa, enc_Ya>) in
  if hash = expected_hash then
    event IN_B(A, Ta, Na, B, Xa, Ya);
    event OUT_B(Na, Nb);
    out(Na, Nb)
  else
    event IN_B(A, Ta, Na, B, Xa, Ya);
    event IntegrityViolationB(A, Ta, Na, B, Xa, Ya)

process:
!(
  new SK_A, PK_A; out(PK_A); event HonestA(PK_A);
  !(
    new SK_B, PK_B; out(PK_B); event HonestB(PK_B);
    (!Alice(SK_A, PK_B) | !Bob(SK_B, PK_A))
  )
)
end