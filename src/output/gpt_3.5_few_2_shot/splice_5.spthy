theory SPLICE_AS_protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2, inc/1
equations: adec(aenc(m,pk(sk)),sk)=m

let P(C, S, N1, AS, pkS, skAS) =
  event OUT_C_AS(<C, S, N1>);
  out(<AS, aenc(<AS, C, N1, pkS>, skAS)>);

let Q(AS, C, N1, pkS, skC, T, L, pkC) =
  in(certificate);
  let <AS, C, N1, pkS> = adec(certificate, skAS) in
  event IN_AS_C(certificate);
  event OUT_AS_C(<AS, aenc(<AS, S, N1, pkC>, skAS)>);
  out(<AS, aenc(<AS, S, N1, pkC>, skAS)>);
  event SessionBuilt_C_S(C, S, T, L, pkC, pkS);

let R(S, C, N3, AS, pkC, skAS) =
  event OUT_S_AS(<S, C, N3>);
  out(<AS, aenc(<AS, S, N3, pkC>, skAS)>);

let S(AS, S, N3, pkC, skS) =
  in(certificate);
  let <AS, S, N3, pkC> = adec(certificate, skAS) in
  event IN_AS_S(certificate);
  event OUT_AS_S(<S, aenc(<S, inc(N2)>, pkC)>);
  out(<S, aenc(<S, inc(N2)>, pkC)>);
  event SessionBuilt_S_C(S, C, inc(N2));

process:
!(
  new skAS; out(pk(skAS));
  !(
    new skC; out(pk(skC));
    !(
      new skS; out(pk(skS));
      !(
        new pkS;
        (
          !P(C, S, N1, AS, pkS, skAS) |
          !Q(AS, C, N1, pkS, skC, T, L, pkC) |
          !R(S, C, N3, AS, pkC, skAS) |
          !S(AS, S, N3, pkC, skS)
        )
      )
    )
  )
)
end