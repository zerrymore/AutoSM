theory Needham_Schroeder_Symmetric_Key_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let S(Kas, Kbs) =
  in(<A, B, Na>);
  new Kab;
  let msg = senc(<Na, B, Kab, senc(<Kab, A>, Kbs)>, Kas) in
  event OUT_I_1(msg);
  out(msg);
  in(cypher);
  let <Nb, =Kab> = sdec(cypher, Kab) in
  event IN_I_2(Nb, senc(Nb, Kab));
  event SessionBuilt(A, B, Kab)

let A(Kas) =
  new Na;
  event OUT_A_1(<A, B, Na>);
  out(<A, B, Na>);
  in(cypher1);
  let msg1 = sdec(cypher1, Kas) in
  let <Kab, =A> = msg1 in
  event IN_A_2(Kab, senc(<Kab, A>, Kbs));
  in(cypher2);
  let Nb = sdec(cypher2, Kab) in
  event IN_A_3(Nb);
  event OUT_A_3(senc(Nb, Kab))

let B(Kbs) =
  in(cypher);
  let <Na, B, Kab, =cypher> = sdec(cypher, Kbs) in
  event IN_B_1(Na, B, Kab, senc(<Kab, A>, Kbs));
  event OUT_B_1(senc(Na, Kab));
  out(senc(Na, Kab));
  in(cypher2);
  let Nb = sdec(cypher2, Kab) in
  event IN_B_2(Nb);
  event SessionBuilt(A, B, Kab)

process:
!(
  new Kas, Kbs;
  !(
    (!S(Kas, Kbs) | !A(Kas)) | !B(Kbs)
  )
)
end