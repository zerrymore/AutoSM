theory Needham_Schroeder_Public_Key_protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2
equations: adec(aenc(m,pk(skA)),skA)=m

let Initiation_A(A, B, Na, Kas, Kbs) =
  event OUT_Initiation_A(aenc(<A, B, Na, Kab>, pk(Kas)));
  out(aenc(<A, B, Na, Kab>, pk(Kas)));
  in(cypher);
  let mess = adec(cypher, sk(Kas)) in
  let <A', B', Na', Kab'> = mess in
  event IN_Server_Response_B(aenc(<A', B', Na', Kab'>, pk(Kbs)));

let Server_Response_B(A, B, Na, Kab, Kas, Kbs) =
  event OUT_Server_Response_B(aenc(<A, B, Na, Kab>, pk(Kbs)));
  out(aenc(<A, B, Na, Kab>, pk(Kbs)));
  event OUT_Server_Response_A(aenc(<A, B, Na, Kab>, pk(Kas)));

let Response_B(A, B, Na, Kab, Nb) =
  let package1 = aenc(<A, B, Na, Kab>, pk(Kas)) in
  let package2 = aenc(Na, Kab) in
  event OUT_Response_B(aenc(<package1, package2, Nb>, pk(Kab)));
  out(aenc(<package1, package2, Nb>, pk(Kab)));
  in(cypher);
  let mess = adec(cypher, sk(Kab)) in
  let <Nb'> = mess in
  event IN_Final_Acknowledgment_A(aenc(Nb', Kab));

let Final_Acknowledgment_A(Nb, Kab) =
  event OUT_Final_Acknowledgment_A(aenc(Nb, Kab));
  out(aenc(Nb, Kab));

process:
!(
  new A, B, Na, Kas, Kbs, Kab;
  !(
    Initiation_A(A, B, Na, Kas, Kbs) |
    Server_Response_B(A, B, Na, Kab, Kas, Kbs) |
    Response_B(A, B, Na, Kab, Nb) |
    Final_Acknowledgment_A(Nb, Kab)
  )
)
end