theory Needham_Schroeder_Public_Key_protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2
equations: adec(aenc(m,pk(sk)),sk)=m

let Initiation_A(A, B, Na, Kas) = 
  event OUT_I_1(aenc(<A, B, Na, Kab>, Kas));
  out(aenc(<A, B, Na, Kab>, Kas));
  in(package);
  let <package1, package2> = package in
  event IN_I_2(package1, package2);
  event SessionBuilt_A(A, B, Na, Kab);
  event Session_A(A, B, Na, Kab)

let Server_Response_B(package1, package2, Kbs) =
  event OUT_R_1(package1, package2);
  out(package1, package2);
  in(B_response);
  let <package1_A, package2_A, Nb> = B_response in
  event IN_R_2(package1_A, package2_A, Nb);
  event SessionBuilt_B(A, B, Na, Kab, Nb);
  event Session_B(A, B, Na, Kab, Nb)

let Final_Acknowledgment_A(package1_A, package2_A, Nb) =
  event OUT_A_1(package1_A, package2_A, Nb);
  out(package1_A, package2_A, Nb);
  in(ack);
  let ack_B = adec(ack, Kab) in
  event IN_A_2(ack_B);
  event SessionVerified_A(A, B, Na, Kab, Nb)

process:
!(
  new A, B, Na, Kas, Kbs, Kab;
  event Honest_A(A);
  event Honest_B(B);
  !(
    !Initiation_A(A, B, Na, Kas) |
    !Server_Response_B(<A, B, Na, Kab>, aenc(<A, Na>, Kas), Kbs) |
    !Final_Acknowledgment_A(aenc(<B, Na, Nb>, Kab), aenc(Na, Kab), Nb)
  )
)
end