theory Needham_Schroeder_Symmetric_Key_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let P(kas, kbs, I, A, B) = 
  new Na;
  event OUT_I_1(senc(<Na, I, A, B>, kas));
  out(senc(<Na, I, A, B>, kas));
  in(cypher1);
  let mess1 = sdec(cypher1, kas) in
  let <Nb, =I, =A, =B> = mess1 in
  event IN_I_2(Nb, senc(<Nb, I, A, B>, kbs));
  event OUT_I_2(senc(<Nb, I, A, B>, kbs));
  out(senc(<Nb, I, A, B>, kbs));
  event SessionBuiltA(kab, I, Na);
  event SessionA(kab, I, A, B);

let Q(kas, kbs) = 
  in(cypher2);
  let mess2 = sdec(cypher2, kas) in
  let <=Na, kab> = mess2 in
  event IN_R_1(Na, senc(<Na, kab>, kas));
  event OUT_R_1(senc(<Na, kab>, kas));
  out(senc(<Na, kab>, kas));
  in(cypher3);
  let mess3 = sdec(cypher3, kbs) in
  let <=Nb, kab> = mess3 in
  event IN_R_2(Nb, senc(<Nb, kab>, kbs));
  event SessionBuiltB(kab, I, Nb);
  event SessionB(kab, I, A, B);

process:
!(
  new kas, kbs, I, A, B;
  !(
    (!P(kas, kbs, I, A, B) | !Q(kas, kbs))
  )
)
end