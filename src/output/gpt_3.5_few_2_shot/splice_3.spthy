theory SPLICE_AS_protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2, inc/1
equations: adec(aenc(m,pk(sk)),sk)=m

let P(C, S, N1, AS, pkS, skAS) =      
  event OUT_1(<C, S, N1>);
  out(<AS, {AS, C, N1, pkS}skAS>);
  in(certificate);
  let cert = adec(certificate, skAS) in
  let <=AS, <=C, <=N1, <=pkS> = cert in
  event IN_2(cert);
  event SessionBuilt(C, S, pkS, N1);
  event Session(C, S, N1, pkS)
  
let Q(C, S, T, L, pkS, skC, N2) =  
  event OUT_3(<C, S, {C, T, L, {N2}pkS}skC>);
  out(<C, S, {C, T, L, {N2}pkS}skC>);
  in(certificate);
  let cert = adec(certificate, skC) in
  let <=AS, <=S, <=N3, <=pkC> = cert in
  event IN_4(cert);
  event OUT_5(<S, C, N3>);
  out(<S, C, N3>);
  in(response);
  let response = adec(response, skAS) in
  let <=AS, <=S, <=N3, <=pkC> = response in
  event IN_6(response);
  event SessionBuilt(S, C, pkC, N3);
  event Session(S, C, pkC)

process:
!(
  new skC; out(pk(skC)); event HonestC(pk(skC));
  !(
    new skAS; out(pk(skAS)); event HonestAS(pk(skAS));
    !(
      new pkS; out(pk(pkS)); event HonestS(pk(pkS));
      (!P(C, S, N1, AS, pkS, skAS) | !Q(C, S, T, L, pkS, skC, N2))
    )
  )
)   
end