theory Asymmetric_Key_Exchange_Protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2
equations: adec(aenc(m, pk(sk)), sk) = m

let Alice(pubB, skA) =
  new Na;
  event OUT_A_1(aenc(<A, Na>, pubB));
  out(aenc(<A, Na>, pubB));
  in(cypher1);
  let mess1 = adec(cypher1, skA) in
  let <xNa, =pubB> = mess1 in
  event IN_A_2(xNa, aenc(<xNa, Na>, pk(skA)));
  new Nb;
  event OUT_A_2(aenc(<xNa, Nb>, pk(pubA)));
  out(aenc(<xNa, Nb>, pk(pubA)));
  in(cypher2);
  let mess2 = adec(cypher2, skA) in
  let <=Na, xNb> = mess2 in
  event IN_A_3(Na, xNb, aenc(<Na, xNb>, pk(pubA)));
  event OUT_A_3(aenc(xNb, pubB));
  out(aenc(xNb, pubB))

let Bob(pubA, skB) =
  in(cypher1);
  let mess1 = adec(cypher1, skB) in
  let <=A, Na> = mess1 in
  event IN_B_1(A, Na, aenc(<A, Na>, pk(skB)));
  new Nb;
  event OUT_B_1(aenc(<Na, Nb>, pk(pubA)));
  out(aenc(<Na, Nb>, pk(pubA)));
  in(cypher2);
  let mess2 = adec(cypher2, skB) in
  let <=Na, xNb> = mess2 in
  event IN_B_2(Na, xNb, aenc(<Na, xNb>, pk(pubA)));
  event OUT_B_2(aenc(xNb, pubB));
  out(aenc(xNb, pubB))

process:
!(
  new pubA, skA; out(pubA); event HonestA(pubA);
  !(
    new pubB, skB; out(pubB); event HonestB(pubB);
    (!Alice(pubB, skA) | !Bob(pubA, skB))
  )
)
end