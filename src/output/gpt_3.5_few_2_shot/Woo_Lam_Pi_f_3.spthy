theory Woo_Lam_Pi_f_protocol
begin

functions: id/1, nonce/0, encrypt/3, decrypt/3
equations: decrypt(encrypt(m, k1, k2), k1, k2) = m

let Alice(S, Kas, idA, idB) =
  event OUT_A_1(idA);
  let Nb = nonce in
  event OUT_A_2(Nb);
  let msg = encrypt(<idA, idB, Nb>, Kas, S) in
  event OUT_A_3(msg);
  out(msg);
  in(msg2);
  let decryptedMsg = decrypt(msg2, Kas, S) in
  let <idA2, idB2, Nb2> = decryptedMsg in
  event IN_A_4(idA2, idB2, Nb2);
  0

let Bob(S, Kbs, idB) =
  in(msg);
  let decryptedMsg = decrypt(msg, Kbs, S) in
  let <idA, idB2, Nb> = decryptedMsg in
  event IN_B_1(idA, idB2, Nb);
  event OUT_B_2(idB, idA, idB2, Nb);
  let newMsg = encrypt(<idA, idB, Nb>, Kbs, S) in
  event OUT_B_3(newMsg);
  out(newMsg);
  0

let Server(S, Kas, Kbs) =
  in(msg);
  let decryptedMsg = decrypt(msg, Kas, S) in
  let <idA, idB, Nb> = decryptedMsg in
  event IN_S_1(idA, idB, Nb);
  let newMsg = encrypt(<idA, idB, Nb>, Kbs, S) in
  event OUT_S_2(newMsg);
  out(newMsg);
  0

process:
!(
  new S, Kas, Kbs;
  let idA = id(S) in
  let idB = id(S) in
  (!Alice(S, Kas, idA, idB) | !Bob(S, Kbs, idB) | !Server(S, Kas, Kbs))
)
end