theory Needham_Schroeder_Public_Key_protocol
begin

functions: pk/1, aenc/2, adec/2
equations: adec(aenc(m,pk(sk)),sk)=m

let Initiation_A(A, B, Na, Kas, Kbs) =
  event OUT_I(A, B, Na);
  out(aenc(<A, B, Na, Kab>, Kas));
  out(aenc(<A, B, Na, Kab>, Kbs));
  in(cypher);
  let mess = adec(cypher, Kbs) in
  let <package1, package2, Nb> = mess in
  event IN_B(package1, package2, Nb);
  event SessionBuilt_A(A, B, Na, Kab);
  event Session_A(A, B, Na, Kab);

let Server(Kas, Kbs) =
  in(cypher1);
  let mess1 = adec(cypher1, Kas) in
  let <A, B, Na, Kab> = mess1 in
  event IN_I(A, B, Na);
  event SessionBuilt_A(A, B, Na, Kab);
  event SessionBuilt_B(A, B, Na, Kab);
  event Session_A(A, B, Na, Kab);
  event Session_B(A, B, Na, Kab);
  let package1 = aenc(<A, B, Na, Kab>, Kas) in
  let package2 = aenc(<A, B, Na, Kab>, Kbs) in
  out(package1, package2);
  let package1_A = aenc(package1, Kas) in
  let package2_A = aenc(Na, Kab) in
  let package3_A = aenc(Nb, Kab) in
  event OUT_A(package1_A, package2_A, package3_A);

let Response_B(Kbs, Kab) =
  in(package1_A, package2_A, package3_A);
  let package1 = adec(package1_A, Kbs) in
  let Na = adec(package2_A, Kab) in
  let Nb = adec(package3_A, Kab) in
  event IN_A(package1, Na, Nb);
  event SessionBuilt_A(A, B, Na, Kab);
  event SessionBuilt_B(A, B, Na, Kab);
  event Session_A(A, B, Na, Kab);
  event Session_B(A, B, Na, Kab);
  out(aenc(Nb, Kab));
  event OUT_B(Nb);

let Final_A(Kab) =
  in(cypher);
  let Nb = adec(cypher, Kab) in
  event IN_B(Nb);
  event SessionBuilt_A(A, B, Na, Kab);
  event SessionBuilt_B(A, B, Na, Kab);
  event Session_A(A, B, Na, Kab);
  event Session_B(A, B, Na, Kab);
  out(aenc(Nb, Kab));
  event OUT_A(Nb);

process:
!(
  new Kas, Kbs;
  !(
    new A, B, Na, Kab;
    !(
      !Initiation_A(A, B, Na, Kas, Kbs) |
      !Server(Kas, Kbs)
    ) |
    !Response_B(Kbs, Kab)
  ) |
  !Final_A(Kab)
)
end