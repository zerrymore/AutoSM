theory Denning_Sacco_protocol
begin

functions: kas/1, kbs/1, aenc/2, adec/2
equations: adec(aenc(m,pk(sk)),sk)=m

let Alice(Kas, Kbs) =
  new T;
  event OUT_I_1(aenc(<B, Kab, T>, Kas));
  out(aenc(<B, Kab, T>, Kas));
  in(cypher);
  let mess = adec(cypher, Kbs) in
  let <Kab, A, T> = mess in
  event IN_I_2(Kab, A, T, aenc(<Kab, A, T>, Kbs));
  event SessionBuiltA(Kab, A, B, T);
  event SessionA(A, B, Kab)

let KDC(Kas, Kbs) =
  in(cypher1);
  let mess1 = adec(cypher1, Kas) in
  let <A, B> = mess1 in
  new Kab;
  new T;
  event IN_R_1(A, B, aenc(<B, Kab, T>, Kas));
  event OUT_R_1(aenc(<Kab, A, T>, Kbs));
  out(aenc(<Kab, A, T>, Kbs));
  event SessionBuiltKDC(Kab, A, B, T)

let Bob(Kbs) =
  in(cypher2);
  let mess2 = adec(cypher2, Kbs) in
  let <Kab, A, T> = mess2 in
  event IN_R_2(Kab, A, T, aenc(<Kab, A, T>, Kbs));
  event SessionBuiltB(Kab, A, B, T);
  event SessionB(A, B, Kab)

process:
!(
  new Kas; out(Kas); event HonestKDC(Kas);
  !(
    new Kbs; out(Kbs); event HonestB(Kbs);
    (!Alice(Kas, Kbs) | !KDC(Kas, Kbs) | !Bob(Kbs))
  )
)
end