theory CCITT_X509_V1_protocol
begin

functions: pk/1, sk/1, h/1, aenc/2, adec/2, sign/2, verify/2
equations: verify(sign(m, sk(s)), pk(s)) = m

let Alice(Ta, Na, Xa, Ya, pkB, skA) =
  let encrypted_part = aenc(Ya, pkB) in
  let signed_part = sign(<Ta, Na, Xa, encrypted_part>, skA) in
  let message = <A, Ta, Na, B, Xa, encrypted_part, signed_part> in
  event OUT_A(message);
  out(message);

let Bob(pkA, skB) =
  in(message);
  let <A, Ta, Na, B, Xa, encrypted_part, signed_part> = message in
  let decrypted_part = adec(encrypted_part, skB) in
  if verify(<Ta, Na, B, Xa, encrypted_part>, signed_part) then
    event IN_B(A, Ta, Na, B, Xa, decrypted_part);
    event SessionBuilt(pkA, pkB, A, B)
  else
    event IN_B_Failure(A, Ta, Na, B, Xa, encrypted_part, signed_part);
    0

process:
!(
  let pkA = pk(A);
  let pkB = pk(B);
  let skA = sk(A);
  let skB = sk(B);
  (!Alice(Ta, Na, Xa, Ya, pkB, skA) | !Bob(pkA, skB))
)
end