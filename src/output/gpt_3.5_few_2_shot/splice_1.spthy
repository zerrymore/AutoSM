theory SPLICE_AS_protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2, inc/1
equations: adec(aenc(m,pk(sk)),sk)=m

let P(C, S, N1, AS, pkS, skAS) =      
  event OUT_1(<C, S, N1>);
  out(<AS, {AS, C, N1, pkS}skAS>);
  in(cert);
  let <AS', <AS'', C', N1', pkS'>> = cert in
  event IN_2(cert);
  event SessionBuiltC(C, S, N1, AS, pkS, skAS);
  event SessionC(C, S, N1, AS, pkS, skAS) 
  
let Q(C, S, T, L, N2, pkC, skS) =  
  event IN_3(<C, S, {C, T, L, {N2}pkS}skC>);
  event SessionBuiltS(C, S, T, L, N2, pkC, skS);
  event SessionS(C, S, T, L, N2, pkC, skS);
  new N3;
  event OUT_4(<S, C, N3>);
  out(<AS, {AS, S, N3, pkC}skAS>);
  in(cert);
  let <AS', <AS'', S', N3', pkC'>> = cert in
  event IN_5(cert);
  event SessionBuiltS(C, S, T, L, N2, pkC, skS);
  event SessionS(C, S, T, L, N2, pkC, skS);
  new N2';
  event OUT_6(<S, C, {S, inc(N2)}pkC>);
  out(<S, C, {S, inc(N2)}pkC>);
  event SessionBuiltS(C, S, T, L, N2, pkC, skS);
  event SessionS(C, S, T, L, N2, pkC, skS)

process:
!(
  new skC; out(pk(skC)); event HonestC(pk(skC));
  !(
    new skAS; out(pk(skAS)); event HonestAS(pk(skAS));
    !(
      new skS; out(pk(skS)); event HonestS(pk(skS));
      (!P(C, S, N1, AS, pkS, skAS) | !Q(C, S, T, L, N2, pkC, skS))
    )
  )
)   
end