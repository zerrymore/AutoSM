theory SPLICE_AS_protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2, sign/2, verify/3
equations: verify(m, sign(m, sk(k)), pk(k)) = true

let P(C, S, N1) =
  event OUT_1(<C, S, N1>);
  out(<C, S, N1>);
  in(cert1);
  let <AS, <AS, C, N1, pk(S)>> = cert1 in
  event IN_2(cert1);
  event OUT_2(<AS, cert1>);
  out(<AS, cert1>);
  in(msg1);
  let <C, S, <C, T, L, <N2>pk(S)>> = msg1 in
  event IN_3(msg1);
  event OUT_3(<C, S, msg1>);
  out(<C, S, msg1>);
  in(cert2);
  let <S, <AS, S, N3, pk(C)>> = cert2 in
  event IN_4(cert2);
  event OUT_4(<S, cert2>);
  out(<S, cert2>);
  in(msg2);
  let <S, C, <S, inc(N2)>pk(C)> = msg2 in
  event IN_5(msg2);
  event SessionBuilt(C, S, N1, N2);
  event Session(C, S, T, L, N2)

let Q(AS, C, N1) =
  in(msg1);
  let <C, S, N1> = msg1 in
  event IN_1(msg1);
  event OUT_1(<AS, <AS, C, N1, pk(S)>>);
  out(<AS, <AS, C, N1, pk(S)>>);
  in(cert1);
  let <AS, <AS, C, N1, pk(S)>> = cert1 in
  event IN_2(cert1);
  event OUT_2(<AS, cert1>);
  out(<AS, cert1>);
  in(msg1);
  let <C, S, <C, T, L, <N2>pk(S)>> = msg1 in
  event IN_3(msg1);
  event SessionBuilt(C, S, N1, N2);
  event Session(C, S, T, L, N2);
  event OUT_3(<C, S, msg1>);
  out(<C, S, msg1>)

let R(S, C, N3) =
  in(msg2);
  let <S, C, N3> = msg2 in
  event IN_4(msg2);
  event OUT_4(<S, <AS, S, N3, pk(C)>>);
  out(<S, <AS, S, N3, pk(C)>>);
  in(cert2);
  let <S, <AS, S, N3, pk(C)>> = cert2 in
  event IN_5(cert2);
  event OUT_5(<S, cert2>);
  out(<S, cert2>);
  in(msg2);
  let <S, C, <S, inc(N2)>pk(C)> = msg2 in
  event IN_5(msg2);
  event SessionBuilt(C, S, N1, N2);
  event Session(C, S, T, L, N2);
  event OUT_6(<S, C, <S, inc(N2)>pk(C)>);
  out(<S, C, <S, inc(N2)>pk(C)>)

process:
!(
  new C; new S; new AS;
  !(
    new N1; !P(C, S, N1) | !Q(AS, C, N1)
  ) |
  !(
    new N3; !R(S, C, N3)
  )
)
end