theory Alice_Bob_Protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2
equations: adec(aenc(m, pk(sk)), sk) = m

let Alice(pubB, skA) =
  new Na;
  let message = <A, Na> in
  let encryptedMessage = aenc(message, pubB) in
  event OUT_Alice_1(encryptedMessage);
  out(encryptedMessage);
  in(encryptedNonce);
  let decryptedNonce = adec(encryptedNonce, skA) in
  let receivedNa = proj1(decryptedNonce) in
  let Nb = fresh in
  let message2 = <receivedNa, Nb> in
  let encryptedMessage2 = aenc(message2, pubA) in
  event OUT_Alice_2(encryptedMessage2);
  out(encryptedMessage2);
  in(encryptedMessage3);
  let decryptedMessage3 = adec(encryptedMessage3, skA) in
  let receivedNa2 = proj1(decryptedMessage3) in
  let receivedNb = proj2(decryptedMessage3) in
  event IN_Alice(receivedNa2, receivedNb);
  event OUT_Alice_3(aenc(receivedNb, pubB));
  out(aenc(receivedNb, pubB))

let Bob(pubA, skB) =
  in(encryptedMessage);
  let decryptedMessage = adec(encryptedMessage, skB) in
  let receivedA = proj1(decryptedMessage) in
  let receivedNa = proj2(decryptedMessage) in
  event IN_Bob(receivedA, receivedNa);
  let Nb = fresh in
  let message = <receivedNa, Nb> in
  let encryptedMessage2 = aenc(message, pubA) in
  event OUT_Bob(encryptedMessage2);
  out(encryptedMessage2);
  in(encryptedMessage3);
  let decryptedMessage3 = adec(encryptedMessage3, skB) in
  let receivedNb = decryptedMessage3 in
  event IN_Bob_2(receivedNb)

process:
!(
  new pubA, skA; event Honest_Alice(pubA, skA);
  !(
    new pubB, skB; event Honest_Bob(pubB, skB);
    (!Alice(pubB, skA) | !Bob(pubA, skB))
  )
)
end