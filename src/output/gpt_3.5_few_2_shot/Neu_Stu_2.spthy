theory Needham_Schroeder_Public_Key_protocol
begin

functions: pk/1, aenc/2, adec/2
equations: adec(aenc(m,pk(sk)),sk)=m

let Initial_Request_A(skA, pkB) =      
  new Na;
  event OUT_I_1(<A, Na>);
  out(aenc(<A, Na>, pkB));
  in(cypher);
  let mess = adec(cypher, skA) in
  let <B, Na, Tb> = mess in
  event IN_I_2(<B, Na, Tb>);
  new Nb;
  event OUT_I_2(<B, Nb>);
  out(aenc(<B, Nb>, pkB));
  event SessionBuilt_A(skA, pkB, Na, Nb);
  event Session_A(skA, pkB, Na)

let Request_Forwarding_B(skB, pkS, Kbs, Kas) =  
  in(cypher1);
  let mess1 = adec(cypher1, skB) in
  let <A, Na> = mess1 in
  event IN_R_1(<A, Na>);
  new Tb;
  event OUT_R_1(aenc(<A, Na, Tb>, Kbs));
  out(aenc(<A, Na, Tb>, Kbs));
  event IN_R_2(<B, Nb>);
  in(cypher2);
  let mess2 = adec(cypher2, skB) in
  let <A, Kab, Tb> = mess2 in
  event IN_R_3(<A, Kab, Tb>);
  event OUT_R_2(aenc(<A, Kab, Tb>, Kas));
  out(aenc(<A, Kab, Tb>, Kas));
  event OUT_R_3(Nb);
  out(Nb);
  event SessionBuilt_B(skB, pkS, A, Na, Nb);
  event Session_B(pkS, skB, A)

let Server_Response_S(pkA, skB, Kas, Kbs) =
  in(cypher1);
  let mess1 = adec(cypher1, Kas) in
  let <B, Na, Tb> = mess1 in
  event IN_S_1(<B, Na, Tb>);
  new Kab;
  event OUT_S_1(aenc(<B, Na, Kab, Tb>, Kas));
  out(aenc(<B, Na, Kab, Tb>, Kas));
  event OUT_S_2(aenc(<A, Kab, Tb>, Kbs));
  out(aenc(<A, Kab, Tb>, Kbs));
  event OUT_S_3(Nb);
  out(Nb);
  event SessionBuilt_S(pkA, skB, B, Na, Kab, Tb)

let Transmission_to_B(skA, pkB, Kab) =
  in(cypher);
  let mess = adec(cypher, Kab) in
  let <B, Nb> = mess in
  event IN_T_1(<B, Nb>);
  event OUT_T_1(aenc(<B, Nb>, Kab));
  out(aenc(<B, Nb>, Kab));
  event SessionBuilt_T(skA, pkB, B, Nb)

let First_Message_Exchange_A(skA, pkB, Kab) =
  in(cypher);
  let mess = adec(cypher, Kab) in
  let <B, Nb> = mess in
  event IN_F_1(<B, Nb>);
  event OUT_F_1(aenc(<B, Nb>, Kab));
  out(aenc(<B, Nb>, Kab));
  event OUT_F_2(aenc(Ma, Kab));
  out(aenc(Ma, Kab));
  event SessionBuilt_F(skA, pkB, B, Nb)

let Response_B(skB, pkA, Kab) =
  in(cypher);
  let mess = adec(cypher, Kab) in
  let Ma = mess in
  event IN_R(<B, Nb>);
  event OUT_R(aenc(Mb, Kab));
  out(aenc(Mb, Kab));
  event OUT_R_2(aenc(Ma, Kab));
  out(aenc(Ma, Kab));
  event SessionBuilt_R(skB, pkA)

let Final_Acknowledgment_A(skA, pkB, Kab) =
  in(cypher);
  let mess = adec(cypher, Kab) in
  let Mb = mess in
  event IN_A(<B, Nb>);
  event OUT_A(aenc(Mb, Kab));
  out(aenc(Mb, Kab));
  event SessionBuilt_Ack(skA, pkB)

process:
!(
  new skA; out(pk(skA)); event Honest_A(pk(skA));
  !(
    new skB; out(pk(skB)); event Honest_B(pk(skB));
    !(
      new pkS; out(pk(pkS)); event Honest_S(pk(pkS));
      let Kbs = generate_key();
      let Kas = generate_key();
      (!Initial_Request_A(skA, pkB) | !Request_Forwarding_B(skB, pkS, Kbs, Kas) | !Server_Response_S(pkA, skB, Kas, Kbs) | !Transmission_to_B(skA, pkB, Kab) | !First_Message_Exchange_A(skA, pkB, Kab) | !Response_B(skB, pkA, Kab) | !Final_Acknowledgment_A(skA, pkB, Kab))
    )
  )
)   
end