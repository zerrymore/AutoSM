theory Needham_Schroeder_Symmetric_Key_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let A(A, B, Na, Kas, Kbs) =
  event OUT_I_1(senc(<A, B, Na>, Kas));
  event OUT_I_2(senc(<Na, B, senc(<Kab, A>, Kbs)>, Kas));
  out(senc(<A, B, Na>, Kas));
  out(senc(<Na, B, senc(<Kab, A>, Kbs)>, Kas));
  in(cypher);
  let mess = sdec(cypher, Kas) in
  let <=Nb, Kab> = mess in
  event IN_I_3(Nb, Kab);
  event OUT_I_4(senc(Nb, Kab));
  out(senc(Nb, Kab));
  in(cypher2);
  let mess2 = sdec(cypher2, Kab) in
  let <=Nb2, Kab2> = mess2 in
  event IN_I_5(Nb2, Kab2);
  0

let S(A, B, Na, Kas, Kbs) =
  in(cypher);
  let <=A, B, Na> = sdec(cypher, Kas) in
  event IN_R_1(A, B, Na);
  new Kab;
  event OUT_R_2(senc(<Na, B, Kab, senc(<Kab, A>, Kbs)>, Kas));
  out(senc(<Na, B, Kab, senc(<Kab, A>, Kbs)>, Kas));
  in(cypher2);
  let mess2 = sdec(cypher2, Kbs) in
  let <=Kab, A> = mess2 in
  event IN_R_3(Kab, A);
  0

let B(A, B, Na, Kas, Kbs) =
  in(cypher);
  let mess = sdec(cypher, Kas) in
  let <=Na, B, Kab, cypher2> = mess in
  event IN_R_2(Na, B, Kab, cypher2);
  event OUT_R_4(senc(Na, Kab));
  out(senc(Na, Kab));
  in(cypher3);
  let mess3 = sdec(cypher3, Kab) in
  let <=Nb, Kab> = mess3 in
  event IN_R_5(Nb, Kab);
  0

process:
!(
  new A, B, Na, Kas, Kbs;
  out(A); out(B); out(Na); out(Kas); out(Kbs);
  (!A(A, B, Na, Kas, Kbs) | !S(A, B, Na, Kas, Kbs) | !B(A, B, Na, Kas, Kbs))
)
end