theory Woo_Lam_Pi_f_protocol
begin

functions: id/1, encrypt/2, decrypt/2
equations: decrypt(encrypt(m, k), k) = m

let Alice(idA, idB, Kas, Kbs) =
  event OUT_A_1(idA);
  event OUT_A_2(Nb);
  let message = <idA, idB, Nb> in
  let encrypted_message = encrypt(message, Kas) in
  event OUT_A_3(encrypted_message);
  out(encrypted_message);
  in(encrypted_message_B);
  let decrypted_message_B = decrypt(encrypted_message_B, Kbs) in
  event IN_A_1(decrypted_message_B);
  out(decrypted_message_B);

let Bob(idB, Kas, Kbs) =
  in(encrypted_message_A);
  let decrypted_message_A = decrypt(encrypted_message_A, Kas) in
  event IN_B_1(decrypted_message_A);
  event OUT_B_1(decrypted_message_A);
  let message_B = <decrypted_message_A, idB, Nb> in
  let encrypted_message_B = encrypt(message_B, Kbs) in
  event OUT_B_2(encrypted_message_B);
  out(encrypted_message_B);
  in(encrypted_message_S);
  let decrypted_message_S = decrypt(encrypted_message_S, Kbs) in
  event IN_B_2(decrypted_message_S);
  out(decrypted_message_S);

let Server(Kas, Kbs) =
  in(encrypted_message_A);
  let decrypted_message_A = decrypt(encrypted_message_A, Kas) in
  event IN_S_1(decrypted_message_A);
  let message_S = <decrypted_message_A, idB, Nb> in
  let encrypted_message_S = encrypt(message_S, Kbs) in
  event OUT_S_1(encrypted_message_S);
  out(encrypted_message_S);
  in(decrypted_message_B);
  event IN_S_2(decrypted_message_B);
  out(decrypted_message_B);

process:
!(
  new Kas, Kbs;
  let idA = id(Kas);
  let idB = id(Kbs);
  event HonestA(idA);
  event HonestB(idB);
  !(
    !Alice(idA, idB, Kas, Kbs) |
    !Bob(idB, Kas, Kbs) |
    !Server(Kas, Kbs)
  )
)
end