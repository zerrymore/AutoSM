theory CCITT_X509_V1_protocol
begin

functions: pk/1, sk/1, h/1, aenc/2, adec/2, senc/2, sdec/2
equations: adec(aenc(m,pk(sk)),sk)=m, sdec(senc(m,sk),sk)=m

let Alice(SK(A), PK(B)) =
  new Ta, Na, Xa, Ya;
  let encrypted_part = aenc(Ya, PK(B)) in
  let signed_part = senc(h(<A, Ta, Na, B, Xa, encrypted_part>), SK(A)) in
  event OUT_Alice(<A, Ta, Na, B, Xa, encrypted_part, signed_part>);
  out(<A, Ta, Na, B, Xa, encrypted_part, signed_part>);

let Bob(SK(B), PK(A)) =
  in(message);
  let <A, Ta, Na, B, Xa, encrypted_part, signed_part> = message in
  let decrypted_signed_part = sdec(signed_part, PK(A)) in
  let expected_hash = h(<A, Ta, Na, B, Xa, encrypted_part>) in
  if decrypted_signed_part = expected_hash then
    let decrypted_encrypted_part = adec(encrypted_part, PK(B)) in
    event IN_Bob(A, Ta, Na, B, Xa, decrypted_encrypted_part);
    out(decrypted_encrypted_part)
  else
    event IN_Bob(A, Ta, Na, B, Xa, "Invalid message");

process:
!(
  new SK(A), PK(A); out(PK(A));
  new SK(B), PK(B); out(PK(B));
  (!Alice(SK(A), PK(B)) | !Bob(SK(B), PK(A)))
)
end