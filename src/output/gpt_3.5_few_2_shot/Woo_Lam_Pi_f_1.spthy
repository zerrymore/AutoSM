theory Woo_Lam_Pi_f_protocol
begin

functions: id/1, nonce/1, senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let Alice(A, B, Kas, S) =
  event OUT_A_1(A);
  new Nb;
  event OUT_A_2(Nb);
  let mess = senc(<A, B, Nb>, Kas) in
  event OUT_A_3(mess);
  out(mess);
  in(mess2);
  event IN_A_4(mess2);
  let <=A, B, Nb> = sdec(mess2, Kas) in
  event SessionBuiltA(A, B, Nb);

let Bob(A, B, Kbs, S) =
  in(mess1);
  event IN_B_1(mess1);
  let mess1_dec = sdec(mess1, Kbs) in
  event IN_B_2(mess1_dec);
  let <=A, B, Nb> = mess1_dec in
  event OUT_B_3(mess1);
  out(mess1);
  in(mess3);
  event IN_B_4(mess3);
  let mess3_dec = sdec(mess3, Kbs) in
  event IN_B_5(mess3_dec);
  let <=A, B, Nb> = mess3_dec in
  event SessionBuiltB(A, B, Nb);

let Server(S, Kas, Kbs) =
  in(mess2);
  event IN_S_1(mess2);
  let mess2_dec = sdec(mess2, Kas) in
  event IN_S_2(mess2_dec);
  let <=A, B, Nb> = mess2_dec in
  event OUT_S_3(mess2);
  out(mess2);
  new mess4;
  event OUT_S_4(mess4);
  let mess4_enc = senc(<A, B, Nb>, Kbs) in
  event OUT_S_5(mess4_enc);
  out(mess4_enc);
  event SessionBuiltS(A, B, Nb);

process:
!(
  new A; event HonestA(A);
  new B; event HonestB(B);
  new S; event HonestS(S);
  let Kas = nonce(A);
  let Kbs = nonce(B);
  (!Alice(A, B, Kas, S) | !Bob(A, B, Kbs, S) | !Server(S, Kas, Kbs))
)
end