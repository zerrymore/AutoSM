theory Needham_Schroeder_protocol
begin

functions: id/1, nonce/0, sk/1, pk/1, aenc/2, adec/2
equations: adec(aenc(m, pk(sk)), sk) = m

let Initiation_A(A, B, Na) =
  event OUT_A(A, B, Na);
  out(aenc(<A, B, Na, sk(A, B)>, pk(sk(S, A))));

let Server(S, A, B, Na) =
  let Kab = nonce;
  let package1 = aenc(<A, B, Na, Kab>, pk(sk(S, A)));
  let package2 = aenc(<A, B, Na, Kab>, pk(sk(S, B)));
  event OUT_S(package1, package2);
  out(package1, package2);

let Response_B(package1, package2, Nb) =
  let <A, B, Na, Kab> = adec(package1, sk(S, B));
  event IN_B(package1, package2, Nb);
  event OUT_B(aenc(package1, pk(sk(S, A))), aenc(Na, Kab), Nb);
  out(aenc(package1, pk(sk(S, A))), aenc(Na, Kab), Nb);

let Acknowledgment_A(package1, Na, Nb) =
  let package1_decrypted = adec(package1, sk(S, A));
  let <A, B, Na, Kab> = package1_decrypted;
  event IN_A(package1, aenc(Na, Kab), Nb);
  event SessionBuilt(A, B, Kab, Na, Nb);
  event Session(A, B, Kab);
  out(aenc(Nb, Kab));

process:
!(
  new A, B, Na;
  !(
    new S;
    (!Initiation_A(A, B, Na) | !Server(S, A, B, Na))
  ) |
  !(
    in(package1, package2);
    !Response_B(package1, package2, Nb)
  ) |
  !(
    in(package1, Na_encrypted, Nb);
    !Acknowledgment_A(package1, Na, Nb)
  )
)
end