theory Needham_Schroeder_Public_Key_protocol
begin

functions: pk/1, aenc/2, adec/2
equations: adec(aenc(m,pk(sk)),sk)=m

let InitialRequestA(skA, pkB) =      
  new Na;
  event OUT_1(aenc(<A, Na>,pkB));
  out(aenc( <A,Na> ,pkB));
  event RequestA(A, Na) 
  
let RequestForwardingB(skB, pkS, Kbs, Kas) =  
  in(cypher1);
  let mess1 = adec(cypher1,skB) in
  let <A, Na> = mess1 in
  new Nb, Tb;
  let package1 = aenc(<B, A, Na, Kab, Tb>, Kas) in
  let package2 = aenc(<A, Kab, Tb>, Kbs) in
  event OUT_2(package1);
  out(package1);
  event OUT_3(package2);
  out(package2);
  event RequestForwardedB(B, A, Na, Nb, Tb);
  event RequestForwardedToServer(A, Na, Nb, Tb) 
  
let ServerResponseS(Kas, Kbs) =  
  in(package1);
  let mess1 = adec(package1,Kas) in
  let <B, Na, Kab, Tb> = mess1 in
  in(package2);
  let mess2 = adec(package2,Kbs) in
  let <A, Kab, Tb> = mess2 in
  new Nb;
  event OUT_4(aenc(<A, Kab, Tb>, Kbs));
  out(aenc(<A, Kab, Tb>, Kbs));
  event OUT_5(aenc(Nb, Kas));
  out(aenc(Nb, Kas));
  event ServerResponse(B, A, Na, Nb, Kab, Tb);
  event ServerResponseToB(A, Kab, Tb);
  event ServerResponseToA(B, Na, Nb, Kab, Tb) 

let TransmissionToB(A, Kab, Tb) =
  in(package2);
  let mess = adec(package2, Kab) in
  let <B, Na, Nb, Tb> = mess in
  event IN_6(package2);
  event TransmissionToB(A, B, Kab, Tb);
  event TransmissionToBReceived(B, A, Kab, Tb);
  event TransmissionToBReceivedByB(A, B, Kab, Tb);
  event TransmissionToBReceivedByA(B, A, Kab, Tb);
  out(package2)

let FirstMessageExchange(A, B, Kab, Tb) =
  in(Ma);
  event IN_7(Ma);
  event FirstMessageExchange(A, B, Kab, Tb);
  event FirstMessageExchangeReceived(B, A, Kab, Tb);
  event FirstMessageExchangeReceivedByB(A, B, Kab, Tb);
  event FirstMessageExchangeReceivedByA(B, A, Kab, Tb);
  out(Ma);
  out(aenc(<A, Kab, Tb>, Kbs))

let ResponseByB(B, A, Kab, Tb) =
  in(Mb);
  event IN_8(Mb);
  event ResponseByB(B, A, Kab, Tb);
  event ResponseByBReceived(A, B, Kab, Tb);
  event ResponseByBReceivedByB(A, B, Kab, Tb);
  event ResponseByBReceivedByA(A, B, Kab, Tb);
  out(Mb);
  out(aenc(Ma, Kab))

let FinalAcknowledgmentA(A, B, Kab, Tb) =
  in(Mb);
  event IN_9(Mb);
  event FinalAcknowledgmentA(A, B, Kab, Tb);
  event FinalAcknowledgmentAReceived(B, A, Kab, Tb);
  event FinalAcknowledgmentAReceivedByB(B, A, Kab, Tb);
  event FinalAcknowledgmentAReceivedByA(B, A, Kab, Tb);
  out(aenc(Mb, Kab))

process:
!(
  new skA; out(pk(skA)); event HonestA(pk(skA));
  !(
    new skB; out(pk(skB)); event HonestB(pk(skB));
    new pkS, Kbs, Kas; out(pk(pkS)); out(Kbs); out(Kas); event HonestS(pkS);
    (!InitialRequestA(skA, pkB) | !RequestForwardingB(skB, pkS, Kbs, Kas) | !ServerResponseS(Kas, Kbs) | !TransmissionToB(A, Kab, Tb) | !FirstMessageExchange(A, B, Kab, Tb) | !ResponseByB(B, A, Kab, Tb) | !FinalAcknowledgmentA(A, B, Kab, Tb))
  )
)   
end