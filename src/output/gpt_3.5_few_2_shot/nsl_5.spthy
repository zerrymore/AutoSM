theory Public_Key_Protocol
begin

functions: pk/1, aenc/2, adec/2
equations: adec(aenc(m, pk(sk)), sk) = m

let Alice(pubB, skB) =
  new Na;
  let message = <"A", Na> in
  let encrypted_message = aenc(message, pubB) in
  event OUT_A1(encrypted_message);
  out(encrypted_message);
  in(encrypted_nonce);
  let decrypted_nonce = adec(encrypted_nonce, skB) in
  let <"Na", Nb> = decrypted_nonce in
  event IN_A2(Na, Nb, encrypted_nonce);
  let response = aenc(Na, pubB) in
  event OUT_A3(response);
  out(response);
  in(encrypted_response);
  let decrypted_response = adec(encrypted_response, skB) in
  let Nb_received = decrypted_response in
  event IN_A4(Nb_received, encrypted_response)

let Bob(pubA, skA) =
  in(encrypted_message);
  let decrypted_message = adec(encrypted_message, skA) in
  let <"A", Na> = decrypted_message in
  event IN_B1(Na, encrypted_message);
  new Nb;
  let response = aenc(<Na, Nb>, pubA) in
  event OUT_B1(response);
  out(response);
  in(encrypted_response);
  let decrypted_response = adec(encrypted_response, skA) in
  let Nb_received = decrypted_response in
  event IN_B2(Nb_received, encrypted_response)

process:
!(
  new skA; out(pk(skA));
  new skB; out(pk(skB));
  (!Alice(pk(skB), skB) | !Bob(pk(skA), skA))
)
end