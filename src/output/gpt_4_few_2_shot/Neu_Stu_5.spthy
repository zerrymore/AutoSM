theory Kerberos_protocol
begin

functions: senc/2, sdec/2, pk/1, h/1
equations: sdec(senc(m, k), k) = m

let A(Kas, idA, idB, idS) = 
  new Na;
  out(<idA, Na>);
  in(cypher1);
  let <idB, =Na, Kab, Tb> = sdec(cypher1, Kas) in
  out(cypher2);
  let =Nb = sdec(cypher3, Kab) in
  new Ma;
  out(<Ma, senc(<idA, Kab, Tb>, idB)>);
  in(cypher4);
  let =Mb = sdec(cypher4, Kab) in
  out(senc(Mb, Kab))

let B(Kbs, idA, idB, idS) = 
  in(<idA, Na>);
  new Tb;
  out(<idB, senc(<idA, Na, Tb>, Kbs), Nb>);
  in(cypher2);
  let <idA, Kab, Tb> = sdec(cypher2, Kbs) in
  out(senc(Nb, Kab));
  in(<Ma, cypher5>);
  let <idA, Kab, Tb> = sdec(cypher5, Kbs) in
  new Mb;
  out(senc(Mb, Kab));
  in(cypher6);
  let =Mb = sdec(cypher6, Kab) in
  0

let S(Kas, Kbs, idA, idB, idS) = 
  in(<idB, cypher, Nb>);
  let <idA, Na, Tb> = sdec(cypher, Kbs) in
  new Kab;
  out(<senc(<idB, Na, Kab, Tb>, Kas), senc(<idA, Kab, Tb>, Kbs), Nb>)

process:
!(
  new Kas; new Kbs;
  let idA = id(Kas); let idB = id(Kbs); let idS = id(Kas, Kbs);
  out(idA); out(idB); out(idS);
  (!A(Kas, idA, idB, idS) | !B(Kbs, idA, idB, idS) | !S(Kas, Kbs, idA, idB, idS))
)
end
