theory Needham_Schroeder_Symmetric_Key_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let Alice(Kas, Kbs, idA, idB, idS) =
  new Na;
  out(<idA, idB, Na>);
  in(cypher);
  let < =Na, =idB, Kab, cypher2> = sdec(cypher, Kas) in
  out(cypher2);
  in(cypher3);
  let Nb = sdec(cypher3, Kab) in
  out(senc(Nb, Kab))

let Server(Kas, Kbs, idA, idB, idS) =
  in(<xidA, xidB, xNa>);
  new Kab;
  out(senc(<xNa, xidB, Kab, senc(<Kab, xidA>, Kbs)>, Kas))

let Bob(Kas, Kbs, idA, idB, idS) =
  in(cypher);
  let <Kab, =idA> = sdec(cypher, Kbs) in
  new Nb;
  out(senc(Nb, Kab));
  in(cypher2);
  let =Nb = sdec(cypher2, Kab) in
  0

process:
!(
  new Kas;
  new Kbs;
  let idA = id(Kas);
  let idB = id(Kbs);
  let idS = id(Kas, Kbs);
  out(idA);
  out(idB);
  out(idS);
  (!Alice(Kas, Kbs, idA, idB, idS) | !Server(Kas, Kbs, idA, idB, idS) | !Bob(Kas, Kbs, idA, idB, idS))
)
end