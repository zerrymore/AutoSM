theory Needham_Schroeder_Symmetric_Key_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m,k),k)=m

let A(Kas, Kbs, idA, idB, idS) = 
  new Na;
  event AtoS(idA, idB, Na);
  out(<idA, idB, Na>);
  in(cypher);
  let mess = sdec(cypher,Kas) in
  let < =idA, =idB, =Na, Kab> = mess in
  event StoA(cypher);
  out(<cypher, senc(Na,Kab)>);
  in(cypher1);
  let Nb = sdec(cypher1,Kab) in
  event BtoA(cypher1);
  out(senc(Nb,Kab));
  event AtoB(senc(Nb,Kab))

let B(Kbs, idA, idB, idS) = 
  in(cypher);
  let <cypher1, Na> = cypher in
  let mess = sdec(cypher1,Kbs) in
  let < =idA, =idB, =Na, Kab> = mess in
  event StoB(cypher1);
  new Nb;
  out(<cypher1, senc(Na,Kab), Nb>);
  event BtoA(<cypher1, senc(Na,Kab), Nb>);
  in(cypher2);
  let =Nb = sdec(cypher2,Kab) in
  event AtoB(cypher2)

let S(Kas, Kbs, idA, idB, idS) = 
  in(<xidA, xidB, xNa>);
  event AtoS(<xidA, xidB, xNa>);
  new Kab;
  let cypher1 = senc(<xidA, xidB, xNa, Kab>,Kas) in
  let cypher2 = senc(<xidA, xidB, xNa, Kab>,Kbs) in
  out(cypher2);
  event StoB(cypher2)

process:
!(
  new Kas; new Kbs; 
  let idA = id(Kas); out(idA);
  let idB = id(Kbs); out(idB);
  let idS = id(Kas, Kbs); out(idS);
  (!A(Kas, Kbs, idA, idB, idS) | !B(Kbs, idA, idB, idS) | !S(Kas, Kbs, idA, idB, idS))
)
end
