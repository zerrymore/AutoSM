theory Needham_Schroeder_Symmetric_Key_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let A(Kas, Kbs, idA, idB, idS) = 
  new Na;
  out(<idA, idB, Na>);
  in(<package1, package2, Nb>);
  let <idA, idB, =Na, Kab> = sdec(package1, Kas) in
  let =Na = sdec(package2, Kab) in
  out(senc(Nb, Kab))

let S(Kas, Kbs, idA, idB, idS) = 
  in(<=idA, =idB, Na>);
  new Kab;
  let package1 = senc(<idA, idB, Na, Kab>, Kas) in
  let package2 = senc(<idA, idB, Na, Kab>, Kbs) in
  out(<package1, package2, Na>)

let B(Kas, Kbs, idA, idB, idS) = 
  in(<package1, package2, Na>);
  let <idA, idB, Na, Kab> = sdec(package2, Kbs) in
  new Nb;
  out(<package1, senc(Na, Kab), Nb>);
  in(Nb);
  let =Nb = sdec(Nb, Kab) in
  0

process:
!(
  new Kas; new Kbs;
  let idA = id(Kas); out(idA);
  let idB = id(Kbs); out(idB);
  let idS = id(Kas, Kbs); out(idS);
  (!A(Kas, Kbs, idA, idB, idS) | !S(Kas, Kbs, idA, idB, idS) | !B(Kas, Kbs, idA, idB, idS))
)
end
