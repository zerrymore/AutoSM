theory SPLICE_AS_protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2, inc/1
equations: adec(aenc(m,pk(sk)),sk)=m

let Client(pkAS, skC, pkS, S, AS) = 
  new N1;
  out(<pkS, S, N1>);
  in(cypher1);
  let mess1 = adec(cypher1, skC) in
  let <=AS, =pkS, =S, =N1> = mess1 in
  new T, L, N2;
  out(<S, aenc(<pkC, T, L, aenc(N2, pkS)>, skC)>);

let Server(pkAS, skS, pkC, C, AS) = 
  in(cypher2);
  let <=C, =S, mess2> = cypher2 in
  let <=pkC, T, L, xN2> = adec(mess2, skS) in
  new N3;
  out(<pkC, C, N3>);
  in(cypher3);
  let mess3 = adec(cypher3, skS) in
  let <=AS, =pkC, =C, =N3> = mess3 in
  out(<C, aenc(<S, inc(xN2)>, pkC)>);

let AS(skAS, pkC, pkS, C, S) = 
  in(request1);
  let <=pkC, =C, xN1> = request1 in
  out(aenc(<AS, pkS, S, xN1>, skAS));
  in(request2);
  let <=pkS, =S, xN3> = request2 in
  out(aenc(<AS, pkC, C, xN3>, skAS));

process:
!(
  new skAS; out(pk(skAS)); event HonestAS(pk(skAS));
  new skC; out(pk(skC)); event HonestC(pk(skC));
  new skS; out(pk(skS)); event HonestS(pk(skS));
  (!Client(pk(skAS), sk(skC), pk(skS), S, AS) | !Server(pk(skAS), sk(skS), pk(skC), C, AS) | !AS(sk(skAS), pk(skC), pk(skS), C, S))
)
end
