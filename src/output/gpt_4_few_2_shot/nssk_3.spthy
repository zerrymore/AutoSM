theory Needham_Schroeder_Symmetric_Key_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m,k),k)=m

let Alice(Kas, Kbs, idA, idB, idS) = 
  new Na;
  out(senc(<idA, idB, Na>, Kas));
  in(cypher);
  let < =Na, =idB, Kab, xCypher> = sdec(cypher, Kas) in
  out(xCypher);
  in(cypher2);
  let xNb = sdec(cypher2, Kab) in
  out(senc(xNb, Kab))

let Server(Kas, Kbs, idA, idB, idS) = 
  in(cypher);
  let <xidA, xidB, xNa> = sdec(cypher, Kas) in
  new Kab;
  out(senc(<xNa, xidB, Kab, senc(<Kab, xidA>, Kbs)>, Kas))

let Bob(Kas, Kbs, idA, idB, idS) = 
  in(cypher);
  let <Kab, =idA> = sdec(cypher, Kbs) in
  new Nb;
  out(senc(Nb, Kab));
  in(cypher2);
  let =Nb = sdec(cypher2, Kab) in
  0

process:
!(
  new Kas; new Kbs;
  let idA = id(Kas); let idB = id(Kbs); let idS = id(Kas, Kbs);
  out(idA, idB, idS);
  (!Alice(Kas, Kbs, idA, idB, idS) | !Server(Kas, Kbs, idA, idB, idS) | !Bob(Kas, Kbs, idA, idB, idS))
)
end
