theory Denning_Sacco_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let Alice(Kas, idA, idB, KDC) = 
  out(KDC, <idA, idB>);  
  in(cypher);
  let mess = sdec(cypher, Kas) in
  let < =idB, Kab, T, cypher_for_B> = mess in
  out(idB, cypher_for_B);
  event SessionBuiltA(Kas, Kab, T)

let Bob(Kbs, idB) = 
  in(cypher_for_B);
  let mess = sdec(cypher_for_B, Kbs) in
  let <Kab, =idB, T> = mess in
  event SessionBuiltB(Kbs, Kab, T)

let KDC(Kas, Kbs, idA, idB) = 
  in(<xidA, xidB>);
  new Kab;
  new T;
  let cypher_for_B = senc(<Kab, xidA, T>, Kbs) in
  let cypher = senc(<xidB, Kab, T, cypher_for_B>, Kas) in
  out(xidA, cypher);
  event SessionBuiltKDC(Kas, Kbs, Kab, T)

process:
!(
  new Kas; new Kbs; 
  let idA = id(Kas); out(idA);
  let idB = id(Kbs); out(idB);
  let KDC = id(Kas, Kbs); out(KDC);
  (!Alice(Kas, idA, idB, KDC) | !Bob(Kbs, idB) | !KDC(Kas, Kbs, idA, idB))
)
end
