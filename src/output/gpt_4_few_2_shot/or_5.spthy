theory protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let A(kas, idA, idB, idS) = 
  new Na, I;
  let message1 = <I, idA, idB, senc(<Na, I, idA, idB>, kas)> in
  out(message1);

let B(kbs, idA, idB, idS) =
  in(message1);
  let <I, =idA, =idB, encA> = message1 in
  new Nb;
  let message2 = <message1, senc(<Nb, I, idA, idB>, kbs)> in
  out(message2, idS);

let S(kas, kbs, idA, idB, idS) =
  in(message2, =idS);
  let <message1, encB> = message2 in
  let <I, =idA, =idB, encA> = message1 in
  let <Na, =I, =idA, =idB> = sdec(encA, kas) in
  let <Nb, =I, =idA, =idB> = sdec(encB, kbs) in
  new kab;
  let message3 = <senc(<Na, kab>, kas), senc(<Nb, kab>, kbs)> in
  out(message3, idB);

let B2(kbs, idA, idB, idS) =
  in(message3, =idB);
  let <encA, encB> = message3 in
  let <Nb, kab> = sdec(encB, kbs) in
  let message4 = <I, encA> in
  out(message4, idA);

let A2(kas, idA, idB, idS) =
  in(message4, =idA);
  let <I, encA> = message4 in
  let <Na, kab> = sdec(encA, kas) in
  0

process:
!(
    new kas, kbs;
    let idA = id(kas); out(idA);
    let idB = id(kbs); out(idB);
    let idS = id(kas, kbs); out(idS);
    (!A(kas, idA, idB, idS) | !B(kbs, idA, idB, idS) | !S(kas, kbs, idA, idB, idS) | !B2(kbs, idA, idB, idS) | !A2(kas, idA, idB, idS))
  )
)
end