theory SigFox_protocol
begin

functions: pk/1, aenc/2, adec/2, sign/2, verify/2
equations: adec(aenc(m,pk(sk)),sk)=m, verify(sign(m,sk),pk(sk))=m

let Server(skA, pkB)=      
  new na;
  let mess = aenc(<pk(skA), na>, pkB) in
  let sig = sign(mess, skA) in
  event OUT_A_1(<mess, sig>);
  out(<mess, sig>);

let Device(skB, pkA) =  
  in(cypher);
  let <mess, sig> = cypher in
  let mess1 = verify(sig, pkA) in
  let <xpkA, xna> = adec(mess1, skB) in
  event IN_B_1(<xpkA, xna>, <mess, sig>);

process:
!(
  new skA; out(pk(skA)); event HonestA(pk(skA));
  new skB; out(pk(skB)); event HonestB(pk(skB));
  (!Server(skA, pk(skB)) | !Device(skB, pk(skA)))
)   
end