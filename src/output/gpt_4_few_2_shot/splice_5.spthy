theory SPLICE_AS_protocol
begin

functions: pk/1, sk/1, senc/2, aenc/2, adec/2, inc/1
equations: adec(aenc(m,pk(sk)),sk)=m, sdec(senc(m, k), k) = m

let Client(pkAS, skC, pkS) = 
  new N1;
  out(<pk(skC), pkS, N1>);
  in(cypher1);
  let mess1 = adec(cypher1, skC) in
  let <=pkAS, =pk(skC), =N1, =pkS> = mess1 in
  new N2;
  new T;
  new L;
  let cypher2 = senc(<pk(skC), T, L, aenc(N2, pkS)>, skC) in
  out(<pk(skC), pkS, cypher2>);
  in(cypher3);
  let mess2 = adec(cypher3, skC) in
  let <=pkS, =pk(skC), xN2> = mess2 in
  event SessionBuiltC(pk(skC), N2, xN2)

let Server(pkAS, skS, pkC) = 
  in(cypher1);
  let <=pkC, =pkS, cypher2> = cypher1 in
  let mess1 = sdec(cypher2, skS) in
  let <=pkC, xT, xL, xN2> = mess1 in
  new N3;
  out(<pk(skS), pkC, N3>);
  in(cypher3);
  let mess2 = adec(cypher3, skS) in
  let <=pkAS, =pk(skS), =N3, =pkC> = mess2 in
  let cypher4 = aenc(<pk(skS), inc(xN2)>, pkC) in
  out(<pk(skS), pkC, cypher4>);
  event SessionBuiltS(pk(skS), xN2, inc(xN2))

let AS(skAS, pkC, pkS) = 
  in(cypher1);
  let <=pkC, =pkS, xN1> = cypher1 in
  let cypher2 = aenc(<pk(skAS), pkC, xN1, pkS>, skAS) in
  out(cypher2);
  in(cypher3);
  let <=pkS, =pkC, xN3> = cypher3 in
  let cypher4 = aenc(<pk(skAS), pkS, xN3, pkC>, skAS) in
  out(cypher4)

process:
!(
  new skAS; out(pk(skAS));
  new skC; out(pk(skC));
  new skS; out(pk(skS));
  !(
    Client(pk(skAS), skC, pk(skS)) | Server(pk(skAS), skS, pk(skC)) | AS(skAS, pk(skC), pk(skS))
  )
)   
end