theory SPLICE_AS_protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2, inc/1
equations: adec(aenc(m,pk(sk)),sk)=m

let Client(pkAS, skC, pkS)=      
  new N1;
  event ClientToAS(<pk(skC), pkS, N1>);
  out(<pk(skC), pkS, N1>);  
  in(cypher1);
  let mess1 = adec(cypher1,skC) in
  let <=pkAS, =pk(skC), =N1, xpkS> = mess1 in
  event ASToClient(<pkAS, <pkAS, pk(skC), N1, xpkS>sk(pkAS)>);
  new T; new L; new N2;
  event ClientToServer(<pk(skC), pkS, <pk(skC), T, L, {N2}xpkS>sk(pk(skC))>);
  out(<pk(skC), pkS, <pk(skC), T, L, {N2}xpkS>sk(pk(skC))>);
  in(cypher2);
  let mess2 = adec(cypher2,skC) in
  let <=pkS, =pk(skC), xincN2> = mess2 in
  event ServerToClient(<pkS, pk(skC), <pkS, xincN2>pk(skC)>)
  
let Server(pkAS, skS, pkC) =  
  in(cypher3);
  let <xpkC, =pkS, mess3> = cypher3 in
  event ClientToServer(<xpkC, pkS, mess3>);
  new N3;
  event ServerToAS(<pkS, xpkC, N3>);
  out(<pkS, xpkC, N3>);
  in(cypher4);
  let mess4 = adec(cypher4,skS) in
  let <=pkAS, =pkS, =N3, xpkC> = mess4 in
  event ASToServer(<pkAS, <pkAS, pkS, N3, xpkC>sk(pkAS)>);
  let <xpkC, xT, xL, cypher5> = mess3 in
  let xN2 = adec(cypher5,skS) in
  event ServerToClient(<pkS, xpkC, <pkS, inc(xN2)>pk(skC)>);
  out(<pkS, xpkC, <pkS, inc(xN2)>pk(skC)>)

let AS(skAS, pkC, pkS) =  
  in(cypher6);
  let <xpkC, xpkS, xN1> = cypher6 in
  event ClientToAS(<xpkC, xpkS, xN1>);
  event ASToClient(<pk(skAS), <pk(skAS), xpkC, xN1, pkS>sk(pk(skAS))>);
  out(aenc(<pk(skAS), xpkC, xN1, pkS>, skAS));
  in(cypher7);
  let <xpkS, xpkC, xN3> = cypher7 in
  event ServerToAS(<xpkS, xpkC, xN3>);
  event ASToServer(<pk(skAS), <pk(skAS), xpkS, xN3, pkC>sk(pk(skAS))>);
  out(aenc(<pk(skAS), xpkS, xN3, pkC>, skAS))

process:
!(
  new skAS; out(pk(skAS)); event HonestAS(pk(skAS));
  new skC; out(pk(skC)); event HonestC(pk(skC));
  new skS; out(pk(skS)); event HonestS(pk(skS));
  (!Client(pk(skAS), skC, pk(skS)) | !Server(pk(skAS), skS, pk(skC)) | !AS(skAS, pk(skC), pk(skS)))
)   
end