theory Otway_Rees_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let A(kas, kab, I, B, S) =
  new Na;
  let message1 = <I, A, B, senc(<Na, I, A, B>, kas)> in
  out(message1);
  in(message4);
  let <I, message4_part> = message4 in
  let <Na, =kab> = sdec(message4_part, kas) in
  0

let B(kbs, kab, I, A, S) =
  in(message1);
  let <I, A, B, message1_part> = message1 in
  new Nb;
  let message2 = <message1, senc(<Nb, I, A, B>, kbs)> in
  out(message2);
  in(message3);
  let <I, message3_partA, message3_partB> = message3 in
  let <Nb, =kab> = sdec(message3_partB, kbs) in
  let message4 = <I, message3_partA> in
  out(message4);
  0

let S(kas, kbs, kab, I, A, B) =
  in(message2);
  let <message1, message2_part> = message2 in
  let <I, A, B, message1_part> = message1 in
  let <Na, I, =A, =B> = sdec(message1_part, kas) in
  let <Nb, I, =A, =B> = sdec(message2_part, kbs) in
  let message3 = <I, senc(<Na, kab>, kas), senc(<Nb, kab>, kbs)> in
  out(message3);
  0

process:
!(
  new I;
  new kas;
  new kbs;
  new kab;
  let A = id(kas);
  let B = id(kbs);
  let S = id(kab);
  (!A(kas, kab, I, B, S) | !B(kbs, kab, I, A, S) | !S(kas, kbs, kab, I, A, B))
)
end
