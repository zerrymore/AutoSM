theory Kerberos_protocol
begin

functions: senc/2, sdec/2, pk/1
equations: sdec(senc(m, k), k) = m

let A(Kas, Kbs, idA, idB, idS) =
  new Na;
  out(idA, Na);
  in(cypher1);
  let mess1 = sdec(cypher1, Kas) in
  let <=idB, =Na, Kab, =Tb> = mess1 in
  in(cypher2);
  let mess2 = sdec(cypher2, Kab) in
  let =Nb = mess2 in
  new Ma;
  out(Ma, senc(<idA, Kab, Tb>, Kbs));
  in(cypher3);
  let mess3 = sdec(cypher3, Kab) in
  let =Mb, =Ma = mess3 in
  out(senc(Mb, Kab))

let B(Kas, Kbs, idA, idB, idS) =
  in(idA, xNa);
  new Tb;
  out(idB, senc(<idA, xNa, Tb>, Kbs));
  in(cypher1);
  let mess1 = sdec(cypher1, Kbs) in
  let <=idA, Kab, =Tb> = mess1 in
  new Nb;
  out(senc(Nb, Kab));
  in(xMa, cypher2);
  let mess2 = sdec(cypher2, Kbs) in
  let <=idA, =Kab, =Tb> = mess2 in
  new Mb;
  out(senc(<Mb, xMa>, Kab))

let S(Kas, Kbs, idA, idB, idS) =
  in(idB, cypher);
  let mess = sdec(cypher, Kbs) in
  let <=idA, xNa, Tb> = mess in
  new Kab;
  out(senc(<idB, xNa, Kab, Tb>, Kas));
  out(senc(<idA, Kab, Tb>, Kbs))

process:
!(
  new Kas; new Kbs;
  let idA = pk(Kas); let idB = pk(Kbs); let idS = pk(Kas);
  out(idA); out(idB); out(idS);
  (!A(Kas, Kbs, idA, idB, idS) | !B(Kas, Kbs, idA, idB, idS) | !S(Kas, Kbs, idA, idB, idS))
)
end
