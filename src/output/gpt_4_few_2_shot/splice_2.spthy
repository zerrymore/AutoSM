theory SPLICE_AS_protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2, inc/1
equations: adec(aenc(m,pk(sk)),sk)=m

let Client(skC, pkS, pkAS, idS, idAS) = 
  new N1;
  out(<idC, idS, N1>);
  in(cypher);
  let < =idAS, mess> = adec(cypher, skC) in
  let < =idAS, =idC, =N1, =pkS> = mess in
  new T;
  new L;
  new N2;
  let mess2 = <idC, T, L, aenc(N2, pkS)> in
  out(<idC, idS, aenc(mess2, skC)>);

let Server(skS, pkC, pkAS, idC, idAS) = 
  in(cypher1);
  let < =idC, =idS, mess1> = adec(cypher1, skS) in
  let < =idC, T, L, cypher2> = mess1 in
  new N3;
  out(<idS, idC, N3>);
  in(cypher3);
  let < =idAS, mess2> = adec(cypher3, skS) in
  let < =idAS, =idS, =N3, =pkC> = mess2 in
  let N2 = adec(cypher2, skS) in
  out(<idS, idC, aenc(inc(N2), pkC)>);

let AS(skAS, pkC, pkS, idC, idS) = 
  in(cypher1);
  let < =idC, =idS, N1> = cypher1 in
  let mess1 = <idAS, idC, N1, pkS> in
  out(aenc(mess1, skAS));
  in(cypher2);
  let < =idS, =idC, N3> = cypher2 in
  let mess2 = <idAS, idS, N3, pkC> in
  out(aenc(mess2, skAS));

process:
!(
  new skC; new skS; new skAS;
  let idC = pk(skC); let idS = pk(skS); let idAS = pk(skAS);
  out(idC); out(idS); out(idAS);
  (!Client(skC, pkS, pkAS, idS, idAS) | !Server(skS, pkC, pkAS, idC, idAS) | !AS(skAS, pkC, pkS, idC, idS))
)
end
