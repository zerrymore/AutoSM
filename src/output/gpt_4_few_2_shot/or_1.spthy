theory Otway_Rees_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let A(kas, kab, idA, idB, idS) = 
  new Na, I;
  let message1 = <I, idA, idB, senc(<Na, I, idA, idB>, kas)> in
  out(message1);
  in(message4);
  let < =I, message4_sub> = message4 in
  let < =Na, =kab> = sdec(message4_sub, kas) in
  event SessionBuiltA(kas, kab, Na, I)

let B(kbs, kab, idA, idB, idS) =
  in(message1);
  let <I, =idA, =idB, message1_sub> = message1 in
  let <Na, =I, =idA, =idB> = sdec(message1_sub, kbs) in
  new Nb;
  let message2 = <I, idA, idB, message1_sub, senc(<Nb, I, idA, idB>, kbs)> in
  out(message2);
  in(message3);
  let < =I, message3_sub1, message3_sub2> = message3 in
  let < =Nb, =kab> = sdec(message3_sub2, kbs) in
  let message4 = <I, message3_sub1> in
  out(message4);
  event SessionBuiltB(kbs, kab, Nb, I)

let S(kas, kbs, kab, idA, idB, idS) =
  in(message2);
  let <I, =idA, =idB, message2_sub1, message2_sub2> = message2 in
  let <Na, =I, =idA, =idB> = sdec(message2_sub1, kas) in
  let <Nb, =I, =idA, =idB> = sdec(message2_sub2, kbs) in
  let message3 = <I, senc(<Na, kab>, kas), senc(<Nb, kab>, kbs)> in
  out(message3);
  event SessionBuiltS(kas, kbs, kab, Na, Nb, I)

process:
!(
  new kas, kbs, kab; 
  let idA = id(kas); out(idA);
  let idB = id(kbs); out(idB);
  let idS = id(kab); out(idS);
  (!A(kas, kab, idA, idB, idS)  | !B(kbs, kab, idA, idB, idS)  | !S(kas, kbs, kab, idA, idB, idS))
)
end