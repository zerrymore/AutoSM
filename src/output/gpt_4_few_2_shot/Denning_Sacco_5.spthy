theory Denning_Sacco_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let Alice(Kas, idA, idB, idS) =
  out(idS, <idA, idB>);
  in(cypher);
  let < =idB, Kab, T, cypher_for_B> = sdec(cypher, Kas) in
  out(idB, cypher_for_B);

let Server(Kas, Kbs, idA, idB, idS) =
  in(=idS, req);
  let < =idA, =idB> = req in
  new Kab;
  new T;
  let cypher_for_B = senc(<Kab, idA, T>, Kbs) in
  out(idA, senc(<idB, Kab, T, cypher_for_B>, Kas));

let Bob(Kbs, idB) =
  in(=idB, cypher);
  let <Kab, =idA, T> = sdec(cypher, Kbs) in
  0

process:
!(
  new Kas; new Kbs;
  let idA = id(Kas); out(idA);
  let idB = id(Kbs); out(idB);
  let idS = id(idA, idB); out(idS);
  (!Alice(Kas, idA, idB, idS) | !Server(Kas, Kbs, idA, idB, idS) | !Bob(Kbs, idB))
)
end
