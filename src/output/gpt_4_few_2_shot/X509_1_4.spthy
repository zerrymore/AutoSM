theory CCITT_X509_version1_protocol
begin

functions: pk/1, sk/1, aenc/2, adec/2, senc/2, sdec/2, h/1
equations: 
  adec(aenc(m,pk(sk)),sk)=m,
  sdec(senc(m, sk), pk(sk))=m

let Alice(pkB, skA, B)=      
  new Ta; new Na; new Xa; new Ya;
  let cypher = aenc(Ya, pkB) in
  let signed_part = senc(h(<Ta, Na, B, Xa, cypher>), skA) in
  out(<A, Ta, Na, B, Xa, cypher, signed_part>);

let Bob(skB, pkA, A)=  
  in(mess);
  let <A, xTa, xNa, B, xXa, cypher, signed_part> = mess in
  let Ya = adec(cypher, skB) in
  let =h(<xTa, xNa, B, xXa, cypher>) = sdec(signed_part, pkA) in
  event Received_Message(A, xTa, xNa, B, xXa, Ya);

process:
!(
  new skA; out(pk(skA)); event HonestA(pk(skA));
  new skB; out(pk(skB)); event HonestB(pk(skB));
  (!Alice(pk(skB), skA, B) | !Bob(skB, pk(skA), A))
)   
end