theory Needham_Schroeder_Symmetric_Key_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m,k),k) = m

let Alice(Kas, Kbs, A, B, S) = 
  new Na;
  out(senc(<A, B, Na>, Kas));
  in(cypher);
  let < =Na, =B, Kab, x> = sdec(cypher, Kas) in
  out(x);
  in(cypher2);
  let Nb = sdec(cypher2, Kab) in
  out(senc(Nb, Kab))

let Server(Kas, Kbs, A, B, S) = 
  in(cypher);
  let <x, y, Na> = sdec(cypher, Kas) in
  new Kab;
  out(senc(<Na, y, Kab, senc(<Kab, x>, Kbs)>, Kas))

let Bob(Kas, Kbs, A, B, S) = 
  in(cypher);
  let <Kab, =A> = sdec(cypher, Kbs) in
  new Nb;
  out(senc(Nb, Kab));
  in(cypher2);
  let =Nb = sdec(cypher2, Kab) in
  0

process:
!(
  new Kas; new Kbs;
  let A = id(Kas); out(A);
  let B = id(Kbs); out(B);
  let S = id(Kas); out(S);
  (!Alice(Kas, Kbs, A, B, S) | !Server(Kas, Kbs, A, B, S) | !Bob(Kas, Kbs, A, B, S))
)
end
