theory Needham_Schroeder_Kerberos_protocol
begin

functions: pk/1, senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let A(Kas, Kbs, idA, idB, idS) = 
  new Na;
  out(<idA, Na>);
  in(cypher1);
  let mess1 = sdec(cypher1, Kas) in
  let <=idB, =Na, Kab, =Tb> = mess1 in
  in(cypher2);
  let <=idA, =Kab, =Tb> = sdec(cypher2, Kbs) in
  new Ma;
  out(<Ma, senc(<idA, Kab, Tb>, Kbs)>);
  in(cypher3);
  let <=Mb, =Ma> = sdec(cypher3, Kab) in
  out(senc(Mb, Kab))

let B(Kas, Kbs, idA, idB, idS) = 
  in(<xidA, xNa>);
  new Tb;
  out(<idB, senc(<xidA, xNa, Tb>, Kbs), xNa>);
  in(cypher1);
  let mess1 = sdec(cypher1, Kbs) in
  let <=xidA, Kab, =Tb> = mess1 in
  in(<xMa, cypher2>);
  let <=xidA, =Kab, =Tb> = sdec(cypher2, Kbs) in
  new Mb;
  out(senc(<Mb, xMa>, Kab))

let S(Kas, Kbs, idA, idB, idS) = 
  in(<xidB, cypher, xNb>);
  let <xidA, xNa, Tb> = sdec(cypher, Kbs) in
  new Kab;
  out(senc(<idB, xNa, Kab, Tb>, Kas));
  out(senc(<xidA, Kab, Tb>, Kbs), xNb)

process:
!(
  new Kas; new Kbs;
  let idA = id(Kas); let idB = id(Kbs); let idS = id(Kas, Kbs);
  out(idA); out(idB); out(idS);
  (!A(Kas, Kbs, idA, idB, idS) | !B(Kas, Kbs, idA, idB, idS) | !S(Kas, Kbs, idA, idB, idS))
)
end
