theory Needham_Schroeder_Symmetric_Key_protocol
begin

functions: senc/2, sdec/2
equations: sdec(senc(m, k), k) = m

let Alice(Kas, Kbs, A, B) = 
  new Na;
  out(<A, B, Na>);
  in(cypher);
  let < =Na, =B, Kab, cypher2> = sdec(cypher, Kas) in
  out(cypher2);
  in(cypher3);
  let Nb = sdec(cypher3, Kab) in
  out(senc(Nb, Kab))

let Server(Kas, Kbs, A, B) =
  in(<xA, xB, xNa>);
  new Kab;
  let cypher1 = senc(<xNa, xB, Kab, senc(<Kab, xA>, Kbs)>, Kas) in
  out(cypher1)

let Bob(Kas, Kbs, A, B) =
  in(cypher);
  let <Kab, =A> = sdec(cypher, Kbs) in
  new Nb;
  out(senc(Nb, Kab));
  in(cypher2);
  let =Nb = sdec(cypher2, Kab) in
  0

process:
!(
  new Kas; new Kbs; new A; new B;
  out(<A, B>);
  (!Alice(Kas, Kbs, A, B) | !Server(Kas, Kbs, A, B) | !Bob(Kas, Kbs, A, B))
)
end
